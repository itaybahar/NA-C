@namespace Blazor_WebAssembly_Project.Layout

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="() => Cancel()"></button>
            </div>
            <div class="modal-body">
                <p>@ChildContent</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => Cancel()">@CancelText</button>
                <button type="button" class="btn btn-primary" @onclick="() => Confirm()">@ConfirmText</button>
            </div>
        </div>
    </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string Title { get; set; } = "Confirm";

    [Parameter]
    public string ConfirmText { get; set; } = "OK";

    [Parameter]
    public string CancelText { get; set; } = "Cancel";

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; } // Made nullable to fix CS8618

    private string _modalDisplay = "none";
    private string _modalClass = "";
    private bool _showBackdrop = false;

    public void Show()
    {
        _modalDisplay = "block";
        _modalClass = "show";
        _showBackdrop = true;
        StateHasChanged();
    }

    public void Hide()
    {
        _modalDisplay = "none";
        _modalClass = "";
        _showBackdrop = false;
        StateHasChanged();
    }

    private void Confirm()
    {
        Hide();
        OnConfirm.InvokeAsync();
    }

    private void Cancel()
    {
        Hide();
        OnCancel.InvokeAsync();
    }
}