<!-- Blazor WebAssembly Project/Components/common/ApiConnectionStatus.razor -->
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div id="@ContainerId" class="@ContainerClass">
    @if (!Connected && !Failed)
    {
        <div class="api-connection-overlay">
            <div class="connection-spinner"></div>
            <p>מתחבר לשרת...</p>
        </div>
    }
    else if (Failed)
    {
        <div class="api-error-overlay">
            <div class="error-icon">
                <i class="bi bi-exclamation-triangle"></i>
            </div>
            <p>לא ניתן להתחבר לשרת.</p>
            <p>@ErrorMessage</p>
            <button class="btn-action mt-3" @onclick="RetryConnection">נסה להתחבר שוב</button>
        </div>
    }

    <div class="@((!Connected || Failed) ? "content-hidden" : "")">
        @ChildContent
    </div>
</div>

<style>
    .api-connection-overlay, .api-error-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.7);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
        text-align: center;
        padding: 20px;
    }

    .api-error-overlay {
        background: rgba(220,53,69,0.85);
    }

    .error-icon {
        font-size: 48px;
        margin-bottom: 20px;
    }

    .api-connection-container {
        position: relative;
        min-height: 200px;
    }

    .content-hidden {
        visibility: hidden;
    }

    .connection-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 15px;
    }

    keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string ContainerId { get; set; } = $"api-container-{Guid.NewGuid():N}";
    [Parameter] public string ContainerClass { get; set; } = "api-connection-container";
    [Parameter] public EventCallback<bool> OnConnectionStatusChanged { get; set; }

    private bool Connected { get; set; } = false;
    private bool Failed { get; set; } = false;
    private string ErrorMessage { get; set; } = "בדוק את חיבור האינטרנט שלך ונסה שוב.";
    private DotNetObjectReference<ApiConnectionStatus>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("apiConnection.initializeComponent", ContainerId, objRef);
        }
    }

    [JSInvokable]
    public async Task OnApiConnected(string apiUrl)
    {
        Connected = true;
        Failed = false;
        await OnConnectionStatusChanged.InvokeAsync(true);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnApiConnectionFailed()
    {
        Connected = false;
        Failed = true;
        await OnConnectionStatusChanged.InvokeAsync(false);
        StateHasChanged();
    }

    private async Task RetryConnection()
    {
        Connected = false;
        Failed = false;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("apiConnection.initializeComponent", ContainerId, objRef);
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }
}
