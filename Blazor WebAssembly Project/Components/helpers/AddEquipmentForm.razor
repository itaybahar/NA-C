@using Domain_Project.DTOs
@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly.Models.Equipment

@inject IEquipmentService EquipmentService

<link href="css/helpers.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">הוספת פריט חדש</h2>

<div class="content-container">
    @if (!string.IsNullOrWhiteSpace(Message))
    {
        <div class="@(IsError ? "alert-danger" : "alert-success") mb-4" aria-live="polite">
            @Message
        </div>
    }

    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>טוען נתונים...</p>
        </div>
    }
    else
    {
        <div class="form-group">
            <label class="input-label" for="name">שם פריט</label>
            <input id="name" class="form-control" placeholder="שם הפריט" @bind="NewItem.Name" />
        </div>

        <div class="form-group">
            <label class="input-label" for="description">תיאור פריט</label>
            <textarea id="description" class="form-control" placeholder="תיאור קצר של הפריט" @bind="NewItem.Description" rows="3"></textarea>
        </div>

        <div class="form-group">
            <label class="input-label" for="serialNumber">מספר סידורי</label>
            <input id="serialNumber" class="form-control" placeholder="מספר סידורי של הפריט" @bind="NewItem.SerialNumber" />
        </div>

        <div class="form-group">
            <label class="input-label" for="quantity">כמות</label>
            <input id="quantity" class="form-control" placeholder="כמות הפריטים במלאי" type="number" @bind="NewItem.Quantity" min="1" />
        </div>

        <div class="form-group">
            <label class="input-label" for="storageLocation">מיקום אחסון</label>
            <input id="storageLocation" class="form-control" placeholder="מיקום האחסון של הפריט" @bind="NewItem.StorageLocation" />
        </div>

        <div class="form-group">
            <label class="input-label" for="status">סטטוס</label>
            <select id="status" class="form-control" @bind="NewItem.Status">
                <option value="" disabled selected>בחר סטטוס</option>
                <option value="Available">זמין</option>
                <option value="InUse">בשימוש</option>
                <option value="Maintenance">בתחזוקה</option>
                <option value="Returned">מוחזר</option>
                <option value="Unavailable">לא זמין</option>
            </select>
        </div>

        <div class="form-group">
            <label class="input-label" for="value">ערך (ש״ח)</label>
            <input id="value" class="form-control" placeholder="ערך כספי של הפריט" type="number" @bind="NewItem.Value" min="0" step="0.01" />
        </div>

        <button class="btn-submit" @onclick="HandleAddEquipment" disabled="@IsSubmitting">
            @if (IsSubmitting)
            {
                <div class="inline-flex items-center">
                    <div class="spinner spinner-sm mr-2"></div>
                    <span>מוסיף...</span>
                </div>
            }
            else
            {
                <span>הוסף למערכת</span>
            }
        </button>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnEquipmentAdded { get; set; }

    private async Task HandleAddEquipment()
    {
        await AddEquipment();
    }

    private async Task AddEquipment()
    {
        if (!ValidateForm())
            return;

        IsSubmitting = true;
        StateHasChanged();

        try
        {
            // Log fields to console for debugging
            Console.WriteLine($"Adding equipment: Name={NewItem.Name}, StorageLocation={NewItem.StorageLocation}, Status={NewItem.Status}, Quantity={NewItem.Quantity}, Value={NewItem.Value}");

            var result = await EquipmentService.AddEquipmentAsync(NewItem);

            if (result)
            {
                Message = "הפריט נוסף בהצלחה!";
                IsError = false;

                // Notify parent component
                await OnEquipmentAdded.InvokeAsync();

                // Reset form
                ResetForm();
            }
            else
            {
                Message = "שגיאה בהוספת הפריט";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Console.WriteLine($"Error adding equipment: {ex}");
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private EquipmentModel NewItem = new()
    {
        Name = string.Empty,
        Description = string.Empty,
        SerialNumber = string.Empty,
        Status = string.Empty,
        StorageLocation = string.Empty,
        Quantity = 1, // Default quantity to 1
        Value = 0     // Default value to 0
    };

    private string? Message;
    private bool IsError = false;
    private bool IsSubmitting = false;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            // Initialize the component, could load data if needed in the future
            await Task.Delay(100); // Simulate a short load time
        }
        catch (Exception ex)
        {
            Message = $"שגיאה בטעינת הטופס: {ex.Message}";
            IsError = true;
            Console.WriteLine($"Error initializing add equipment form: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        IsSubmitting = true;
        Message = string.Empty;
        IsError = false;
        StateHasChanged();

        // Validate required fields
        if (string.IsNullOrWhiteSpace(NewItem.Name))
        {
            Message = "יש להזין שם פריט";
            IsError = true;
            IsSubmitting = false;
            return false;
        }

        if (string.IsNullOrWhiteSpace(NewItem.StorageLocation))
        {
            Message = "יש להזין מיקום אחסון";
            IsError = true;
            IsSubmitting = false;
            return false;
        }

        if (string.IsNullOrWhiteSpace(NewItem.Status))
        {
            Message = "יש לבחור סטטוס";
            IsError = true;
            IsSubmitting = false;
            return false;
        }

        if (NewItem.Quantity <= 0)
        {
            Message = "יש להזין כמות תקינה (מספר חיובי)";
            IsError = true;
            IsSubmitting = false;
            return false;
        }

        if (NewItem.Value < 0)
        {
            Message = "יש להזין ערך תקין (מספר חיובי)";
            IsError = true;
            IsSubmitting = false;
            return false;
        }

        return true;
    }

    private void ResetForm()
    {
        NewItem = new()
        {
            Name = string.Empty,
            Description = string.Empty,
            SerialNumber = string.Empty,
            Status = string.Empty,
            StorageLocation = string.Empty,
            Quantity = 1,
            Value = 0
        };
    }
}
