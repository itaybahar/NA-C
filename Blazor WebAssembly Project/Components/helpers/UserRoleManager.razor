@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@inject IUserService UserService
@inject IAuthService AuthService
@inject ILogger<UserRoleManager> Logger

<link href="css/dashboard.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">ניהול משתמשים והרשאות</h2>

<div class="dashboard-section">
    <div class="widget-header">
        <h3 class="widget-title">משתמשי המערכת</h3>
        <div class="widget-actions">
            <button class="btn-refresh" title="רענן רשימה" @onclick="RefreshUsers">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <div class="search-container mb-4">
        <div class="search-input-container">
            <input class="search-bar" placeholder="חפש לפי שם משתמש, אימייל או שם מלא..."
                   @bind="searchTerm" @bind:event="oninput" />
            <i class="bi bi-search search-icon"></i>
        </div>

        <div class="search-filters mt-3">
            <div class="search-field">
                <select class="form-control" @bind="roleFilter">
                    <option value="">כל התפקידים</option>
                    <option value="User">משתמש</option>
                    <option value="WarehouseOperator">פקיד מחסן</option>
                    <option value="WarehouseManager">אחראי מחסן</option>
                    @if (currentUserIsAdmin)
                    {
                        <option value="Admin">מנהל מערכת</option>
                    }
                </select>
            </div>
            <div class="search-field">
                <select class="form-control" @bind="statusFilter">
                    <option value="">כל הסטטוסים</option>
                    <option value="true">פעיל</option>
                    <option value="false">לא פעיל</option>
                </select>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>טוען נתונים...</p>
        </div>
    }
    else if (users.Count == 0)
    {
        <div class="empty-state">
            <i class="bi bi-people empty-icon"></i>
            <p class="no-history">אין משתמשים להציג</p>
            <div class="empty-buttons">
                <button class="btn-action" @onclick="RefreshUsers">רענן רשימה</button>
            </div>
        </div>
    }
    else
    {
        <div class="info-bar">
            <span class="records-count">@FilteredUsers.Count משתמשים מתוך @users.Count</span>
            <div class="flex gap-2">
                <button class="btn-icon @(viewMode == ViewMode.List ? "active" : "")" title="תצוגת רשימה" @onclick="() => viewMode = ViewMode.List">
                    <i class="bi bi-list-ul"></i>
                </button>
                <button class="btn-icon @(viewMode == ViewMode.Cards ? "active" : "")" title="תצוגת קלפים" @onclick="() => viewMode = ViewMode.Cards">
                    <i class="bi bi-grid-3x3-gap"></i>
                </button>
            </div>
        </div>

        @if (viewMode == ViewMode.List)
        {
            <div class="table-responsive">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>מזהה</th>
                            <th>שם משתמש</th>
                            <th>דואר אלקטרוני</th>
                            <th>שם מלא</th>
                            <th>תפקיד נוכחי</th>
                            <th>סטטוס</th>
                            <th>פעולות</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in FilteredUsers)
                        {
                            <tr class="@(GetUserIsActive(user) ? "" : "inactive")">
                                <td>@user.UserID</td>
                                <td>@user.Username</td>
                                <td>@user.Email</td>
                                <td>@($"{user.FirstName} {user.LastName}")</td>
                                <td>
                                    <span class="status-badge @GetRoleBadgeClass(user.Role)">
                                        @GetHebrewRoleName(user.Role)
                                    </span>
                                </td>
                                <td>
                                    <span class="status-badge @(GetUserIsActive(user) ? "returned-badge" : "checked-out-badge")">
                                        @(GetUserIsActive(user) ? "פעיל" : "לא פעיל")
                                    </span>
                                </td>
                                <td>
                                    @if (CanManageUser(user))
                                    {
                                        if (editingUserId == user.UserID)
                                        {
                                            <div class="inline-edit-container">
                                                <select class="form-control" @bind="selectedRole">
                                                    <option value="">בחר תפקיד</option>
                                                    <option value="User">משתמש</option>
                                                    <option value="WarehouseOperator">פקיד מחסן</option>
                                                    <option value="WarehouseManager">אחראי מחסן</option>
                                                    @if (currentUserIsAdmin)
                                                    {
                                                        <option value="Admin">מנהל מערכת</option>
                                                    }
                                                </select>
                                                <div class="edit-actions">
                                                    <button class="btn-action btn-sm" @onclick="() => SaveUserRole(user)"
                                                            disabled="@(string.IsNullOrEmpty(selectedRole) || isProcessing)">
                                                        @if (isProcessing)
                                                        {
                                                            <div class="inline-flex items-center">
                                                                <div class="spinner spinner-sm mr-2"></div>
                                                                <span>שומר...</span>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-check2"></i>
                                                            <span>שמור</span>
                                                        }
                                                    </button>
                                                    <button class="btn-action btn-sm secondary" @onclick="CancelEdit">
                                                        <i class="bi bi-x"></i>
                                                        <span>ביטול</span>
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="flex gap-2">
                                                <button class="btn-action btn-sm" @onclick="() => StartEditingUser(user)" title="שנה תפקיד">
                                                    <i class="bi bi-pencil-square"></i>
                                                </button>
                                                <button class="btn-action btn-sm @(GetUserIsActive(user) ? "delete" : "success")"
                                                        @onclick="() => ToggleUserStatus(user)"
                                                        title="@(GetUserIsActive(user) ? "השבת משתמש" : "הפעל משתמש")">
                                                    <i class="bi @(GetUserIsActive(user) ? "bi-person-dash" : "bi-person-check")"></i>
                                                </button>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted"><i class="bi bi-lock"></i> אין הרשאה</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="dashboard-cards">
                @foreach (var user in FilteredUsers)
                {
                    <div class="dashboard-card @GetCardClass(user)">
                        <div class="card-header">
                            <div>
                                <h3 class="card-title">@user.Username</h3>
                                <p class="card-subtitle">@user.Email</p>
                            </div>
                            <div class="card-icon">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>
                        <div class="card-content">
                            <div class="mb-3">
                                <strong>שם מלא:</strong> @($"{user.FirstName} {user.LastName}")
                            </div>

                            <div class="flex items-center justify-between mb-2">
                                <span>תפקיד:</span>
                                <span class="status-badge @GetRoleBadgeClass(user.Role)">
                                    @GetHebrewRoleName(user.Role)
                                </span>
                            </div>

                            <div class="flex items-center justify-between mb-2">
                                <span>סטטוס:</span>
                                <span class="status-badge @(GetUserIsActive(user) ? "returned-badge" : "checked-out-badge")">
                                    @(GetUserIsActive(user) ? "פעיל" : "לא פעיל")
                                </span>
                            </div>
                        </div>

                        @if (CanManageUser(user))
                        {
                            <div class="card-footer">
                                @if (editingUserId == user.UserID)
                                {
                                    <div class="w-full">
                                        <select class="form-control mb-2" @bind="selectedRole">
                                            <option value="">בחר תפקיד</option>
                                            <option value="User">משתמש</option>
                                            <option value="WarehouseOperator">פקיד מחסן</option>
                                            <option value="WarehouseManager">אחראי מחסן</option>
                                            @if (currentUserIsAdmin)
                                            {
                                                <option value="Admin">מנהל מערכת</option>
                                            }
                                        </select>
                                        <div class="flex justify-center gap-2 w-full">
                                            <button class="btn-action btn-sm" @onclick="() => SaveUserRole(user)"
                                                    disabled="@(string.IsNullOrEmpty(selectedRole) || isProcessing)">
                                                @if (isProcessing)
                                                {
                                                    <div class="spinner spinner-sm mr-2"></div>
                                                    <span>שומר...</span>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-check2"></i>
                                                    <span>שמור</span>
                                                }
                                            </button>
                                            <button class="btn-action btn-sm secondary" @onclick="CancelEdit">
                                                <i class="bi bi-x"></i>
                                                <span>ביטול</span>
                                            </button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="flex justify-center gap-2 w-full">
                                        <button class="btn-action btn-sm" @onclick="() => StartEditingUser(user)">
                                            <i class="bi bi-pencil-square"></i> שנה תפקיד
                                        </button>
                                        <button class="btn-action btn-sm @(GetUserIsActive(user) ? "delete" : "success")"
                                                @onclick="() => ToggleUserStatus(user)">
                                            <i class="bi @(GetUserIsActive(user) ? "bi-person-dash" : "bi-person-check")"></i>
                                            @(GetUserIsActive(user) ? "השבת" : "הפעל")
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="card-footer">
                                <span class="text-muted"><i class="bi bi-lock"></i> אין הרשאה לשינויים</span>
                            </div>
                        }
                    </div>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="@(isError ? "alert-danger" : "alert-success") mt-4">
                <p>@message</p>
            </div>
        }
    }
</div>

@code {
    private enum ViewMode { List, Cards }

    [Parameter]
    public List<UserDto> users { get; set; } = new();

    private bool isLoading = true;
    private int? editingUserId;
    private string selectedRole = "";
    private bool isProcessing = false;
    private string message = "";
    private bool isError = false;
    private bool currentUserIsAdmin = false;
    private string searchTerm = string.Empty;
    private string roleFilter = string.Empty;
    private string statusFilter = string.Empty;
    private ViewMode viewMode = ViewMode.List;

    // Dictionary to store user states since UserDto doesn't have IsActive property
    private Dictionary<int, bool> userActiveStates = new Dictionary<int, bool>();

    // Helper to get active state for a user
    private bool GetUserIsActive(UserDto user)
    {
        if (userActiveStates.TryGetValue(user.UserID, out bool isActive))
        {
            return isActive;
        }
        // Default to active if not set
        return true;
    }

    // Filtered users based on search term
    private List<UserDto> FilteredUsers => users
        .Where(u =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             $"{u.FirstName} {u.LastName}".Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrWhiteSpace(roleFilter) ||
             u.Role.Equals(roleFilter, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrWhiteSpace(statusFilter) ||
             (statusFilter == "true" && GetUserIsActive(u)) ||
             (statusFilter == "false" && !GetUserIsActive(u)))
        )
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing UserRoleManager component...");

        try
        {
            isLoading = true;
            StateHasChanged();

            currentUserIsAdmin = await AuthService.IsUserInRoleAsync("Admin");
            Logger.LogInformation($"Current user is admin: {currentUserIsAdmin}");

            // If users list is empty, load it
            if (users.Count == 0)
            {
                await LoadUsers();
            }
        }
        catch (Exception ex)
        {
            message = $"שגיאה בטעינת נתונים: {ex.Message}";
            isError = true;
            Logger.LogError(ex, "Error initializing UserRoleManager component");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            StateHasChanged();

            Logger.LogInformation("Loading users list...");

            // Since GetAllUsersAsync doesn't exist, we'll simulate it using GetUserByUsernameAsync
            // This is just a placeholder. You should implement GetAllUsersAsync in IUserService
            var usersList = new List<UserDto>();

            // Simulated data for demonstration
            usersList.Add(new UserDto
            {
                UserID = 1,
                Username = "admin",
                Email = "admin@example.com",
                FirstName = "Admin",
                LastName = "User",
                Role = "Admin"
            });

            usersList.Add(new UserDto
            {
                UserID = 2,
                Username = "warehousemgr",
                Email = "warehouse@example.com",
                FirstName = "Warehouse",
                LastName = "Manager",
                Role = "WarehouseManager"
            });

            users = usersList;

            // Initialize active states
            foreach (var user in users)
            {
                if (!userActiveStates.ContainsKey(user.UserID))
                {
                    userActiveStates[user.UserID] = true; // Default to active
                }
            }

            Logger.LogInformation($"Loaded {users.Count} users successfully.");
        }
        catch (Exception ex)
        {
            message = $"שגיאה בטעינת רשימת משתמשים: {ex.Message}";
            isError = true;
            Logger.LogError(ex, "Error loading users list");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshUsers()
    {
        searchTerm = string.Empty;
        roleFilter = string.Empty;
        statusFilter = string.Empty;
        await LoadUsers();
    }

    private bool CanManageUser(UserDto user)
    {
        // Admin can manage all users except other admins (unless they are the same admin)
        if (currentUserIsAdmin)
            return true;

        // Non-admins cannot manage admins or warehouse managers
        if (user.Role == "Admin" || user.Role == "WarehouseManager")
            return false;

        // Otherwise they can manage regular users and warehouse operators
        return true;
    }

    private void StartEditingUser(UserDto user)
    {
        if (!CanManageUser(user))
        {
            message = "אין לך הרשאה לשנות הרשאות משתמש זה";
            isError = true;
            return;
        }

        editingUserId = user.UserID;
        selectedRole = user.Role;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        editingUserId = null;
        selectedRole = "";
        StateHasChanged();
    }

    private async Task SaveUserRole(UserDto user)
    {
        if (string.IsNullOrEmpty(selectedRole) || editingUserId == null)
            return;

        isProcessing = true;
        message = "";
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Updating role for user {user.Username} (ID: {user.UserID}) to {selectedRole}...");

            // If trying to modify an Admin without being an Admin
            if (user.Role == "Admin" && !currentUserIsAdmin)
            {
                message = "אין לך הרשאה לשנות הרשאות של מנהל מערכת";
                isError = true;
                Logger.LogWarning("Unauthorized attempt to modify an Admin role.");
                return;
            }

            // Update user role - this needs to be modified since UpdateUserRoleAsync doesn't return a bool
            await UserService.UpdateUserRoleAsync(user.UserID, selectedRole);

            // Since we can't tell if it succeeded, we'll assume it did
            bool success = true;

            if (success)
            {
                Logger.LogInformation($"Role for user {user.Username} (ID: {user.UserID}) updated to {selectedRole} successfully.");

                // Update the local list
                user.Role = selectedRole;
                Logger.LogInformation($"Local user list updated for user ID {user.UserID}.");

                message = $"הרשאות המשתמש {user.Username} עודכנו בהצלחה ל: {GetHebrewRoleName(selectedRole)}";
                isError = false;

                // Reset selection
                editingUserId = null;
                selectedRole = "";
            }
            else
            {
                message = "שגיאה בעדכון ההרשאות. נסה שנית.";
                isError = true;
                Logger.LogWarning($"Failed to update role for user ID {user.UserID}.");
            }
        }
        catch (Exception ex)
        {
            message = $"שגיאה בעדכון הרשאות: {ex.Message}";
            isError = true;
            Logger.LogError(ex, $"Error updating role for user ID {user.UserID}.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ToggleUserStatus(UserDto user)
    {
        if (!CanManageUser(user))
        {
            message = "אין לך הרשאה לשנות סטטוס משתמש זה";
            isError = true;
            return;
        }

        isProcessing = true;
        message = "";
        StateHasChanged();

        try
        {
            bool currentIsActive = GetUserIsActive(user);
            Logger.LogInformation($"Toggling status for user {user.Username} (ID: {user.UserID}) from {(currentIsActive ? "active" : "inactive")} to {(!currentIsActive ? "active" : "inactive")}...");

            // Update user status (toggle it)
            bool newStatus = !currentIsActive;

            // Since UpdateUserStatusAsync doesn't exist, we'll just update our local state
            // In a real app, you would call the API
            // bool success = await UserService.UpdateUserStatusAsync(user.UserID, newStatus);
            bool success = true;

            if (success)
            {
                Logger.LogInformation($"Status for user {user.Username} (ID: {user.UserID}) updated to {(newStatus ? "active" : "inactive")} successfully.");

                // Update the local state
                userActiveStates[user.UserID] = newStatus;
                Logger.LogInformation($"Local user status updated for user ID {user.UserID}.");

                message = $"סטטוס המשתמש {user.Username} עודכן בהצלחה ל: {(newStatus ? "פעיל" : "לא פעיל")}";
                isError = false;
            }
            else
            {
                message = "שגיאה בעדכון סטטוס המשתמש. נסה שנית.";
                isError = true;
                Logger.LogWarning($"Failed to update status for user ID {user.UserID}.");
            }
        }
        catch (Exception ex)
        {
            message = $"שגיאה בעדכון סטטוס: {ex.Message}";
            isError = true;
            Logger.LogError(ex, $"Error updating status for user ID {user.UserID}.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private string GetHebrewRoleName(string role)
    {
        return role switch
        {
            "User" => "משתמש",
            "WarehouseOperator" => "פקיד מחסן",
            "WarehouseManager" => "אחראי מחסן",
            "Admin" => "מנהל מערכת",
            _ => role
        };
    }

    private string GetRoleBadgeClass(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "checked-out-badge",        // Red for admin
            "warehousemanager" => "warning-badge", // Orange/yellow for warehouse manager
            "warehouseoperator" => "info-badge",   // Blue for warehouse operator
            "user" => "returned-badge",            // Green for regular user
            _ => "default-badge"
        };
    }

    private string GetCardClass(UserDto user)
    {
        if (!GetUserIsActive(user))
            return "";

        return user.Role.ToLower() switch
        {
            "admin" => "danger",
            "warehousemanager" => "warning",
            "warehouseoperator" => "info",
            "user" => "success",
            _ => ""
        };
    }
}
