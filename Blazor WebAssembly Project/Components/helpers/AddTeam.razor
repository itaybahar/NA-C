@using Blazor_WebAssembly.Models.Team
@using Blazor_WebAssembly.Services.Interfaces
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers

@inject ITeamService TeamService
@inject ILogger<AddTeam> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<link href="css/helpers.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">ניהול קבוצות ומפעלים</h2>

<div class="tabs mb-4">
    <button class="tab @(ActiveTab == "add" ? "active" : "")" @onclick='() => OnTabChanged("add")'>
        הוספת קבוצה חדשה
    </button>
    <button class="tab @(ActiveTab == "LoadTeams" ? "active" : "")" @onclick='() => OnTabChanged("LoadTeams")'>
        רשימת קבוצות
    </button>
    <div class="tab-indicator" style="right: @TabIndicatorPosition; width: @TabIndicatorWidth"></div>
</div>

@if (ActiveTab == "add")
{
    <div class="content-container">
        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <div class="@(IsError ? "alert-danger" : "alert-success") mb-4" aria-live="polite">
                @Message
            </div>
        }

        <div class="form-group">
            <label class="input-label" for="teamName">שם</label>
            <input id="teamName" class="form-control" placeholder="שם הקבוצה או המפעל" @bind="NewTeam.TeamName" />
        </div>

        <div class="form-group">
            <label class="input-label" for="teamType">סוג</label>
            <select id="teamType" class="form-control" @bind="TeamType">
                <option value="" disabled selected>בחר סוג</option>
                <option value="Team">קבוצה</option>
                <option value="מפעל">מפעל</option>
            </select>
        </div>

        <button class="btn-submit" @onclick="AddEntity" disabled="@IsSubmitting">
            @if (IsSubmitting)
            {
                <div class="inline-flex items-center">
                    <div class="spinner spinner-sm mr-2"></div>
                    <span>מוסיף...</span>
                </div>
            }
            else
            {
                <span>הוסף למערכת</span>
            }
        </button>
    </div>
}
else if (ActiveTab == "LoadTeams")
{
    <div class="content-container">
        @if (IsLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>טוען רשימת קבוצות...</p>
            </div>
        }
        else if (Teams.Count == 0)
        {
            <div class="empty-state">
                <i class="fas fa-users"></i>
                <p class="no-history">אין קבוצות ומפעלים במערכת</p>
                <div class="empty-buttons">
                    <button class="btn-action" @onclick="LoadTeams">נסה שנית</button>
                </div>
            </div>
        }
        else
        {
            <div class="info-bar">
                <span class="records-count">@Teams.Count קבוצות במערכת</span>
                <button class="btn-refresh" title="רענן רשימה" @onclick="LoadTeams">
                    <i class="bi bi-arrow-clockwise"></i>
                </button>
            </div>

            <div class="table-responsive">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>מזהה</th>
                            <th>שם</th>
                            <th>סוג</th>
                            <th>סטטוס</th>
                            <th>פעולות</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var team in Teams)
                        {
                            <tr class="@(team.IsActive ? "" : "inactive")">
                                <td>@team.TeamID</td>
                                <td>@team.TeamName</td>
                                <td>@(string.IsNullOrEmpty(team.Description) ? "-" : team.Description)</td>
                                <td>
                                    <span class="status-badge @(team.IsActive ? "returned-badge" : "checked-out-badge")">
                                        @(team.IsActive ? "פעיל" : "לא פעיל")
                                    </span>
                                </td>
                                <td class="text-center">
                                    <button class="btn-icon edit" title="ערוך" @onclick="() => EditTeam(team)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn-icon @(team.IsActive ? "delete" : "")" title="@(team.IsActive ? "השבת" : "הפעל")" @onclick="() => ToggleTeamStatus(team)">
                                        <i class="bi @(team.IsActive ? "bi-toggle-on" : "bi-toggle-off")"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <div class="@(IsError ? "alert-danger" : "alert-success") mt-4" aria-live="polite">
                @Message
            </div>
        }
    </div>
}

@if (showEditModal && editingTeam != null)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>עריכת קבוצה</h3>
            <button class="modal-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="input-label" for="edit-name">שם</label>
                <input id="edit-name" class="form-control" @bind="editingTeam.TeamName" />
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-type">סוג</label>
                <select id="edit-type" class="form-control" @bind="editingTeam.Description">
                    <option value="Team">קבוצה</option>
                    <option value="מפעל">מפעל</option>
                </select>
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-status">סטטוס</label>
                <select id="edit-status" class="form-control" @bind="editingTeam.IsActive">
                    <option value="true">פעיל</option>
                    <option value="false">לא פעיל</option>
                </select>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action" @onclick="SaveTeam">
                <i class="bi bi-check2-circle"></i> שמור שינויים
            </button>
        </div>
    </div>
}

@code {
    // Tab indicator properties
    private string TabIndicatorPosition => ActiveTab switch
    {
        "add" => "0%",
        "LoadTeams" => "50%",
        _ => "0%"
    };

    private string TabIndicatorWidth => "50%";

    private TeamModel NewTeam = new()
    {
        TeamName = string.Empty,
        IsActive = true
    };

    private string TeamType = string.Empty;
    private string? Message;
    private bool IsError = false;
    private bool IsSubmitting = false;
    private bool IsLoading = false;
    private string ActiveTab = "add";
    private List<TeamModel> Teams = new();

    // Modal properties
    private bool showEditModal = false;
    private TeamModel? editingTeam;

    private async Task AddEntity()
    {
        IsSubmitting = true;
        Message = string.Empty;
        IsError = false;
        StateHasChanged();

        try
        {
            if (string.IsNullOrWhiteSpace(NewTeam.TeamName))
            {
                Message = "יש להזין שם";
                IsError = true;
                return;
            }

            if (string.IsNullOrWhiteSpace(TeamType))
            {
                Message = "יש לבחור סוג";
                IsError = true;
                return;
            }

            NewTeam.Description = TeamType;

            var result = await TeamService.AddTeam(NewTeam);

            if (result)
            {
                Message = "צוות נוסף בהצלחה!";
                IsError = false;

                NewTeam = new()
                {
                    TeamName = string.Empty,
                    IsActive = true
                };
                TeamType = string.Empty;

                // If we're on the list tab, refresh the list
                if (ActiveTab == "LoadTeams")
                {
                    await LoadTeams();
                }
            }
            else
            {
                Message = "שגיאה בהוספת צוות";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, "Error adding team");
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task LoadTeams()
    {
        IsLoading = true;
        Message = null;
        IsError = false;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams...");
            Teams = await TeamService.GetAllTeamsAsync() ?? new List<TeamModel>();
            Logger.LogInformation($"Loaded {Teams.Count} teams.");
        }
        catch (Exception ex)
        {
            Message = $"שגיאה בטעינת הקבוצות: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, "Error loading teams.");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Ensure the UI is updated
        }
    }

    private async Task OnTabChanged(string tab)
    {
        if (ActiveTab == tab) return; // Prevent redundant calls if the tab is already active

        ActiveTab = tab;

        // Add a slight delay for the animation to complete before loading data
        await Task.Delay(50);

        if (tab == "LoadTeams")
        {
            await LoadTeams(); // Always refresh the teams list when switching to that tab
        }
    }

    private void EditTeam(TeamModel team)
    {
        // Create a copy of the team for editing
        editingTeam = new TeamModel
        {
            TeamID = team.TeamID,
            TeamName = team.TeamName,
            Description = team.Description,
            IsActive = team.IsActive
        };

        showEditModal = true;
        StateHasChanged();
    }

    private async Task SaveTeam()
    {
        if (editingTeam == null) return;

        try
        {
            var result = await TeamService.UpdateTeamAsync(editingTeam);

            if (result)
            {
                Message = $"הקבוצה {editingTeam.TeamName} עודכנה בהצלחה";
                IsError = false;
                CloseModal();
                await LoadTeams(); // Refresh the list
            }
            else
            {
                Message = "שגיאה בעדכון הקבוצה";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, "Error updating team");
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
        editingTeam = null;
        StateHasChanged();
    }

    private async Task ToggleTeamStatus(TeamModel team)
    {
        try
        {
            team.IsActive = !team.IsActive;
            var result = await TeamService.UpdateTeamAsync(team);

            if (result)
            {
                Message = $"סטטוס הצוות {team.TeamName} עודכן ל{(team.IsActive ? "פעיל" : "לא פעיל")}";
                IsError = false;
                await LoadTeams();
            }
            else
            {
                Message = "שגיאה בעדכון סטטוס הצוות";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, "Error toggling team status");
        }
        finally
        {
            StateHasChanged();
        }
    }
}
