@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="theme-toggle" data-theme="@_currentTheme">
    <button type="button"
            class="theme-toggle-option @(_currentTheme == "light" ? "active" : "")"
            @onclick="SetLightTheme"
            data-theme-toggle="light">
        <span class="icon-light-mode @(_currentTheme == "light" ? "icon-large" : "icon-small")">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
            </svg>
        </span>
    </button>
    <button type="button"
            class="theme-toggle-option @(_currentTheme == "dark" ? "active" : "")"
            @onclick="SetDarkTheme"
            data-theme-toggle="dark">
        <span class="icon-dark-mode @(_currentTheme == "dark" ? "icon-large" : "icon-small")">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z" />
            </svg>
        </span>
    </button>
</div>

@code {
    private string _currentTheme = "light";
    private IJSObjectReference? _themeModule;
    private IJSObjectReference? _themeToggleModule;
    private DotNetObjectReference<ThemeToggle>? _objectReference;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _objectReference = DotNetObjectReference.Create(this);

            // Load theme.js and themeToggle.js modules
            _themeModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/theme.js");
            _themeToggleModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/themeToggle.js");

            // Get current theme from themeManager
            _currentTheme = await JSRuntime.InvokeAsync<string>("themeManager.getCurrentTheme");

            // Apply the current theme on initialization
            await JSRuntime.InvokeVoidAsync("themeManager.setTheme", _currentTheme);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing theme toggle: {ex.Message}");

            // Default to light theme as fallback
            _currentTheme = "light";
        }
    }

    private Task SetLightTheme() => SetThemeAsync("light");
    private Task SetDarkTheme() => SetThemeAsync("dark");

    private async Task SetThemeAsync(string theme)
    {
        try
        {
            _currentTheme = theme;

            // Use theme.js for theme management
            await JSRuntime.InvokeVoidAsync("themeManager.setTheme", theme);

            // Also sync with themeToggle.js
            bool isDark = theme == "dark";
            await JSRuntime.InvokeVoidAsync("themeToggle.setThemePreference", isDark);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error setting theme: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_themeModule is not null)
            {
                await _themeModule.DisposeAsync();
            }

            if (_themeToggleModule is not null)
            {
                await _themeToggleModule.DisposeAsync();
            }

            _objectReference?.Dispose();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error disposing theme module: {ex.Message}");
        }
    }
}
