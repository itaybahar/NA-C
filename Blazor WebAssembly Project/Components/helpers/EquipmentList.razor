@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly.Models.Equipment
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IEquipmentService EquipmentService
@inject ILogger<EquipmentList> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<link href="css/dashboard.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">רשימת ציוד</h2>

<div class="dashboard-section">
    <div class="widget-header">
        <h3 class="widget-title">ניהול ציוד</h3>
        <div class="widget-actions">
            <button class="btn-refresh" title="רענן נתונים" @onclick="RefreshData">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            @if (IsAdminOrWarehouseManager)
            {
                <button class="btn-action btn-sm" @onclick="() => NavigateToAddEquipment()">
                    <i class="bi bi-plus-circle"></i> הוסף ציוד חדש
                </button>
            }
        </div>
    </div>

    <div class="search-container">
        <div class="search-input-container">
            <input class="search-bar" placeholder="חפש לפי שם, מספר סידורי או מיקום..." @bind="searchTerm" @bind:event="oninput" />
            <i class="bi bi-search search-icon"></i>
        </div>

        <div class="search-filters mt-3">
            <div class="search-field">
                <select class="form-control" @bind="statusFilter">
                    <option value="">כל הסטטוסים</option>
                    <option value="Available">זמין</option>
                    <option value="InUse">בשימוש</option>
                    <option value="Maintenance">בתיקון</option>
                    <option value="Returned">מוחזר</option>
                </select>
            </div>
            <div class="search-field">
                <select class="form-control" @bind="locationFilter">
                    <option value="">כל המיקומים</option>
                    @foreach (var location in UniqueLocations)
                    {
                        <option value="@location">@location</option>
                    }
                </select>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>טוען נתונים...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert-danger mb-4">
            <p>שגיאה: @errorMessage</p>
            <button class="btn-action mt-2" @onclick="RefreshData">נסה שנית</button>
        </div>
    }
    else if (FilteredEquipment.Count == 0)
    {
        <div class="empty-state">
            <i class="bi bi-box-seam empty-icon"></i>
            <p class="no-history">אין ציוד להצגה</p>
            <div class="empty-buttons">
                <button class="btn-action" @onclick="RefreshData">טען נתונים</button>
                @if (IsAdminOrWarehouseManager)
                {
                    <button class="btn-action secondary" @onclick="AddDemoData">הוסף נתוני הדגמה</button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="info-bar">
            <span class="records-count">@FilteredEquipment.Count פריטים מתוך @equipmentList.Count</span>
            <div class="flex gap-2">
                <button class="btn-icon" title="תצוגת רשימה" @onclick="() => viewMode = ViewMode.List">
                    <i class="bi bi-list-ul"></i>
                </button>
                <button class="btn-icon" title="תצוגת קלפים" @onclick="() => viewMode = ViewMode.Cards">
                    <i class="bi bi-grid-3x3-gap"></i>
                </button>
            </div>
        </div>

        @if (viewMode == ViewMode.List)
        {
            <div class="table-responsive">
                <table class="history-table">
                    <thead>
                        <tr>
                            <th>מזהה</th>
                            <th>שם</th>
                            <th>תיאור</th>
                            <th>מספר סידורי</th>
                            <th>סטטוס</th>
                            <th>כמות</th>
                            <th>ערך (ש״ח)</th>
                            <th>מיקום אחסון</th>
                            @if (IsAdminOrWarehouseManager)
                            {
                                <th>פעולות</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var equipment in FilteredEquipment)
                        {
                            <tr>
                                <td>@equipment.EquipmentID</td>
                                <td>@equipment.Name</td>
                                <td>@(string.IsNullOrEmpty(equipment.Description) ? "-" : equipment.Description)</td>
                                <td>@(string.IsNullOrEmpty(equipment.SerialNumber) ? "-" : equipment.SerialNumber)</td>
                                <td>
                                    <span class="status-badge @GetStatusBadgeClass(equipment.Status)">
                                        @GetStatusText(equipment.Status)
                                    </span>
                                </td>
                                <td>@equipment.Quantity</td>
                                <td>@(equipment.Value > 0 ? equipment.Value.ToString("N0") : "-")</td>
                                <td>@equipment.StorageLocation</td>
                                @if (IsAdminOrWarehouseManager)
                                {
                                    <td class="text-center">
                                        <button class="btn-icon edit" title="ערוך פריט" @onclick="() => EditEquipment(equipment)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="btn-icon delete" title="מחק פריט" @onclick="() => ConfirmDelete(equipment)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="dashboard-cards">
                @foreach (var equipment in FilteredEquipment)
                {
                    <div class="dashboard-card @GetCardStatusClass(equipment.Status)">
                        <div class="card-header">
                            <div>
                                <h3 class="card-title">@equipment.Name</h3>
                                <p class="card-subtitle">@(string.IsNullOrEmpty(equipment.SerialNumber) ? "ללא מספר סידורי" : equipment.SerialNumber)</p>
                            </div>
                            <div class="card-icon">
                                <i class="bi bi-box-seam"></i>
                            </div>
                        </div>
                        <div class="card-content">
                            <p class="mb-3">@(string.IsNullOrEmpty(equipment.Description) ? "אין תיאור זמין" : equipment.Description)</p>

                            <div class="flex items-center justify-between mb-2">
                                <span class="text-muted">סטטוס:</span>
                                <span class="status-badge @GetStatusBadgeClass(equipment.Status)">
                                    @GetStatusText(equipment.Status)
                                </span>
                            </div>

                            <div class="flex items-center justify-between mb-2">
                                <span class="text-muted">כמות:</span>
                                <span>@equipment.Quantity</span>
                            </div>

                            <div class="flex items-center justify-between mb-2">
                                <span class="text-muted">ערך:</span>
                                <span>@(equipment.Value > 0 ? equipment.Value.ToString("N0") + " ₪" : "-")</span>
                            </div>

                            <div class="flex items-center justify-between mb-2">
                                <span class="text-muted">מיקום:</span>
                                <span>@equipment.StorageLocation</span>
                            </div>
                        </div>

                        @if (IsAdminOrWarehouseManager)
                        {
                            <div class="card-footer">
                                <div class="flex justify-center gap-2 w-full">
                                    <button class="btn-action secondary btn-sm" @onclick="() => EditEquipment(equipment)">
                                        <i class="bi bi-pencil-square"></i> ערוך
                                    </button>
                                    <button class="btn-action delete btn-sm" @onclick="() => ConfirmDelete(equipment)">
                                        <i class="bi bi-trash"></i> מחק
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
</div>

@if (showEditModal && editingEquipment != null)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>ערוך פריט ציוד</h3>
            <button class="modal-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="input-label" for="edit-name">שם פריט</label>
                <input id="edit-name" class="form-control" @bind="editingEquipment.Name" />
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-description">תיאור</label>
                <textarea id="edit-description" class="form-control" @bind="editingEquipment.Description" rows="3"></textarea>
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-serial">מספר סידורי</label>
                <input id="edit-serial" class="form-control" @bind="editingEquipment.SerialNumber" />
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-status">סטטוס</label>
                <select id="edit-status" class="form-control" @bind="editingEquipment.Status">
                    <option value="Available">זמין</option>
                    <option value="InUse">בשימוש</option>
                    <option value="Maintenance">בתיקון</option>
                    <option value="Returned">מוחזר</option>
                </select>
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-quantity">כמות</label>
                <input id="edit-quantity" type="number" class="form-control" @bind="editingEquipment.Quantity" min="0" />
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-value">ערך (ש״ח)</label>
                <input id="edit-value" type="number" class="form-control" @bind="editingEquipment.Value" min="0" step="0.01" />
            </div>
            <div class="form-group">
                <label class="input-label" for="edit-location">מיקום אחסון</label>
                <input id="edit-location" class="form-control" @bind="editingEquipment.StorageLocation" />
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action" @onclick="SaveEquipment">
                <i class="bi bi-check2-circle"></i> שמור שינויים
            </button>
        </div>
    </div>
}

@if (showDeleteModal && equipmentToDelete != null)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container delete-modal" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>מחיקת פריט</h3>
            <button class="modal-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="text-center mb-4">
                <i class="bi bi-exclamation-triangle-fill delete-warning-icon"></i>
            </div>
            <p class="confirm-message">האם אתה בטוח שברצונך למחוק את הפריט "@equipmentToDelete.Name"?</p>
            <p class="warning-message">פעולה זו היא בלתי הפיכה!</p>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action delete" @onclick="() => RemoveEquipment(equipmentToDelete)">
                <i class="bi bi-trash"></i> מחק פריט
            </button>
        </div>
    </div>
}

@code {
    private enum ViewMode { List, Cards }

    private List<EquipmentModel> equipmentList = new List<EquipmentModel>();
    private string? errorMessage;
    private bool isLoading = false;
    private string searchTerm = string.Empty;
    private string statusFilter = string.Empty;
    private string locationFilter = string.Empty;
    private ViewMode viewMode = ViewMode.List;
    private bool isAdminOrWarehouseManager = false;

    // Modal-related properties
    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private EquipmentModel? editingEquipment;
    private EquipmentModel? equipmentToDelete;

    // Property to check if the current user has admin or warehouse manager permissions
    private bool IsAdminOrWarehouseManager => isAdminOrWarehouseManager;

    // Unique locations for filtering
    private List<string> UniqueLocations => equipmentList
        .Select(e => e.StorageLocation)
        .Where(l => !string.IsNullOrEmpty(l))
        .Distinct()
        .OrderBy(l => l)
        .ToList();

    // Filtered list based on search term and filters
    private List<EquipmentModel> FilteredEquipment => equipmentList
        .Where(e =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             (e.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (e.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (e.SerialNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (e.StorageLocation?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            &&
            (string.IsNullOrWhiteSpace(statusFilter) ||
             e.Status?.Equals(statusFilter, StringComparison.OrdinalIgnoreCase) == true)
            &&
            (string.IsNullOrWhiteSpace(locationFilter) ||
             e.StorageLocation?.Equals(locationFilter, StringComparison.OrdinalIgnoreCase) == true)
        )
        .OrderBy(e => e.Name)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentList component...");
        await CheckUserRole();
        await LoadEquipment();
    }

    private async Task CheckUserRole()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Check if the user has admin or warehouse manager role directly from claims
            isAdminOrWarehouseManager = user.Identity?.IsAuthenticated == true &&
                (user.HasClaim(c => c.Type == ClaimTypes.Role &&
                                   (c.Value == "Admin" || c.Value == "WarehouseManager")));

            // Debug: Log all user claims
            var claims = user.Claims.Select(c => $"{c.Type}: {c.Value}").ToList();
            Logger.LogInformation("User Claims: {Claims}", string.Join(", ", claims));

            // If not found in claims, try using JS interop to parse token directly
            if (!isAdminOrWarehouseManager)
            {
                try
                {
                    string roleFromJS = await JSRuntime.InvokeAsync<string>("getUserRole");
                    Logger.LogInformation("Role from JS: {Role}", roleFromJS);

                    if (!string.IsNullOrEmpty(roleFromJS))
                    {
                        // Check if the role string contains Admin or WarehouseManager
                        if (roleFromJS.Contains("Admin") || roleFromJS.Contains("WarehouseManager"))
                        {
                            isAdminOrWarehouseManager = true;
                            Logger.LogInformation("Admin/WarehouseManager role found via JS interop");
                        }
                    }
                }
                catch (Exception jsEx)
                {
                    Logger.LogError(jsEx, "Error checking role via JS interop");
                }
            }

            Logger.LogInformation($"Final admin/warehouse manager privileges: {isAdminOrWarehouseManager}");

            // For debugging in development only
#if DEBUG
            // For testing with admin role (uncomment when needed)
            // isAdminOrWarehouseManager = true;
            // Logger.LogWarning("DEBUG: User role forcibly set to admin");
#endif
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking user roles");
            isAdminOrWarehouseManager = false;
        }
    }

    private async Task LoadEquipment()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            Logger.LogInformation("Loading equipment data...");
            var result = await EquipmentService.GetAllEquipmentAsync();

            // Better logging about the result
            if (result == null)
            {
                Logger.LogWarning("Equipment service returned null");
                equipmentList = new List<EquipmentModel>();
            }
            else if (!result.Any())
            {
                Logger.LogWarning("Equipment service returned an empty list");
                equipmentList = new List<EquipmentModel>();
            }
            else
            {
                equipmentList = result;
                Logger.LogInformation($"Successfully loaded {equipmentList.Count} equipment items");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת הנתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading equipment data.");
            equipmentList = new List<EquipmentModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        Logger.LogInformation("Refreshing equipment data...");
        searchTerm = string.Empty;
        statusFilter = string.Empty;
        locationFilter = string.Empty;
        await LoadEquipment();
    }

    private void NavigateToAddEquipment()
    {
        // This would typically use an admin dashboard tab for adding equipment
        try
        {
            JSRuntime.InvokeVoidAsync("showAddEquipmentTab");
        }
        catch
        {
            // If there's no JS function defined, log to console
            JSRuntime.InvokeVoidAsync("console.log", "Add Equipment tab navigation attempted");
        }
    }

    private string GetStatusText(string status)
    {
        return status?.ToLower() switch
        {
            "available" => "זמין",
            "inuse" => "בשימוש",
            "maintenance" => "בתיקון",
            "returned" => "מוחזר",
            _ => status
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "available" => "returned-badge",
            "returned" => "returned-badge",
            "inuse" => "checked-out-badge",
            "maintenance" => "warning-badge",
            _ => "default-badge"
        };
    }

    private string GetCardStatusClass(string status)
    {
        return status?.ToLower() switch
        {
            "available" => "success",
            "returned" => "success",
            "inuse" => "danger",
            "maintenance" => "warning",
            _ => ""
        };
    }

    private void AddDemoData()
    {
        // Only allow admin or warehouse managers to add demo data
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה להוסיף נתוני הדגמה";
            Logger.LogWarning("Unauthorized attempt to add demo data");
            return;
        }

        Logger.LogInformation("Adding demo equipment data...");
        equipmentList = new List<EquipmentModel>
        {
            new EquipmentModel
            {
                EquipmentID = 1,
                Name = "מקדחה חשמלית",
                Description = "מקדחה חזקה במיוחד לקידוחים גדולים",
                Status = "Available",
                Quantity = 5,
                StorageLocation = "מחסן ראשי",
                SerialNumber = "MK-2023-001",
                Value = 350
            },
            new EquipmentModel
            {
                EquipmentID = 2,
                Name = "פטיש 3 קילו",
                Description = "פטיש כבד לעבודות בנייה",
                Status = "InUse",
                Quantity = 2,
                StorageLocation = "חדר כלים",
                SerialNumber = "PT-2022-105",
                Value = 120
            },
            new EquipmentModel
            {
                EquipmentID = 3,
                Name = "ערכת כלי גינה",
                Description = "ערכה מושלמת לגינה הכוללת מעדר, מגרפה, ומזמרה",
                Status = "Available",
                Quantity = 3,
                StorageLocation = "מחסן גינה",
                SerialNumber = "GD-2023-012",
                Value = 200
            },
            new EquipmentModel
            {
                EquipmentID = 4,
                Name = "מסור חשמלי",
                Description = "מסור חשמלי מקצועי לחיתוך עץ",
                Status = "Maintenance",
                Quantity = 1,
                StorageLocation = "חדר תיקונים",
                SerialNumber = "MS-2021-045",
                Value = 480
            }
        };

        errorMessage = null;
        Logger.LogInformation("Demo equipment data added successfully.");
        StateHasChanged();
    }

    private void EditEquipment(EquipmentModel equipment)
    {
        // Check permissions before allowing edit
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה לערוך פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to edit equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        Logger.LogInformation($"Editing equipment: {equipment.Name} (ID: {equipment.EquipmentID})");

        // Create a deep copy of the equipment to edit
        editingEquipment = new EquipmentModel
        {
            EquipmentID = equipment.EquipmentID,
            Name = equipment.Name,
            Description = equipment.Description,
            SerialNumber = equipment.SerialNumber,
            Status = equipment.Status,
            Quantity = equipment.Quantity,
            StorageLocation = equipment.StorageLocation,
            Value = equipment.Value,
            CheckoutRecords = equipment.CheckoutRecords
        };

        // Show the edit modal
        showEditModal = true;
        StateHasChanged();
    }

    private async Task SaveEquipment()
    {
        if (editingEquipment == null)
        {
            return;
        }

        try
        {
            isLoading = true;
            showEditModal = false;
            StateHasChanged();

            Logger.LogInformation($"Saving equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");

            // Call the API to update the equipment
            bool success = await EquipmentService.UpdateEquipmentAsync(editingEquipment);

            if (success)
            {
                // Update the local list with the edited equipment
                var index = equipmentList.FindIndex(e => e.EquipmentID == editingEquipment.EquipmentID);
                if (index >= 0)
                {
                    equipmentList[index] = editingEquipment;
                }

                Logger.LogInformation($"Equipment updated successfully: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
            }
            else
            {
                errorMessage = "שגיאה בעדכון הציוד";
                Logger.LogError($"Failed to update equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בעדכון הציוד: {ex.Message}";
            Logger.LogError(ex, $"Error updating equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
        }
        finally
        {
            editingEquipment = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(EquipmentModel equipment)
    {
        // Check permissions before showing delete confirmation
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה למחוק פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        equipmentToDelete = equipment;
        showDeleteModal = true;
        StateHasChanged();
    }

    private async Task RemoveEquipment(EquipmentModel equipment)
    {
        // Check permissions before allowing delete
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה למחוק פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        try
        {
            isLoading = true;
            showDeleteModal = false;
            StateHasChanged();

            Logger.LogInformation($"Removing equipment: {equipment.Name} (ID: {equipment.EquipmentID})...");
            bool success = await EquipmentService.DeleteEquipmentAsync(equipment.EquipmentID);

            if (success)
            {
                // Remove from local list if deletion was successful
                equipmentList.Remove(equipment);
                Logger.LogInformation($"Equipment removed successfully: {equipment.Name} (ID: {equipment.EquipmentID})");
            }
            else
            {
                errorMessage = "שגיאה במחיקת הציוד";
                Logger.LogError($"Failed to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה במחיקת הציוד: {ex.Message}";
            Logger.LogError(ex, $"Error removing equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
        }
        finally
        {
            equipmentToDelete = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
        showDeleteModal = false;
        editingEquipment = null;
        equipmentToDelete = null;
        StateHasChanged();
    }
}
