@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly.Models.Equipment
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IEquipmentService EquipmentService
@inject ILogger<EquipmentList> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<h2 class="text-center text-xl font-bold mb-6 text-white">רשימת ציוד</h2>

<div class="search-container">
    <div class="form-group">
        <label class="input-label">חיפוש</label>
        <div class="search-input-container">
            <input class="form-control" placeholder="הקלד שם פריט או מיקום אחסון..." @bind="searchTerm" @bind:event="oninput" />
            <span class="search-icon">🔍</span>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p>טוען נתונים...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert-danger">
        <p>שגיאה: @errorMessage</p>
        <button class="btn-action" @onclick="RefreshData">נסה שנית</button>
    </div>
}
else if (FilteredEquipment.Count == 0)
{
    <div class="empty-state">
        <p>אין ציוד להצגה.</p>
        <div class="empty-buttons">
            <button class="btn-action" @onclick="RefreshData">טען נתונים</button>
            @if (IsAdminOrWarehouseManager)
            {
                <button class="btn-action secondary" @onclick="AddDemoData">הוסף נתוני הדגמה</button>
            }
        </div>
    </div>
}
else
{
    <div class="info-bar">
        <span>נמצאו @FilteredEquipment.Count פריטים</span>
        <button class="btn-refresh" title="רענן נתונים" @onclick="RefreshData"><i class="bi bi-arrow-clockwise"></i></button>
    </div>

    <div class="table-container">
        <table class="equipment-table">
            <thead>
                <tr>
                    <th>מזהה</th>
                    <th>שם</th>
                    <th>תיאור</th>
                    <th>מספר סידורי</th>
                    <th>סטטוס</th>
                    <th>כמות</th>
                    <th>ערך (ש״ח)</th>
                    <th>מיקום אחסון</th>
                    @if (IsAdminOrWarehouseManager)
                    {
                        <th>פעולות</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var equipment in FilteredEquipment)
                {
                    <tr>
                        <td>@equipment.EquipmentID</td>
                        <td>@equipment.Name</td>
                        <td>@(string.IsNullOrEmpty(equipment.Description) ? "-" : equipment.Description)</td>
                        <td>@(string.IsNullOrEmpty(equipment.SerialNumber) ? "-" : equipment.SerialNumber)</td>
                        <td>@equipment.Status</td>
                        <td>@equipment.Quantity</td>
                        <td>@(equipment.Value > 0 ? equipment.Value.ToString() : "-")</td>
                        <td>@equipment.StorageLocation</td>
                        @if (IsAdminOrWarehouseManager)
                        {
                            <td class="actions-cell">
                                <button class="btn-icon edit" title="ערוך פריט" @onclick="() => EditEquipment(equipment)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="btn-icon delete" title="מחק פריט" @onclick="() => ConfirmDelete(equipment)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showEditModal && editingEquipment != null)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>ערוך פריט ציוד</h3>
            <button class="modal-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="input-label">שם פריט</label>
                <input class="form-control" @bind="editingEquipment.Name" />
            </div>
            <div class="form-group">
                <label class="input-label">תיאור</label>
                <textarea class="form-control" @bind="editingEquipment.Description"></textarea>
            </div>
            <div class="form-group">
                <label class="input-label">מספר סידורי</label>
                <input class="form-control" @bind="editingEquipment.SerialNumber" />
            </div>
            <div class="form-group">
                <label class="input-label">סטטוס</label>
                <select class="form-control" @bind="editingEquipment.Status">
                    <option value="זמין">זמין</option>
                    <option value="בשימוש">בשימוש</option>
                    <option value="בתיקון">בתיקון</option>
                    <option value="מושבת">מושבת</option>
                </select>
            </div>
            <div class="form-group">
                <label class="input-label">כמות</label>
                <input type="number" class="form-control" @bind="editingEquipment.Quantity" min="0" />
            </div>
            <div class="form-group">
                <label class="input-label">ערך (ש״ח)</label>
                <input type="number" class="form-control" @bind="editingEquipment.Value" min="0" step="0.01" />
            </div>
            <div class="form-group">
                <label class="input-label">מיקום אחסון</label>
                <input class="form-control" @bind="editingEquipment.StorageLocation" />
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action" @onclick="SaveEquipment">
                <i class="bi bi-check2-circle me-1"></i> שמור שינויים
            </button>
        </div>
    </div>
}

@if (showDeleteModal && equipmentToDelete != null)
{
    <div class="modal-backdrop" @onclick="CloseModal"></div>
    <div class="modal-container delete-modal" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>מחיקת פריט</h3>
            <button class="modal-close" @onclick="CloseModal">×</button>
        </div>
        <div class="modal-body">
            <div class="text-center mb-4">
                <i class="bi bi-exclamation-triangle-fill text-danger delete-warning-icon"></i>
            </div>
            <p class="confirm-message">האם אתה בטוח שברצונך למחוק את הפריט "@equipmentToDelete.Name"?</p>
            <p class="warning-message">פעולה זו היא בלתי הפיכה!</p>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action delete" @onclick="() => RemoveEquipment(equipmentToDelete)">
                <i class="bi bi-trash me-1"></i> מחק פריט
            </button>
        </div>
    </div>
}

<style>
    /* Search section */
    .search-container {
        margin-bottom: 1.5rem;
    }

    .search-input-container {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: 10px;
        top: 8px;
        color: var(--grey);
    }

    /* Loading state */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--primary-red);
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 1rem;
    }

    keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 2rem;
        background-color: rgba(255,255,255,0.05);
        border-radius: 8px;
    }

    .empty-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1rem;
    }

    /* Info bar */
    .info-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
        color: var(--grey);
    }

    /* Table styling */
    .table-container {
        overflow-x: auto;
        margin-bottom: 1rem;
    }

    .equipment-table {
        width: 100%;
        border-collapse: collapse;
    }

        .equipment-table th {
            background-color: #333;
            padding: 12px;
            text-align: right;
            font-weight: bold;
            border-bottom: 2px solid var(--primary-red);
        }

        .equipment-table td {
            padding: 10px;
            border-bottom: 1px solid #555;
        }

        .equipment-table tbody tr:hover {
            background-color: rgba(255,255,255,0.05);
        }

    /* Actions cell styling */
    .actions-cell {
        white-space: nowrap;
        text-align: center;
    }

    /* Button styling */
    .btn-action {
        background-color: var(--primary-red);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 16px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s;
        margin-top: 0.5rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .btn-action:hover {
            background-color: #b71c1c;
        }

        .btn-action.secondary {
            background-color: #555;
        }

            .btn-action.secondary:hover {
                background-color: #444;
            }

        .btn-action.edit {
            background-color: #007bff;
        }

            .btn-action.edit:hover {
                background-color: #0056b3;
            }

        .btn-action.delete {
            background-color: #dc3545;
        }

            .btn-action.delete:hover {
                background-color: #a71d2a;
            }

    .btn-refresh {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        transition: transform 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .btn-refresh:hover {
            transform: rotate(180deg);
        }

    /* Icon buttons */
    .btn-icon {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 18px;
        padding: 6px 10px;
        border-radius: 4px;
        margin: 0 3px;
        transition: all 0.2s;
    }

        .btn-icon.edit {
            color: #007bff;
        }

            .btn-icon.edit:hover {
                background-color: rgba(0, 123, 255, 0.1);
            }

        .btn-icon.delete {
            color: #dc3545;
        }

            .btn-icon.delete:hover {
                background-color: rgba(220, 53, 69, 0.1);
            }

    /* Form elements - matching AddEquipmentForm */
    .form-group {
        margin-bottom: 1rem;
    }

    .input-label {
        display: block;
        font-weight: bold;
        margin-bottom: 4px;
        color: var(--grey);
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 10px 30px 10px 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: white;
        transition: all 0.3s;
    }

        .form-control:focus {
            outline: 2px solid var(--primary-red);
            background-color: #555;
        }

    /* Alert styling */
    .alert-danger {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
        padding: 16px;
        border-radius: 6px;
        border: 1px solid rgba(220, 53, 69, 0.3);
        text-align: center;
        margin-bottom: 1rem;
    }

    /* Modal styling */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 100;
    }

    .modal-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #333;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        z-index: 101;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .delete-modal {
        max-width: 400px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #444;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        color: #999;
        cursor: pointer;
    }

        .modal-close:hover {
            color: #fff;
        }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        padding: 15px 20px;
        border-top: 1px solid #444;
    }

    .confirm-message {
        font-size: 18px;
        margin-bottom: 10px;
        text-align: center;
    }

    .warning-message {
        color: #dc3545;
        font-weight: bold;
        text-align: center;
    }

    .delete-warning-icon {
        font-size: 4rem;
    }

    /* RTL fixes for Bootstrap icons */
    .me-1 {
        margin-left: 0.25rem !important;
        margin-right: 0 !important;
    }
</style>

@code {
    private List<EquipmentModel> equipmentList = new List<EquipmentModel>();
    private string? errorMessage;
    private bool isLoading = false;
    private string searchTerm = string.Empty;
    private bool isAdminOrWarehouseManager = false;

    // Modal-related properties
    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private EquipmentModel? editingEquipment;
    private EquipmentModel? equipmentToDelete;

    // Property to check if the current user has admin or warehouse manager permissions
    private bool IsAdminOrWarehouseManager => isAdminOrWarehouseManager;

    // Filtered list based on search term
    private List<EquipmentModel> FilteredEquipment => string.IsNullOrWhiteSpace(searchTerm)
        ? equipmentList
        : equipmentList.Where(e =>
            e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            e.StorageLocation.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentList component...");
        await CheckUserRole();
        await LoadEquipment();
    }

    private async Task CheckUserRole()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Check if the user has admin or warehouse manager role directly from claims
            isAdminOrWarehouseManager = user.Identity?.IsAuthenticated == true &&
                (user.HasClaim(c => c.Type == ClaimTypes.Role &&
                                   (c.Value == "Admin" || c.Value == "WarehouseManager")));

            // Debug: Log all user claims
            var claims = user.Claims.Select(c => $"{c.Type}: {c.Value}").ToList();
            Logger.LogInformation("User Claims: {Claims}", string.Join(", ", claims));

            // If not found in claims, try using JS interop to parse token directly
            if (!isAdminOrWarehouseManager)
            {
                try
                {
                    string roleFromJS = await JSRuntime.InvokeAsync<string>("getUserRole");
                    Logger.LogInformation("Role from JS: {Role}", roleFromJS);

                    if (!string.IsNullOrEmpty(roleFromJS))
                    {
                        // Check if the role string contains Admin or WarehouseManager
                        if (roleFromJS.Contains("Admin") || roleFromJS.Contains("WarehouseManager"))
                        {
                            isAdminOrWarehouseManager = true;
                            Logger.LogInformation("Admin/WarehouseManager role found via JS interop");
                        }
                    }
                }
                catch (Exception jsEx)
                {
                    Logger.LogError(jsEx, "Error checking role via JS interop");
                }
            }

            Logger.LogInformation($"Final admin/warehouse manager privileges: {isAdminOrWarehouseManager}");

            // For debugging in development only
#if DEBUG
            // For testing with admin role (uncomment when needed)
            // isAdminOrWarehouseManager = true;
            // Logger.LogWarning("DEBUG: User role forcibly set to admin");
#endif
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking user roles");
            isAdminOrWarehouseManager = false;
        }
    }
    private async Task LoadEquipment()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            Logger.LogInformation("Loading equipment data...");
            var result = await EquipmentService.GetAllEquipmentAsync();

            // Better logging about the result
            if (result == null)
            {
                Logger.LogWarning("Equipment service returned null");
                equipmentList = new List<EquipmentModel>();
            }
            else if (!result.Any())
            {
                Logger.LogWarning("Equipment service returned an empty list");
                equipmentList = new List<EquipmentModel>();
            }
            else
            {
                equipmentList = result;
                Logger.LogInformation($"Successfully loaded {equipmentList.Count} equipment items");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת הנתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading equipment data.");
            equipmentList = new List<EquipmentModel>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task RefreshData()
    {
        Logger.LogInformation("Refreshing equipment data...");
        await LoadEquipment();
    }

    private void AddDemoData()
    {
        // Only allow admin or warehouse managers to add demo data
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה להוסיף נתוני הדגמה";
            Logger.LogWarning("Unauthorized attempt to add demo data");
            return;
        }

        Logger.LogInformation("Adding demo equipment data...");
        equipmentList = new List<EquipmentModel>
        {
            new EquipmentModel
            {
                EquipmentID = 1,
                Name = "מקדחה חשמלית",
                Description = "מקדחה חזקה במיוחד לקידוחים גדולים",
                Status = "זמין",
                Quantity = 5,
                StorageLocation = "מחסן ראשי",
                SerialNumber = "MK-2023-001",
                Value = 350
            },
            new EquipmentModel
            {
                EquipmentID = 2,
                Name = "פטיש 3 קילו",
                Description = "פטיש כבד לעבודות בנייה",
                Status = "בשימוש",
                Quantity = 2,
                StorageLocation = "חדר כלים",
                SerialNumber = "PT-2022-105",
                Value = 120
            }
        };

        errorMessage = null;
        Logger.LogInformation("Demo equipment data added successfully.");
        StateHasChanged();
    }

    private void EditEquipment(EquipmentModel equipment)
    {
        // Check permissions before allowing edit
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה לערוך פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to edit equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        Logger.LogInformation($"Editing equipment: {equipment.Name} (ID: {equipment.EquipmentID})");

        // Create a deep copy of the equipment to edit
        editingEquipment = new EquipmentModel
        {
            EquipmentID = equipment.EquipmentID,
            Name = equipment.Name,
            Description = equipment.Description,
            SerialNumber = equipment.SerialNumber,
            Status = equipment.Status,
            Quantity = equipment.Quantity,
            StorageLocation = equipment.StorageLocation,
            Value = equipment.Value,
            CheckoutRecords = equipment.CheckoutRecords
        };

        // Show the edit modal
        showEditModal = true;
        StateHasChanged();
    }

    private async Task SaveEquipment()
    {
        if (editingEquipment == null)
        {
            return;
        }

        try
        {
            isLoading = true;
            showEditModal = false;
            StateHasChanged();

            Logger.LogInformation($"Saving equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");

            // Call the API to update the equipment
            bool success = await EquipmentService.UpdateEquipmentAsync(editingEquipment);

            if (success)
            {
                // Update the local list with the edited equipment
                var index = equipmentList.FindIndex(e => e.EquipmentID == editingEquipment.EquipmentID);
                if (index >= 0)
                {
                    equipmentList[index] = editingEquipment;
                }

                Logger.LogInformation($"Equipment updated successfully: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
            }
            else
            {
                errorMessage = "שגיאה בעדכון הציוד";
                Logger.LogError($"Failed to update equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בעדכון הציוד: {ex.Message}";
            Logger.LogError(ex, $"Error updating equipment: {editingEquipment.Name} (ID: {editingEquipment.EquipmentID})");
        }
        finally
        {
            editingEquipment = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ConfirmDelete(EquipmentModel equipment)
    {
        // Check permissions before showing delete confirmation
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה למחוק פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        equipmentToDelete = equipment;
        showDeleteModal = true;
        StateHasChanged();
    }

    private async Task RemoveEquipment(EquipmentModel equipment)
    {
        // Check permissions before allowing delete
        if (!IsAdminOrWarehouseManager)
        {
            errorMessage = "אין לך הרשאה למחוק פריטי ציוד";
            Logger.LogWarning($"Unauthorized attempt to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            StateHasChanged();
            return;
        }

        try
        {
            isLoading = true;
            showDeleteModal = false;
            StateHasChanged();

            Logger.LogInformation($"Removing equipment: {equipment.Name} (ID: {equipment.EquipmentID})...");
            bool success = await EquipmentService.DeleteEquipmentAsync(equipment.EquipmentID);

            if (success)
            {
                // Remove from local list if deletion was successful
                equipmentList.Remove(equipment);
                Logger.LogInformation($"Equipment removed successfully: {equipment.Name} (ID: {equipment.EquipmentID})");
            }
            else
            {
                errorMessage = "שגיאה במחיקת הציוד";
                Logger.LogError($"Failed to delete equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה במחיקת הציוד: {ex.Message}";
            Logger.LogError(ex, $"Error removing equipment: {equipment.Name} (ID: {equipment.EquipmentID})");
        }
        finally
        {
            equipmentToDelete = null;
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CloseModal()
    {
        showEditModal = false;
        showDeleteModal = false;
        editingEquipment = null;
        equipmentToDelete = null;
        StateHasChanged();
    }
}
