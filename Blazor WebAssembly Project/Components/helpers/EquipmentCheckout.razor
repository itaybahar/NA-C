@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService

<h2 class="text-center text-xl font-bold mb-6 text-white">הוצאת ציוד לצוות</h2>

<div class="checkout-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>טוען נתונים...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert-danger mb-4">
            <p>@errorMessage</p>
            <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
        </div>
    }
    else
    {
        <div class="form-group">
            <label class="input-label">בחר צוות</label>
            <select @bind="SelectedTeamId" class="form-control">
                <option value="">בחר צוות</option>
                @if (EligibleTeams != null)
                {
                    @foreach (var team in EligibleTeams)
                    {
                        <option value="@team.TeamID">@team.TeamName</option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label class="input-label">בחר ציוד</label>
            <select @bind="SelectedEquipmentId" class="form-control">
                <option value="">בחר ציוד</option>
                @if (Equipment != null)
                {
                    @foreach (var item in Equipment)
                    {
                        <option value="@item.EquipmentID">@item.Name (@item.Status)</option>
                    }
                }
            </select>
        </div>

        <button class="btn-submit" @onclick="CheckoutItem" disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null)">
            @if (isSubmitting)
            {
                <span>מוציא ציוד...</span>
            }
            else
            {
                <span>הוצא ציוד</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert-success mt-4">@Message</div>
        }
    }
</div>

<style>
    .checkout-container {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        max-width: 500px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .input-label {
        display: block;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #cccccc;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: #ffffff;
        transition: all 0.3s;
    }

        .form-control:focus {
            outline: 2px solid #d32f2f;
            background-color: #555;
        }

    .btn-submit, .btn-action {
        background-color: #d32f2f;
        color: #ffffff;
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
    }

        .btn-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-submit:hover:not(:disabled), .btn-action:hover {
            background-color: #b71c1c;
        }

    .alert-success {
        background-color: rgba(40, 167, 69, 0.2);
        color: #28a745;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid rgba(40, 167, 69, 0.3);
        text-align: center;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid rgba(220, 53, 69, 0.3);
        text-align: center;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #d32f2f;
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 1rem;
    }

    keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    private List<TeamDto> EligibleTeams = new();
    private List<EquipmentModel> Equipment = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            // Load teams and equipment in parallel
            var teamsTask = TeamService.GetTeamsAsync();
            var equipmentTask = EquipmentService.GetAvailableEquipmentAsync();

            await Task.WhenAll(teamsTask, equipmentTask);

            // Safely assign results
            var teams = await teamsTask;
            var equipment = await equipmentTask;

            // Only update if we got valid data
            if (teams != null)
                EligibleTeams = teams;

            if (equipment != null)
                Equipment = equipment;

            // Reset selection
            SelectedTeamId = null;
            SelectedEquipmentId = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CheckoutItem()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
            return;

        isSubmitting = true;
        Message = null;
        StateHasChanged();

        try
        {
            await CheckoutService.CheckoutEquipmentAsync(SelectedTeamId.Value, SelectedEquipmentId.Value);

            // Assuming successful checkout if no exception is thrown
            Message = "הציוד נרשם כהוצאה בהצלחה!";

            // Refresh equipment list
            var freshEquipment = await EquipmentService.GetAvailableEquipmentAsync();
            if (freshEquipment != null)
                Equipment = freshEquipment;

            // Reset selections
            SelectedTeamId = null;
            SelectedEquipmentId = null;
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            Console.WriteLine($"Error checking out equipment: {ex}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}

