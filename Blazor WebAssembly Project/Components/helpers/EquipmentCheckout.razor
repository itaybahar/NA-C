@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@using Blazor_WebAssembly.Models.Team
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Blazored.LocalStorage
@using Blazor_WebAssembly.Services
@using static Blazor_WebAssembly.Services.Implementations.CheckoutService

@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService
@inject ILogger<EquipmentCheckout> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime


<link href="css/dashboard.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">ניהול ציוד</h2>

<div class="tabs mb-4">
    <button class="tab @(ActiveTab == "checkout" ? "active" : "")" @onclick="@(() => OnTabChanged("checkout"))">
        <i class="bi bi-box-arrow-right"></i> הוצאת ציוד
    </button>

    <button class="tab @(ActiveTab == "log" ? "active" : "")" @onclick="@(() => OnTabChanged("log"))">
        <i class="bi bi-list-columns"></i> לוג פעולות
    </button>
    <div class="tab-indicator" style="right: TabIndicatorPosition; width: TabIndicatorWidth"></div>
</div>

@if (ActiveTab == "checkout")
{
    <div class="dashboard-section slide-in">
        @if (!isAuthenticated)
        {
            <div class="alert-warning mb-4">
                <p>יש להתחבר כדי להשתמש באפשרות זו.</p>
                <button class="btn-action mt-2" @onclick="HandleLogin">
                    <i class="bi bi-box-arrow-in-right"></i> התחבר
                </button>
            </div>
        }
        else if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>טוען נתונים...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger mb-4">
                <p>@errorMessage</p>
                <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
            </div>
        }
        else
        {
            <div class="dashboard-grid grid-2-col">
                <div class="widget-container">
                    <div class="widget-header">
                        <h3 class="widget-title">פרטי הוצאת ציוד</h3>
                    </div>

                    <div class="form-group">
                        <label class="input-label" for="team-search">בחר צוות</label>
                        <div class="search-input-container">
                            <input id="team-search" class="search-bar" placeholder="חפש צוות" @bind="TeamSearchQuery" @oninput="FilterTeams" />
                            <i class="bi bi-search search-icon"></i>
                        </div>
                        <select id="team-select" @bind="SelectedTeamId" class="form-control mt-2">
                            <option value="">בחר צוות</option>
                            @if (FilteredTeams != null)
                            {
                                @foreach (var team in FilteredTeams)
                                {
                                    <option value="@team.TeamID">@team.TeamName</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="input-label" for="equipment-search">בחר ציוד</label>
                        <div class="search-input-container">
                            <input id="equipment-search" class="search-bar" placeholder="חפש ציוד" @bind="EquipmentSearchQuery" @oninput="FilterEquipment" />
                            <i class="bi bi-search search-icon"></i>
                        </div>
                        <select id="equipment-select" @bind="SelectedEquipmentId" class="form-control mt-2">
                            <option value="">בחר ציוד</option>
                            @if (FilteredEquipment != null && FilteredEquipment.Any())
                            {
                                @foreach (var item in FilteredEquipment)
                                {
                                    <option value="@item.EquipmentID" disabled="@(!IsEquipmentAvailable(item))">
                                        @item.Name @(IsEquipmentAvailable(item) ? "" : "(לא זמין)") - @GetStatusText(item.Status)
                                    </option>
                                }
                            }
                            else
                            {
                                <option disabled>אין ציוד זמין</option>
                            }
                        </select>
                    </div>

                    <div class="mt-4">
                        <button class="btn-submit" @onclick="CheckoutItem"
                                disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null ||
                                                    !IsSelectedEquipmentAvailable() ||
                                                    SelectedQuantity <= 0 ||
                                                    (SelectedEquipmentId.HasValue && GetAvailableQuantity(GetSelectedEquipment()?.EquipmentID ?? 0, GetSelectedEquipment()?.Quantity ?? 0) < SelectedQuantity))">
                    @if (isSubmitting)
                            {
                                <div class="inline-flex items-center">
                                    <div class="spinner spinner-sm mr-2"></div>
                                    <span>מוציא ציוד...</span>
                                </div>
                            }
                            else
                            {
                                <i class="bi bi-box-arrow-right mr-2"></i>
                                <span>הוצא ציוד</span>
                            }
                        </button>


                        @if (SelectedEquipmentId.HasValue && SelectedQuantity > 0 &&
                                        GetAvailableQuantity(GetSelectedEquipment()?.EquipmentID ?? 0, GetSelectedEquipment()?.Quantity ?? 0) < SelectedQuantity)
                        {
                            <div class="alert-danger mt-2">
                                <p>הכמות המבוקשת גדולה מהכמות הזמינה</p>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="@(isError ? "alert-danger" : "alert-success") mt-4">
                            <p>@Message</p>

                            @if (isTeamBlacklisted)
                            {
                                <div class="overdue-equipment-details mt-2">
                                    @if (!string.IsNullOrEmpty(overdueEquipmentName))
                                    {
                                        <div>
                                            <div class="overdue-label">פריט שלא הוחזר בזמן:</div>
                                            <div class="overdue-value badge warning-badge">@overdueEquipmentName</div>
                                        </div>
                                    }

                                    @if (overdueItems != null && overdueItems.Any())
                                    {
                                        <div class="overdue-items-table mt-3">
                                            <table class="table table-sm table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>פריט</th>
                                                        <th>תאריך הוצאה</th>
                                                        <th>תאריך החזרה מתוכנן</th>
                                                        <th>ימים באיחור</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in overdueItems)
                                                    {
                                                        <tr>
                                                            <td>@item.EquipmentName</td>
                                                            <td>@item.CheckoutDate.ToString("dd/MM/yyyy")</td>
                                                            <td>@item.ExpectedReturnDate.ToString("dd/MM/yyyy")</td>
                                                            <td>@Math.Round(item.DaysOverdue, 1)</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }

                                    <p class="mt-2 text-sm">הצוות לא יוכל להוציא ציוד חדש עד להחזרת הפריט.</p>
                                </div>
                            }
                        </div>
                    }
                </div>
                <style>
                    .overdue-equipment-details {
                        background-color: rgba(255, 255, 255, 0.1);
                        padding: 10px;
                        border-radius: 6px;
                        margin-top: 10px;
                    }

                    .overdue-label {
                        font-weight: bold;
                        margin-bottom: 4px;
                    }

                    .overdue-value {
                        font-size: 1.1em;
                        padding: 2px 8px;
                        border-radius: 4px;
                        display: inline-block;
                    }

                    .warning-badge {
                        background-color: #ff9800;
                        color: white;
                    }

                    .overdue-items-table {
                        max-height: 200px;
                        overflow-y: auto;
                        background-color: rgba(0, 0, 0, 0.05);
                        border-radius: 4px;
                    }

                        .overdue-items-table table {
                            margin-bottom: 0;
                        }

                        .overdue-items-table th, .overdue-items-table td {
                            padding: 6px 10px;
                            text-align: right;
                        }
                </style>


                @if (SelectedEquipmentId.HasValue)
                {
                    var selectedEquipment = GetSelectedEquipment();
                    if (selectedEquipment != null)
                    {
                        <div class="dashboard-card">
                            <div class="card-header">
                                <div>
                                    <h3 class="card-title">@selectedEquipment.Name</h3>
                                    <p class="card-subtitle">@(string.IsNullOrEmpty(selectedEquipment.Description) ? "אין תיאור" : selectedEquipment.Description)</p>
                                </div>
                                <div class="card-icon">
                                    <i class="bi bi-box-seam"></i>
                                </div>
                            </div>
                            <div class="card-content">
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-muted">מספר סידורי:</span>
                                    <span>@(string.IsNullOrEmpty(selectedEquipment.SerialNumber) ? "לא הוזן" : selectedEquipment.SerialNumber)</span>
                                </div>
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-muted">מיקום אחסון:</span>
                                    <span>@selectedEquipment.StorageLocation</span>
                                </div>
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-muted">כמות כוללת:</span>
                                    <span>@selectedEquipment.Quantity</span>
                                </div>
                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-muted">כמות זמינה:</span>
                                    <span>@GetAvailableQuantity(selectedEquipment.EquipmentID, selectedEquipment.Quantity)</span>
                                </div>

                                <div class="flex items-center justify-between mb-2">
                                    <span class="text-muted">סטטוס:</span>
                                    <span class="status-badge @GetStatusBadgeClass(selectedEquipment.Status)">
                                        @GetStatusText(selectedEquipment.Status)
                                    </span>
                                </div>
                                <div class="form-group mt-3">
                                    <label for="quantity" class="input-label">בחר כמות להוצאה</label>
                                    <input id="quantity" type="number" class="form-control"
                                           @bind="SelectedQuantity"
                                           min="1"
                                           max="@GetAvailableQuantity(selectedEquipment.EquipmentID, selectedEquipment.Quantity)"
                                           placeholder="בחר כמות" />
                                    <small class="text-muted">כמות זמינה: @GetAvailableQuantity(selectedEquipment.EquipmentID, selectedEquipment.Quantity)</small>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>
}
else if (ActiveTab == "history")
{
    <div class="dashboard-section slide-in">
        <EquipmentHistory HistoryRecords="CheckoutHistory"
                          IsLoading="isLoadingHistory"
                          TeamFilter="HistoryTeamFilter"
                          EquipmentFilter="HistoryEquipmentFilter"
                          OnRefresh="LoadHistory"
                          OnTeamFilterChanged="@(value => { HistoryTeamFilter = value; FilterHistory(); })"
                          OnEquipmentFilterChanged="@(value => { HistoryEquipmentFilter = value; FilterHistory(); })" />
    </div>
}
else if (ActiveTab == "log")
{
    <div class="dashboard-section slide-in">
        <div class="widget-header">
            <h3 class="widget-title">לוג פעולות</h3>
            <div class="widget-actions">
                <button class="btn-icon" title="נקה לוג" @onclick="ClearLogs">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        </div>

        @if (ActionLogs.Count == 0)
        {
            <div class="empty-state">
                <i class="bi bi-journal-text empty-icon"></i>
                <p class="no-log">אין לוג פעולות להצגה</p>
            </div>
        }
        else
        {
            <ul class="log-list">
                @foreach (var log in ActionLogs)
                {
                    <li class="log-item">
                        <span class="log-timestamp">@(log.Timestamp?.ToString("dd/MM HH:mm:ss") ?? "-")</span>
                        <span class="log-message">@log.Message</span>
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    // Properties for the tab indicator
    private string ActiveTab = "checkout";
    private List<TeamModel> EligibleTeams = new();
    private List<TeamModel> FilteredTeams = new();
    private List<EquipmentModel> Equipment = new();
    private List<EquipmentModel> FilteredEquipment = new();
    private List<CheckoutRecordDto> CheckoutHistory = new();
    private List<CheckoutRecordDto> FilteredCheckoutHistory = new();
    private List<ActionLog> ActionLogs = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isLoadingHistory = false;
    private bool isSubmitting = false;
    private bool isError = false;
    private string TeamSearchQuery = string.Empty;
    private string EquipmentSearchQuery = string.Empty;
    private string HistoryTeamFilter = string.Empty;
    private string HistoryEquipmentFilter = string.Empty;
    private int? CurrentUserId; // To store the current user ID
    public RenderFragment? ChildContent { get; set; }
    private bool isAuthenticated = false;
    private string? overdueEquipmentName;
    private bool isTeamBlacklisted = false;
    private List<OverdueEquipmentInfo>? overdueItems;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentCheckout component...");

        try
        {
            // Load data first
            await LoadData();

            // Also load checkout history to calculate available quantities
            await LoadHistory();

            // Check and set authentication status
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

            if (!isAuthenticated)
            {
                var token = await LocalStorageService.GetItemAsync<string>("authToken");

                if (!string.IsNullOrEmpty(token))
                {
                    try
                    {
                        await JSRuntime.InvokeVoidAsync("console.log", "Attempting to revalidate token");

                        // Check again
                        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        isAuthenticated = authState.User.Identity?.IsAuthenticated == true;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning(ex, "Failed to revalidate token");
                    }
                }
            }

            Logger.LogInformation($"Authentication status: {(isAuthenticated ? "Authenticated" : "Not authenticated")}");

            // Then load user info if authenticated
            if (isAuthenticated)
            {
                await LoadUserInfo();
            }
            else
            {
                // Default for testing
                CurrentUserId = 1;
                Logger.LogWarning("User not authenticated - using default user ID for development");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitializedAsync");
        }
    }
  
    private async Task CheckoutItem()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
            return;

        // Clear previous blacklist/overdue information
        overdueEquipmentName = null;
        isTeamBlacklisted = false;
        overdueItems = null;  // New property to store overdue items list
        StateHasChanged();

        // Check authentication first
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity?.IsAuthenticated == true)
        {
            // Redirect to login before allowing checkout
            await EnsureAuthenticated();
            return;
        }

        // Get user ID with better fallback mechanism
        if (!CurrentUserId.HasValue)
        {
            var nameIdentifierClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);
            var userIdClaim = authState.User.FindFirst("UserID") ??
                              authState.User.FindFirst("userId") ??
                              authState.User.FindFirst("sub");

            if (nameIdentifierClaim != null && int.TryParse(nameIdentifierClaim.Value, out int parsedId))
            {
                CurrentUserId = parsedId;
                Logger.LogInformation($"Using NameIdentifier claim for user ID: {parsedId}");
            }
            else if (userIdClaim != null && int.TryParse(userIdClaim.Value, out parsedId))
            {
                CurrentUserId = parsedId;
                Logger.LogInformation($"Using custom UserID claim for user ID: {parsedId}");
            }
            else
            {
                // Last resort fallback for testing
                CurrentUserId = 1;
                Logger.LogWarning("No user ID found in claims. Using default ID 1 for testing");
            }
        }

        isSubmitting = true;
        Message = null;
        isError = false;
        StateHasChanged();

        try
        {
            // Get selected equipment to check if it's available
            var selectedEquipment = GetSelectedEquipment();
            if (selectedEquipment == null || !IsEquipmentAvailable(selectedEquipment))
            {
                Message = "הפריט אינו זמין להשאלה";
                isError = true;
                isSubmitting = false;
                StateHasChanged();
                return;
            }

            // Validate quantity
            if (SelectedQuantity <= 0)
            {
                Message = "כמות להוצאה חייבת להיות גדולה מאפס";
                isError = true;
                isSubmitting = false;
                StateHasChanged();
                return;
            }

            // Calculate actual available quantity (not just the total quantity)
            int availableQuantity = GetAvailableQuantity(selectedEquipment.EquipmentID, selectedEquipment.Quantity);

            if (SelectedQuantity > availableQuantity)
            {
                Message = $"הכמות המבוקשת ({SelectedQuantity}) גדולה מהכמות הזמינה ({availableQuantity})";
                isError = true;
                isSubmitting = false;
                StateHasChanged();
                return;
            }

            Logger.LogInformation($"Checking out equipment (TeamID: {SelectedTeamId}, EquipmentID: {SelectedEquipmentId}, UserID: {CurrentUserId}, Quantity: {SelectedQuantity})");

            var result = await CheckoutService.CheckoutEquipmentAsync(
                SelectedTeamId.Value,
                SelectedEquipmentId.Value,
                CurrentUserId.Value,
                SelectedQuantity
            );

            bool success = result.Success;
            string? errorMessage = result.ErrorMessage;
            string? overdueEquipName = result.OverdueEquipmentName;
            overdueItems = result.OverdueItems; // Store overdue items

            if (!success)
            {
                // Store the overdue equipment name for display
                overdueEquipmentName = overdueEquipName;

                // Check if this is a blacklist error - typically contains "blacklisted" in the message
                isTeamBlacklisted = errorMessage?.Contains("blacklisted", StringComparison.OrdinalIgnoreCase) == true;

                // Create a user-friendly message
                if (isTeamBlacklisted)
                {
                    var teamName = EligibleTeams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName ?? "הנבחר";
                    Message = $"לא ניתן להוציא ציוד: הצוות {teamName} חסום בגלל החזרה באיחור של פריט";

                    // If we have overdue equipment name, add it to the message
                    if (!string.IsNullOrEmpty(overdueEquipmentName))
                    {
                        Message += $" '{overdueEquipmentName}'";
                    }

                    // Log this as info, not error, since it's an expected business logic outcome
                    Logger.LogInformation($"Checkout blocked: Team '{teamName}' is blacklisted due to overdue equipment: {overdueEquipmentName}");
                }
                else
                {
                    Message = errorMessage ?? "שגיאה ברישום הוצאת הציוד. נסה שנית.";
                    Logger.LogWarning($"Checkout failed with message: {errorMessage}");
                }

                isError = true;
                isSubmitting = false;
                StateHasChanged();
                return;
            }

            // Reset these values on successful checkout
            overdueEquipmentName = null;
            isTeamBlacklisted = false;
            overdueItems = null;

            Message = $"הציוד נרשם כהוצאה בהצלחה! כמות: {SelectedQuantity}";
            isError = false;
            Logger.LogInformation($"Equipment checked out successfully. Quantity: {SelectedQuantity}");
            AddLog($"הציוד {selectedEquipment?.Name} נרשם בהצלחה לצוות {EligibleTeams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName} (כמות: {SelectedQuantity})");

            // Refresh both equipment list and checkout history to show updated available quantities
            await RefreshAfterCheckout();
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            isError = true;
            Logger.LogError(ex, "Error checking out equipment.");
            AddLog($"שגיאה בהוצאת ציוד: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    
    private async Task HandleLogin()
    {
        // Save the current URL so we can return after login
        await LocalStorageService.SetItemAsync("returnUrl", NavigationManager.Uri);

        // Navigate to the login page
        NavigationManager.NavigateTo("authentication/login", forceLoad: false);
    }

    // Method to check authentication and redirect if needed
    private async Task EnsureAuthenticated()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (!authState.User.Identity?.IsAuthenticated == true)
        {
            // Store current URL to return after login
            await LocalStorageService.SetItemAsync("returnUrl", NavigationManager.Uri);

            // Show message
            Message = "אתה צריך להיות מחובר כדי לבצע פעולה זו";
            isError = true;

            // Log the authentication issue
            Logger.LogWarning("User not authenticated - redirecting to login");

            // Redirect to login page
            NavigationManager.NavigateTo("authentication/login", forceLoad: false);
            return;
        }
    }

    // Method to get user info including user ID
    private async Task LoadUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Try standard identity claim types first
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier) ??
                                  user.FindFirst("sub") ??
                                  user.FindFirst("userId") ??
                                  user.FindFirst("UserID");

                if (userIdClaim != null)
                {
                    Logger.LogInformation($"Found user ID claim: {userIdClaim.Type} = {userIdClaim.Value}");

                    if (int.TryParse(userIdClaim.Value, out int userId))
                    {
                        CurrentUserId = userId;
                        Logger.LogInformation($"Successfully parsed user ID: {CurrentUserId}");
                    }
                    else
                    {
                        Logger.LogWarning($"Could not parse user ID '{userIdClaim.Value}' as integer");

                        // Set a hardcoded user ID for testing/development
                        CurrentUserId = 1;
                        Logger.LogWarning($"Using hardcoded user ID: {CurrentUserId}");
                    }
                }
                else
                {
                    // If no standard claim is found, check for non-standard or custom claims
                    var possibleIdClaims = user.Claims.Where(c =>
                        c.Type.Contains("id", StringComparison.OrdinalIgnoreCase) ||
                        c.Type.Contains("identifier", StringComparison.OrdinalIgnoreCase)).ToList();

                    if (possibleIdClaims.Any())
                    {
                        foreach (var claim in possibleIdClaims)
                        {
                            Logger.LogInformation($"Potential ID claim found: {claim.Type} = {claim.Value}");
                        }

                        var firstPotentialClaim = possibleIdClaims.First();
                        if (int.TryParse(firstPotentialClaim.Value, out int potentialUserId))
                        {
                            CurrentUserId = potentialUserId;
                            Logger.LogInformation($"Using potential user ID claim: {CurrentUserId}");
                        }
                        else
                        {
                            // Hardcoded for testing/development
                            CurrentUserId = 1;
                            Logger.LogWarning($"Using hardcoded user ID: {CurrentUserId}");
                        }
                    }
                    else
                    {
                        // Hardcoded for testing/development
                        CurrentUserId = 1;
                        Logger.LogWarning($"No suitable user ID claim found. Using hardcoded user ID: {CurrentUserId}");
                    }
                }
            }
            else
            {
                Logger.LogWarning("User is not authenticated");

                // Hardcoded for testing/development when not authenticated
                CurrentUserId = 1;
                Logger.LogWarning($"User not authenticated. Using hardcoded user ID: {CurrentUserId}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user information");

            // Ensure we have a fallback even if there's an exception
            CurrentUserId = 1;
            Logger.LogWarning($"Exception occurred. Using hardcoded user ID: {CurrentUserId}");
        }
    }

    // Handle tab changes with a slight delay for animation
    private async Task OnTabChanged(string tab)
    {
        Logger.LogInformation($"Tab changed to: {tab}");
        ActiveTab = tab;

        // Add a slight delay for the animation to complete before loading data
        await Task.Delay(50);

        if (tab == "history")
        {
            await LoadHistory();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams and equipment...");
            var teamsTask = TeamService.GetAllTeamsAsync();
            var equipmentTask = EquipmentService.GetAllEquipmentAsync();

            await Task.WhenAll(teamsTask, equipmentTask);

            var teams = await teamsTask;
            EligibleTeams = teams ?? new List<TeamModel>();
            FilteredTeams = new List<TeamModel>(EligibleTeams);

            var equipment = await equipmentTask;
            Equipment = equipment ?? new List<EquipmentModel>();
            FilteredEquipment = new List<EquipmentModel>(Equipment);

            Logger.LogInformation($"Loaded {Equipment.Count} equipment items.");
            SelectedTeamId = null;
            SelectedEquipmentId = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading data.");
            AddLog($"שגיאה בטעינת נתונים: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterTeams()
    {
        FilteredTeams = EligibleTeams
            .Where(t => t.TeamName.Contains(TeamSearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (SelectedTeamId.HasValue && !FilteredTeams.Any(t => t.TeamID == SelectedTeamId))
        {
            SelectedTeamId = null;
        }

        StateHasChanged();
    }

    private void FilterEquipment()
    {
        FilteredEquipment = Equipment
            .Where(e => e.Name.Contains(EquipmentSearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (SelectedEquipmentId.HasValue && !FilteredEquipment.Any(e => e.EquipmentID == SelectedEquipmentId))
        {
            SelectedEquipmentId = null;
        }

        StateHasChanged();
    }

    private void FilterHistory()
    {
        FilteredCheckoutHistory = CheckoutHistory
            .Where(h =>
                (string.IsNullOrEmpty(HistoryTeamFilter) ||
                 (h.TeamName?.Contains(HistoryTeamFilter, StringComparison.OrdinalIgnoreCase) ?? false)) &&
                (string.IsNullOrEmpty(HistoryEquipmentFilter) ||
                 (h.EquipmentName?.Contains(HistoryEquipmentFilter, StringComparison.OrdinalIgnoreCase) ?? false))
            )
            .ToList();

        StateHasChanged();
    }

    private async Task LoadHistory()
    {
        isLoadingHistory = true;
        CheckoutHistory.Clear();
        FilteredCheckoutHistory.Clear();
        HistoryTeamFilter = string.Empty;
        HistoryEquipmentFilter = string.Empty;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading checkout history...");
            var history = await CheckoutService.GetCheckoutHistoryAsync();

            if (history != null)
            {
                CheckoutHistory = history.Select(h => new CheckoutRecordDto
                {
                    Id = h.Id,
                    EquipmentId = h.EquipmentId,
                    TeamId = h.TeamId,
                    UserId = h.UserId,
                    CheckedOutAt = h.CheckedOutAt,
                    ReturnedAt = h.ReturnedAt,
                    EquipmentName = h.EquipmentName ?? "ציוד לא ידוע",
                    TeamName = h.TeamName ?? "צוות לא ידוע",
                    UserName = h.UserName ?? "משתמש לא ידוע",
                    UserRole = h.UserRole ?? "משתמש",
                    Quantity = h.Quantity,
                    ItemCondition = h.ItemCondition,
                    ItemNotes = h.ItemNotes
                }).ToList();

                // Initialize filtered records with all records
                FilteredCheckoutHistory = new List<CheckoutRecordDto>(CheckoutHistory);

                Logger.LogInformation($"Loaded {CheckoutHistory.Count} history records");
                AddLog($"נטענו {CheckoutHistory.Count} רשומות היסטוריה");
            }
            else
            {
                CheckoutHistory = new List<CheckoutRecordDto>();
                FilteredCheckoutHistory = new List<CheckoutRecordDto>();
                Logger.LogWarning("No history records returned from service");
                AddLog("לא נמצאו רשומות היסטוריה");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading checkout history.");
            AddLog($"שגיאה בטעינת היסטורית הוצעות: {ex.Message}");
        }
        finally
        {
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private string FormatUserRole(string? role)
    {
        if (string.IsNullOrEmpty(role))
            return "-";

        return role.ToLower() switch
        {
            "admin" => "מנהל",
            "warehousemanager" => "אחראי מחסן",
            "warehouseoperator" => "עובד מחסן",
            "user" => "משתמש",
            _ => role
        };
    }

    private bool IsEquipmentAvailable(EquipmentModel equipment)
    {
        return equipment.Status.ToLower() == "available" ||
               equipment.Status.ToLower() == "זמין" ||
               equipment.Status.ToLower() == "returned" ||
               equipment.Status.ToLower() == "מוחזר";
    }

    private EquipmentModel? GetSelectedEquipment()
    {
        return SelectedEquipmentId.HasValue ?
            Equipment.FirstOrDefault(e => e.EquipmentID == SelectedEquipmentId) : null;
    }

    private string GetStatusText(string status)
    {
        return status.ToLower() switch
        {
            "available" => "זמין",
            "inuse" => "בשימוש",
            "maintenance" => "בתחזוקה",
            "returned" => "מוחזר",
            "lost" => "אבוד",
            "damaged" => "פגום",
            "checkout" => "בהשאלה",
            _ => status
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "available" => "returned-badge",
            "returned" => "returned-badge",
            "inuse" => "checked-out-badge",
            "checkout" => "checked-out-badge",
            "maintenance" => "warning-badge",
            "damaged" => "warning-badge",
            "lost" => "danger-badge",
            _ => "default-badge"
        };
    }

    private async Task RefreshAfterCheckout()
    {
        try
        {
            // Load history data first
            await LoadHistory();

            // Then get fresh equipment data
            var freshEquipment = await EquipmentService.GetAllEquipmentAsync();
            if (freshEquipment != null)
            {
                Equipment = freshEquipment;
                FilteredEquipment = new List<EquipmentModel>(Equipment);
            }

            // Reset selection fields
            SelectedTeamId = null;
            SelectedEquipmentId = null;
            SelectedQuantity = 1;
            TeamSearchQuery = string.Empty;
            EquipmentSearchQuery = string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing data after checkout");
        }
    }


    // Improved GetAvailableQuantity method to correctly calculate available quantity
    private int GetAvailableQuantity(int equipmentId, int totalQuantity)
    {
        if (CheckoutHistory == null || !CheckoutHistory.Any())
        {
            // If history isn't loaded yet, try to use equipment's checkout records if available
            var equipment = Equipment.FirstOrDefault(e => e.EquipmentID == equipmentId);
            if (equipment?.CheckoutRecords != null && equipment.CheckoutRecords.Any())
            {
                int checkedOutItems = equipment.CheckoutRecords
                    .Where(cr => !cr.ReturnedAt.HasValue)
                    .Sum(cr => cr.Quantity);

                return Math.Max(0, totalQuantity - checkedOutItems);
            }

            // If no history data is available, return total quantity as available
            return totalQuantity;
        }

        // Calculate checked out (non-returned) items from checkout history
        int checkedOutQuantity = CheckoutHistory
            .Where(h =>
                int.TryParse(h.EquipmentId, out var id) &&
                id == equipmentId &&
                !h.ReturnedAt.HasValue)
            .Sum(h => h.Quantity);

        // Return available quantity (ensuring it's not negative)
        return Math.Max(0, totalQuantity - checkedOutQuantity);
    }


    private bool IsSelectedEquipmentAvailable()
    {
        if (!SelectedEquipmentId.HasValue) return false;

        var selectedEquipment = GetSelectedEquipment();
        if (selectedEquipment == null) return false;

        // Check if equipment is in an available status
        bool statusOK = IsEquipmentAvailable(selectedEquipment);

        // Calculate actual available quantity
        int availableQuantity = GetAvailableQuantity(selectedEquipment.EquipmentID, selectedEquipment.Quantity);

        // The equipment is available if status is OK and there's enough available quantity
        return statusOK && availableQuantity >= SelectedQuantity;
    }


    // Property to store the selected quantity
    private int SelectedQuantity { get; set; } = 1;

    private void AddLog(string message)
    {
        ActionLogs.Insert(0, new ActionLog
        {
            Timestamp = DateTime.Now,
            Message = message
        });

        if (ActionLogs.Count > 50)
        {
            ActionLogs.RemoveAt(ActionLogs.Count - 1);
        }
    }

    private void ClearLogs()
    {
        ActionLogs.Clear();
        StateHasChanged();
    }

    private class ActionLog
    {
        public DateTime? Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
