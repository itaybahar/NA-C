@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@using Blazor_WebAssembly.Models.Team
@using Domain_Project.DTOs.Domain_Project.DTOs.Domain_Project.Models
@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService
@inject ILogger<EquipmentCheckout> Logger

<h2 class="text-center text-xl font-bold mb-6 text-white">ניהול ציוד</h2>

<div class="tabs mb-4">
    <button class="tab @(ActiveTab == "checkout" ? "active" : "")" @onclick='() => OnTabChanged("checkout")'>
        הוצאת ציוד
    </button>
    <button class="tab @(ActiveTab == "history" ? "active" : "")" @onclick='() => OnTabChanged("history")'>
        היסטורית הוצעות והחזרות
    </button>
    <button class="tab @(ActiveTab == "log" ? "active" : "")" @onclick='() => OnTabChanged("log")'>
        לוג פעולות
    </button>
</div>

@if (ActiveTab == "checkout")
{
    <div class="checkout-container">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>טוען נתונים...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger mb-4">
                <p>@errorMessage</p>
                <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
            </div>
        }
        else
        {
            <div class="form-group">
                <label class="input-label">בחר צוות</label>
                <input class="form-control search-bar" placeholder="חפש צוות" @bind="TeamSearchQuery" @oninput="FilterTeams" />
                <select @bind="SelectedTeamId" class="form-control">
                    <option value="">בחר צוות</option>
                    @if (FilteredTeams != null)
                    {
                        @foreach (var team in FilteredTeams)
                        {
                            <option value="@team.TeamID">@team.TeamName</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label class="input-label">בחר ציוד</label>
                <input class="form-control search-bar" placeholder="חפש ציוד" @bind="EquipmentSearchQuery" @oninput="FilterEquipment" />
                <select @bind="SelectedEquipmentId" class="form-control">
                    <option value="">בחר ציוד</option>
                    @if (FilteredEquipment != null && FilteredEquipment.Any())
                    {
                        @foreach (var item in FilteredEquipment)
                        {
                            <option value="@item.EquipmentID">@item.Name (@item.Status)</option>
                        }
                    }
                    else
                    {
                        <option disabled>אין ציוד זמין</option>
                    }
                </select>
            </div>

            <button class="btn-submit" @onclick="CheckoutItem" disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null)">
                @if (isSubmitting)
                {
                    <span>מוציא ציוד...</span>
                }
                else
                {
                    <span>הוצא ציוד</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert-success mt-4">@Message</div>
            }
        }
    </div>
}
else if (ActiveTab == "history")
{
    <div class="history-container">
        @if (isLoadingHistory)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>טוען היסטורית הוצעות והחזרות...</p>
            </div>
        }
        else if (CheckoutHistory.Count == 0)
        {
            <p class="no-history">אין היסטורית הוצעות והחזרות</p>
        }
        else
        {
            <table class="history-table">
                <thead>
                    <tr>
                        <th>צוות</th>
                        <th>ציוד</th>
                        <th>תאריך הוצאה</th>
                        <th>תאריך החזרה</th>
                        <th>סטטוס</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var record in CheckoutHistory)
                    {
                        <tr>
                            <td>@record.Team.TeamName</td>
                            <td>@record.Equipment.Name</td>
                            <td>@record.CheckedOutAt.ToString("dd/MM/yyyy")</td>
                            <td>@(record.ReturnedAt.HasValue? record.ReturnedAt.Value.ToString("dd/MM/yyyy") : "-")</td>
                            <td>@(record.ReturnedAt.HasValue ? "הוחזר" : "לא הוחזר")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
}
else if (ActiveTab == "log")
{
    <div class="log-container">
        <h3 class="text-center text-lg font-bold mb-4 text-white">לוג פעולות</h3>
        @if (ActionLogs.Count == 0)
        {
            <p class="no-log">אין לוג פעולות להצגה</p>
        }
        else
        {
            <ul class="log-list">
                @foreach (var log in ActionLogs)
                {
                    <li class="log-item">
                        <span class="log-timestamp">@log.Timestamp.ToString("HH:mm:ss")</span>
                        <span class="log-message">@log.Message</span>
                    </li>
                }
            </ul>
        }
    </div>
}

<style>
    .search-bar {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: white;
        transition: all 0.3s;
    }

        .search-bar:focus {
            outline: 2px solid #d32f2f;
            background-color: #555;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: white;
        transition: all 0.3s;
    }

        .form-control:focus {
            outline: 2px solid #d32f2f;
            background-color: #555;
        }
</style>

@code {
    private string ActiveTab = "checkout";
    private List<TeamModel> EligibleTeams = new();
    private List<TeamModel> FilteredTeams = new();
    private List<EquipmentModel> Equipment = new();
    private List<EquipmentModel> FilteredEquipment = new();
    private List<CheckoutRecordDto> CheckoutHistory = new();
    private List<ActionLog> ActionLogs = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isLoadingHistory = false;
    private bool isSubmitting = false;
    private string TeamSearchQuery = string.Empty;
    private string EquipmentSearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentCheckout component...");
        await LoadData();
    }

    private async Task OnTabChanged(string tab)
    {
        Logger.LogInformation($"Tab changed to: {tab}");
        ActiveTab = tab;
        if (tab == "history")
        {
            await LoadHistory();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams and equipment...");
            var teamsTask = TeamService.GetAllTeamsAsync();
            var equipmentTask = EquipmentService.GetAllEquipmentAsync(); // Use the same method as EquipmentList

            await Task.WhenAll(teamsTask, equipmentTask);

            var teams = await teamsTask;
            EligibleTeams = teams ?? new List<TeamModel>();
            FilteredTeams = new List<TeamModel>(EligibleTeams);

            var equipment = await equipmentTask;
            Equipment = equipment ?? new List<EquipmentModel>();
            FilteredEquipment = new List<EquipmentModel>(Equipment);

            Logger.LogInformation($"Loaded {Equipment.Count} equipment items.");
            SelectedTeamId = null;
            SelectedEquipmentId = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading data.");
            AddLog($"שגיאה בטעינת נתונים: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterTeams()
    {
        FilteredTeams = EligibleTeams
            .Where(t => t.TeamName.Contains(TeamSearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (SelectedTeamId.HasValue && !FilteredTeams.Any(t => t.TeamID == SelectedTeamId))
        {
            SelectedTeamId = null;
        }
    }

    private void FilterEquipment()
    {
        FilteredEquipment = Equipment
            .Where(e => e.Name.Contains(EquipmentSearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();

        if (SelectedEquipmentId.HasValue && !FilteredEquipment.Any(e => e.EquipmentID == SelectedEquipmentId))
        {
            SelectedEquipmentId = null;
        }
    }

    private async Task LoadHistory()
    {
        isLoadingHistory = true;
        CheckoutHistory.Clear();
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading checkout history...");
            var history = await CheckoutService.GetCheckoutHistoryAsync();
            CheckoutHistory = history ?? new List<CheckoutRecordDto>();
            Logger.LogInformation("Checkout history loaded successfully.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading checkout history.");
            AddLog($"שגיאה בטעינת היסטורית הוצעות: {ex.Message}");
        }
        finally
        {
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private async Task CheckoutItem()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
            return;

        isSubmitting = true;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Checking out equipment (TeamID: {SelectedTeamId}, EquipmentID: {SelectedEquipmentId})...");
            await CheckoutService.CheckoutEquipmentAsync(SelectedTeamId.Value, SelectedEquipmentId.Value);
            Message = "הציוד נרשם כהוצאה בהצלחה!";
            Logger.LogInformation("Equipment checked out successfully.");
            AddLog($"הציוד נרשם כהוצאה בהצלחה! (TeamID: {SelectedTeamId}, EquipmentID: {SelectedEquipmentId})");

            var freshEquipment = await EquipmentService.GetAllEquipmentAsync(); // Refresh equipment list
            Equipment = freshEquipment ?? new List<EquipmentModel>();
            FilteredEquipment = new List<EquipmentModel>(Equipment);

            SelectedTeamId = null;
            SelectedEquipmentId = null;
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            Logger.LogError(ex, "Error checking out equipment.");
            AddLog($"שגיאה בהוצאת ציוד: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void AddLog(string message)
    {
        ActionLogs.Insert(0, new ActionLog
        {
            Timestamp = DateTime.Now,
            Message = message
        });

        if (ActionLogs.Count > 50)
        {
            ActionLogs.RemoveAt(ActionLogs.Count - 1);
        }
    }

    private class ActionLog
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}

