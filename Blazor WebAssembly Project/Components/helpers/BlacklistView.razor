@using Blazor_WebAssembly.Models
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Services.Interfaces
@inject ITeamService TeamService

<h2 class="text-center text-xl font-bold mb-6 text-white">רשימה שחורה</h2>

@if (IsLoading)
{
    <div class="loading-indicator">
        <div class="spinner"></div>
        <p>טוען רשימת צוותים...</p>
    </div>
}
else if (BlacklistedTeams.Count == 0)
{
    <p class="no-teams">אין צוותים ברשימה השחורה</p>
}
else
{
    <div class="teams-container">
        <table class="teams-table">
            <thead>
                <tr>
                    <th>מזהה</th>
                    <th>שם</th>
                    <th>תיאור</th>
                    <th>סטטוס</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var team in BlacklistedTeams)
                {
                    <tr>
                        <td>@team.TeamID</td>
                        <td>@team.TeamName</td>
                        <td>@(string.IsNullOrEmpty(team.Description) ? "-" : team.Description)</td>
                        <td>
                            <span class="status-indicator inactive">ברשימה שחורה</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<style>
    .teams-container {
        margin-top: 20px;
    }

    .teams-table {
        width: 100%;
        border-collapse: collapse;
        color: white;
    }

        .teams-table th,
        .teams-table td {
            padding: 12px 15px;
            text-align: right;
        }

        .teams-table th {
            background-color: #333;
            font-weight: bold;
            border-bottom: 2px solid #555;
        }

        .teams-table tbody tr {
            border-bottom: 1px solid #444;
            transition: background-color 0.3s;
        }

            .teams-table tbody tr:hover {
                background-color: #333;
            }

    .status-indicator {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.85rem;
    }

        .status-indicator.inactive {
            background-color: rgba(220, 53, 69, 0.2);
            color: #ff5a5a;
        }

    .no-teams {
        text-align: center;
        padding: 30px;
        font-style: italic;
        color: #999;
    }

    .loading-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px 0;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--primary-red);
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    private List<TeamDto> BlacklistedTeams = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var teams = await TeamService.GetBlacklistedTeamsAsync();
            BlacklistedTeams = teams.Select(t => new TeamDto
            {
                TeamID = t.TeamID,
                TeamName = t.TeamName,
                Description = t.Description,
                IsActive = t.IsActive
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blacklisted teams: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
}

