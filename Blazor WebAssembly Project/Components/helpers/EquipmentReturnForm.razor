@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@using Blazor_WebAssembly.Models.Team
@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService
@inject ILogger<EquipmentReturnForm> Logger

<h2 class="text-center text-xl font-bold mb-6 text-white">החזרת ציוד</h2>

<div class="return-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>טוען נתונים...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert-danger mb-4">
            <p>@errorMessage</p>
            <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
        </div>
    }
    else
    {
        <div class="form-group">
            <label class="input-label">בחר צוות</label>
            <select @bind="SelectedTeamId" @bind:after="TeamSelected" class="form-control">
                <option value="">בחר צוות</option>
                @if (Teams != null)
                {
                    @foreach (var team in Teams)
                    {
                        <option value="@team.TeamID">@team.TeamName</option>
                    }
                }
            </select>
        </div>

        @if (SelectedTeamId.HasValue && SelectedTeamId > 0)
        {
            <div class="form-group">
                <label class="input-label">בחר ציוד להחזרה</label>
                <select @bind="SelectedEquipmentId" class="form-control">
                    <option value="">בחר ציוד</option>
                    @if (CheckedOutEquipment != null && CheckedOutEquipment.Any())
                    {
                        @foreach (var item in CheckedOutEquipment)
                        {
                            <option value="@item.EquipmentID">@item.Name</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                <label class="input-label">מצב הציוד</label>
                <select @bind="EquipmentCondition" class="form-control">
                    <option value="Good">תקין</option>
                    <option value="Damaged">ניזוק</option>
                    <option value="NeedsRepair">דרוש תיקון</option>
                </select>
            </div>

            <div class="form-group">
                <label class="input-label">הערות</label>
                <textarea @bind="ReturnNotes" class="form-control" rows="3" placeholder="הערות נוספות לגבי הציוד המוחזר"></textarea>
            </div>

            <button class="btn-submit" @onclick="ReturnEquipment" disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null)">
                @if (isSubmitting)
                {
                    <span>מחזיר ציוד...</span>
                }
                else
                {
                    <span>החזר ציוד</span>
                }
            </button>
        }
        else if (SelectedTeamId.HasValue && SelectedTeamId > 0 && (CheckedOutEquipment == null || !CheckedOutEquipment.Any()))
        {
            <div class="alert-info mt-3">
                <p>לצוות זה אין ציוד שהושאל וניתן להחזיר</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="@(IsError ? "alert-danger" : "alert-success") mt-4">
                <p>@Message</p>
            </div>
        }
    }
</div>

<style>
    .return-container {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        max-width: 500px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .input-label {
        display: block;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: #cccccc;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: #ffffff;
        transition: all 0.3s;
    }

        .form-control:focus {
            outline: 2px solid #d32f2f;
            background-color: #555;
        }

    .btn-submit, .btn-action {
        background-color: #d32f2f;
        color: #ffffff;
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s;
    }

        .btn-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-submit:hover:not(:disabled), .btn-action:hover {
            background-color: #b71c1c;
        }

    .alert-success {
        background-color: rgba(40, 167, 69, 0.2);
        color: #28a745;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid rgba(40, 167, 69, 0.3);
        text-align: center;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid rgba(220, 53, 69, 0.3);
        text-align: center;
    }

    .alert-info {
        background-color: rgba(13, 202, 240, 0.2);
        color: #0dcaf0;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid rgba(13, 202, 240, 0.3);
        text-align: center;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #d32f2f;
        animation: spin 1s ease-in-out infinite;
        margin-bottom: 1rem;
    }

    keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }
</style>

@code {
    private List<TeamDto> Teams = new();
    private List<EquipmentModel> CheckedOutEquipment = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private bool IsError = false;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string EquipmentCondition = "Good";
    private string ReturnNotes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentReturnForm component...");
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams...");
            var teams = await TeamService.GetAllTeamsAsync();
            if (teams != null)
            {
                Teams = teams.Select(t => new TeamDto
                {
                    TeamID = t.TeamID,
                    TeamName = t.TeamName,
                    Description = t.Description ?? string.Empty,
                    IsActive = t.IsActive
                }).ToList();
                Logger.LogInformation($"Loaded {Teams.Count} teams.");
            }

            // Reset selections
            SelectedTeamId = null;
            SelectedEquipmentId = null;
            CheckedOutEquipment = new List<EquipmentModel>();
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading teams.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TeamSelected()
    {
        if (SelectedTeamId.HasValue && SelectedTeamId > 0)
        {
            try
            {
                Logger.LogInformation($"Team selected: {SelectedTeamId}. Loading checked-out equipment...");
                // Simulate API call to get checked-out equipment
                await Task.Delay(1);

                CheckedOutEquipment = new List<EquipmentModel>
                {
                    new EquipmentModel
                    {
                        EquipmentID = 101,
                        Name = "אוהל 4 אנשים",
                        Status = "בשימוש"
                    },
                    new EquipmentModel
                    {
                        EquipmentID = 102,
                        Name = "סיר בישול גדול",
                        Status = "בשימוש"
                    }
                };

                Logger.LogInformation($"Loaded {CheckedOutEquipment.Count} checked-out equipment items for team {SelectedTeamId}.");
            }
            catch (Exception ex)
            {
                errorMessage = $"שגיאה בטעינת ציוד: {ex.Message}";
                Logger.LogError(ex, $"Error loading checked-out equipment for team {SelectedTeamId}.");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private async Task ReturnEquipment()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
            return;

        isSubmitting = true;
        Message = null;
        IsError = false;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Returning equipment (ID: {SelectedEquipmentId}) for team {SelectedTeamId}...");
            // Simulate API call to return equipment
            await Task.Delay(1000);

            // Success message
            Message = "הציוד הוחזר בהצלחה!";
            IsError = false;
            Logger.LogInformation($"Equipment (ID: {SelectedEquipmentId}) returned successfully for team {SelectedTeamId}.");

            // Reset form
            await TeamSelected(); // Refresh the checked-out equipment list
            SelectedEquipmentId = null;
            ReturnNotes = string.Empty;
            EquipmentCondition = "Good";
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, $"Error returning equipment (ID: {SelectedEquipmentId}) for team {SelectedTeamId}.");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
