@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@using Blazor_WebAssembly.Models.Team
@using System.Text.Json
@using System.Security.Claims
@using Blazor_WebAssembly.Services.Extensions

@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService
@inject ILogger<EquipmentReturnForm> Logger
@inject IEquipmentRequestService EquipmentRequestService
@inject AuthenticationStateProvider AuthStateProvider
@inject IEquipmentReturnService EquipmentReturnService
@inject IJSRuntime JSRuntime

<link href="css/dashboard.css" rel="stylesheet" />

<h2 class="text-center text-xl font-bold mb-6">החזרת ציוד</h2>

<div class="tabs mb-4" role="tablist">
    <button class="tab @(ActiveTab == "return" ? "active" : "")" 
            @onclick='() => OnTabChanged("return")' 
            role="tab" 
            aria-selected="@(ActiveTab == "return")" 
            aria-controls="return-panel"
            id="return-tab">
        <i class="bi bi-box-arrow-in-left" aria-hidden="true"></i> החזרת ציוד
    </button>
    
    <button class="tab @(ActiveTab == "log" ? "active" : "")" 
            @onclick='() => OnTabChanged("log")' 
            role="tab" 
            aria-selected="@(ActiveTab == "log")" 
            aria-controls="log-panel"
            id="log-tab">
        <i class="bi bi-journal-text" aria-hidden="true"></i> לוג פעולות
    </button>
    <div class="tab-indicator" style="right: @TabIndicatorPosition; width: @TabIndicatorWidth"></div>
</div>

@if (ActiveTab == "return")
{
    <div id="return-panel" role="tabpanel" aria-labelledby="return-tab" class="dashboard-section slide-in">
        @if (isLoading)
        {
            <div class="loading-container" aria-live="polite">
                <div class="spinner" role="status"></div>
                <p>טוען נתונים...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger mb-4" role="alert">
                <p>@errorMessage</p>
                <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
            </div>
        }
        else
        {
            <div class="dashboard-grid grid-2-col">
                <div class="widget-container">
                    <div class="widget-header">
                        <h3 class="widget-title">פרטי החזרת ציוד</h3>
                        <div class="widget-actions">
                            <button class="btn-refresh" title="רענן נתונים" @onclick="LoadData" aria-label="רענן נתונים">
                                <i class="bi bi-arrow-clockwise" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="input-label" for="team-select">בחר צוות</label>
                        <div class="search-input-container">
                            <input id="team-search" class="search-bar" placeholder="חפש צוות" 
                                   @bind="TeamSearchQuery" @oninput="FilterTeams" aria-label="חיפוש צוות" />
                            <i class="bi bi-search search-icon" aria-hidden="true"></i>
                        </div>
                        <select id="team-select" @bind="SelectedTeamId" @bind:after="TeamSelected" 
                                class="form-control mt-2" aria-label="בחירת צוות">
                            <option value="">בחר צוות</option>
                            @foreach (var team in FilteredTeams)
                            {
                                <option value="@team.TeamID">@team.TeamName</option>
                            }
                        </select>
                    </div>

                    @if (SelectedTeamId.HasValue && SelectedTeamId > 0)
                    {
                        if (CheckedOutEquipment.Any())
                        {
                            <div class="form-group">
                                <label class="input-label" for="equipment-select">בחר ציוד להחזרה</label>
                                <div class="search-input-container">
                                    <input id="equipment-search" class="search-bar" placeholder="חפש ציוד" 
                                           @bind="EquipmentSearchQuery" @oninput="FilterEquipment" aria-label="חיפוש ציוד" />
                                    <i class="bi bi-search search-icon" aria-hidden="true"></i>
                                </div>
                                <select id="equipment-select" @bind="SelectedEquipmentId" @bind:after="ResetEquipmentSelection"
                                        class="form-control mt-2" aria-label="בחירת ציוד להחזרה">
                                    <option value="">בחר ציוד</option>
                                    @if (FilteredCheckedOutEquipment.Any())
                                    {
                                        @foreach (var item in FilteredCheckedOutEquipment)
                                        {
                                            <option value="@item.EquipmentID">@item.Name (ID: @item.EquipmentID)</option>
                                        }
                                    }
                                </select>

                            </div>

                            <div class="form-group">
                                <label class="input-label" for="return-quantity">כמות להחזרה</label>
                                <input id="return-quantity" class="form-control" type="number" 
                                       @bind="ReturnQuantity" min="1" max="@GetCheckedOutQuantity(SelectedEquipmentId)" 
                                       placeholder="הזן כמות להחזרה" aria-label="כמות להחזרה" />
                                <small class="text-muted">כמות מקסימלית: @GetCheckedOutQuantity(SelectedEquipmentId)</small>
                            </div>

                            <div class="form-group">
                                <label class="input-label" for="condition-select">מצב הציוד</label>
                                <select id="condition-select" @bind="EquipmentCondition" class="form-control" aria-label="בחירת מצב הציוד">
                                    <option value="Good">תקין</option>
                                    <option value="Damaged">ניזוק</option>
                                    <option value="NeedsRepair">דרוש תיקון</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="input-label" for="return-notes">הערות</label>
                                <textarea id="return-notes" @bind="ReturnNotes" class="form-control" rows="3" 
                                          placeholder="הערות נוספות לגבי הציוד המוחזר" aria-label="הערות להחזרה"></textarea>
                            </div>

                            <button class="btn-submit" @onclick="ReturnEquipment" 
                                    disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null || ReturnQuantity <= 0 || ReturnQuantity > GetCheckedOutQuantity(SelectedEquipmentId))"
                                    aria-busy="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <div class="inline-flex items-center">
                                        <div class="spinner spinner-sm mr-2" aria-hidden="true"></div>
                                        <span>מחזיר ציוד...</span>
                                    </div>
                                }
                                else
                                {
                                    <i class="bi bi-box-arrow-in-left mr-2" aria-hidden="true"></i>
                                    <span>החזר ציוד</span>
                                }
                            </button>

                            @if (ReturnQuantity > GetCheckedOutQuantity(SelectedEquipmentId))
                            {
                                <div class="alert-danger mt-2">
                                    <p>הכמות המבוקשת גדולה מהכמות שהושאלה</p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert-info mt-3" role="status">
                                <p>לצוות זה אין ציוד שהושאל וניתן להחזיר</p>
                            </div>
                        }
                    }

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="@(IsError ? "alert-danger" : "alert-success") mt-4" role="alert" aria-live="assertive">
                            <p>@Message</p>
                        </div>
                    }

                </div>

                @if (SelectedTeamId.HasValue && SelectedTeamId > 0)
                {
                    <div class="widget-container">
                        <div class="widget-header">
                            <h3 class="widget-title">ציוד בהשאלה לצוות</h3>
                            <div class="widget-actions">
                                <button class="btn-refresh" title="רענן רשימה" @onclick="TeamSelected" aria-label="רענן רשימה">
                                    <i class="bi bi-arrow-clockwise" aria-hidden="true"></i>
                                </button>
                                <div class="flex gap-2">
                                    <button class="btn-icon @(viewMode == ViewMode.List ? "active" : "")" 
                                            title="תצוגת רשימה" @onclick="() => viewMode = ViewMode.List"
                                            aria-label="שנה לתצוגת רשימה" aria-pressed="@(viewMode == ViewMode.List)">
                                        <i class="bi bi-list-ul" aria-hidden="true"></i>
                                    </button>
                                    <button class="btn-icon @(viewMode == ViewMode.Cards ? "active" : "")" 
                                            title="תצוגת קלפים" @onclick="() => viewMode = ViewMode.Cards"
                                            aria-label="שנה לתצוגת קלפים" aria-pressed="@(viewMode == ViewMode.Cards)">
                                        <i class="bi bi-grid-3x3-gap" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                        </div>

                        @if (!CheckedOutEquipment.Any())
                        {
                            <div class="empty-state" role="status">
                                <i class="bi bi-box-seam empty-icon" aria-hidden="true"></i>
                                <p>אין ציוד בהשאלה לצוות זה</p>
                            </div>
                        }
                        else
                        {
                            <div class="info-bar">
                                <span class="records-count" role="status">@CheckedOutEquipment.Count פריטים בהשאלה לצוות</span>
                                @if (CheckedOutEquipment.Count > 1)
                                {
                                    <button class="btn-action btn-sm" @onclick="ReturnAllEquipment" 
                                            disabled="@isSubmitting" aria-label="החזר את כל הציוד">
                                        <i class="bi bi-box-arrow-in-left" aria-hidden="true"></i> החזר הכל
                                    </button>
                                }
                            </div>

                            @if (viewMode == ViewMode.List)
                            {
                                <div class="table-responsive">
                                    <table class="history-table" role="grid" aria-label="ציוד בהשאלה">
                                        <thead>
                                            <tr>
                                                <th scope="col">שם פריט</th>
                                                <th scope="col">מספר סידורי</th>
                                                <th scope="col">כמות</th>
                                                <th scope="col">מיקום</th>
                                                <th scope="col">תאריך השאלה</th>
                                                <th scope="col">פעולות</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in CheckedOutEquipment)
                                            {
                                                <tr class="@(SelectedEquipmentId == item.EquipmentID ? "selected-row" : "")" 
                                                    aria-selected="@(SelectedEquipmentId == item.EquipmentID)">
                                                    <td>@item.Name</td>
                                                    <td>@(string.IsNullOrEmpty(item.SerialNumber) ? "-" : item.SerialNumber)</td>
                                                    <td>@item.Quantity</td>
                                                    <td>@item.StorageLocation</td>
                                                    <td>@(GetCheckoutDate(item.EquipmentID))</td>
                                                    <td>
                                                        <button class="btn-action btn-sm" @onclick="() => QuickReturn(item)" 
                                                                aria-label="החזר @item.Name">
                                                            <i class="bi bi-box-arrow-in-left" aria-hidden="true"></i> החזר
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="dashboard-cards" role="grid" aria-label="ציוד בהשאלה בתצוגת קלפים">
                                    @foreach (var item in CheckedOutEquipment)
                                    {
                                        <div class="dashboard-card @(SelectedEquipmentId == item.EquipmentID ? "primary" : "")"
                                             role="gridcell" aria-selected="@(SelectedEquipmentId == item.EquipmentID)">
                                            <div class="card-header">
                                                <div>
                                                    <h3 class="card-title">@item.Name</h3>
                                                    <p class="card-subtitle">@(string.IsNullOrEmpty(item.SerialNumber) ? "ללא מספר סידורי" : $"סידורי: {item.SerialNumber}")</p>
                                                </div>
                                                <div class="card-icon">
                                                    <i class="bi bi-box-seam" aria-hidden="true"></i>
                                                </div>
                                            </div>
                                            <div class="card-content">
                                                <div class="flex items-center justify-between mb-2">
                                                    <span>מיקום:</span>
                                                    <span>@item.StorageLocation</span>
                                                </div>
                                                <div class="flex items-center justify-between mb-2">
                                                    <span>כמות:</span>
                                                    <span>@item.Quantity</span>
                                                </div>
                                                <div class="flex items-center justify-between mb-2">
                                                    <span>הושאל בתאריך:</span>
                                                    <span>@GetCheckoutDate(item.EquipmentID)</span>
                                                </div>
                                                @if (item.Value > 0)
                                                {
                                                    <div class="flex items-center justify-between mb-2">
                                                        <span>ערך:</span>
                                                        <span>@item.Value.ToString("N0") ₪</span>
                                                    </div>
                                                }
                                            </div>
                                            <div class="card-footer">
                                                <button class="btn-action w-full" @onclick="() => QuickReturn(item)" 
                                                        aria-label="החזר @item.Name">
                                                    <i class="bi bi-box-arrow-in-left" aria-hidden="true"></i> החזר ציוד
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
}
else if (ActiveTab == "history")
{
    <div id="history-panel" role="tabpanel" aria-labelledby="history-tab" class="dashboard-section slide-in">
        <div class="widget-header">
            <h3 class="widget-title">היסטורית ציוד</h3>
            <div class="widget-actions">
                <button class="btn-refresh" title="רענן רשימה" @onclick="LoadHistory" aria-label="טען היסטוריה מחדש">
                    <i class="bi bi-arrow-clockwise" aria-hidden="true"></i>
                </button>
            </div>
        </div>

        <div class="search-filters">
            <div class="search-input-container">
                <input type="text"
                       placeholder="חיפוש לפי צוות"
                       class="search-bar"
                       @bind="HistoryTeamFilter"
                       @oninput="FilterHistory" 
                       aria-label="חיפוש לפי צוות" />
                <i class="bi bi-search search-icon" aria-hidden="true"></i>
            </div>
            <div class="search-input-container">
                <input type="text"
                       placeholder="חיפוש לפי ציוד"
                       class="search-bar"
                       @bind="HistoryEquipmentFilter"
                       @oninput="FilterHistory" 
                       aria-label="חיפוש לפי ציוד" />
                <i class="bi bi-search search-icon" aria-hidden="true"></i>
            </div>
            <div class="search-field">
                <select class="form-control" @bind="ConditionFilter" @bind:after="FilterHistory" aria-label="סינון לפי מצב ציוד">
                    <option value="">כל המצבים</option>
                    <option value="Good">תקין</option>
                    <option value="Damaged">ניזוק</option>
                    <option value="NeedsRepair">דרוש תיקון</option>
                </select>
            </div>
        </div>

        <div class="info-bar">
            <span class="records-count" role="status">@FilteredCheckoutHistory.Count רשומות מתוך @CheckoutHistory.Count</span>
            <div class="flex gap-2">
                <button class="btn-icon @(showReturned == null ? "active" : "")" 
                        title="הצג הכל" @onclick="() => ToggleReturnedFilter(null)"
                        aria-label="הצג את כל הציוד" aria-pressed="@(showReturned == null)">
                    <i class="bi bi-grid-3x3" aria-hidden="true"></i>
                </button>
                <button class="btn-icon @(showReturned == true ? "active" : "")" 
                        title="הצג מוחזרים בלבד" @onclick="() => ToggleReturnedFilter(true)"
                        aria-label="הצג ציוד מוחזר בלבד" aria-pressed="@(showReturned == true)">
                    <i class="bi bi-check-circle" aria-hidden="true"></i>
                </button>
                <button class="btn-icon @(showReturned == false ? "active" : "")" 
                        title="הצג לא מוחזרים בלבד" @onclick="() => ToggleReturnedFilter(false)"
                        aria-label="הצג ציוד שלא הוחזר" aria-pressed="@(showReturned == false)">
                    <i class="bi bi-exclamation-circle" aria-hidden="true"></i>
                </button>
            </div>
        </div>

        @if (isLoadingHistory)
        {
            <div class="loading-container" aria-live="polite">
                <div class="spinner" role="status"></div>
                <p>טוען היסטורית הוצעות והחזרות...</p>
            </div>
        }
        else if (FilteredCheckoutHistory.Count == 0)
        {
            <div class="empty-state" role="status">
                <i class="bi bi-clock-history empty-icon" aria-hidden="true"></i>
                <p class="no-history">אין היסטורית הוצעות והחזרות</p>
                <div class="empty-buttons">
                    <button class="btn-action" @onclick="LoadHistory">טען היסטוריה</button>
                </div>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="history-table" role="grid" aria-label="היסטורית ציוד">
                    <thead>
                        <tr>
                            <th scope="col">צוות</th>
                            <th scope="col">ציוד</th>
                            <th scope="col">כמות</th>
                            <th scope="col">תאריך הוצאה</th>
                            <th scope="col">תאריך החזרה</th>
                            <th scope="col">סטטוס</th>
                            <th scope="col">מצב ציוד</th>
                            <th scope="col">משתמש</th>
                            <th scope="col">תפקיד</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in FilteredCheckoutHistory)
                        {
                            <tr class="@(record.ReturnedAt.HasValue ? "returned" : "checked-out")" 
                                @onclick="() => ShowRecordDetails(record)"
                                tabindex="0"
                                @onkeydown="@(e => OnKeyPressRecordRow(e, record))"
                                role="row">
                                <td>@record.TeamName</td>
                                <td>@record.EquipmentName</td>
                                <td>@record.Quantity</td>
                                <td>@(record.CheckedOutAt.HasValue? record.CheckedOutAt.Value.ToString("dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture) : "-")</td>
                                <td>@(record.ReturnedAt.HasValue? record.ReturnedAt.Value.ToString("dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture) : "-")</td>
                                <td>
                                    <span class="status-badge @(record.ReturnedAt.HasValue ? "returned-badge" : "checked-out-badge")">
                                        @(record.ReturnedAt.HasValue ? "הוחזר" : "לא הוחזר")
                                    </span>
                                </td>
                                <td>
                                    @if (record.ReturnedAt.HasValue)
                                    {
                                        <span class="status-badge @GetConditionBadgeClass(record.ItemCondition)">
                                            @GetConditionText(record.ItemCondition)
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <div class="user-info">
                                        @if (!string.IsNullOrEmpty(record.UserName))
                                        {
                                            <span class="username">@record.UserName</span>
                                        }
                                        else if (record.UserId > 0)
                                        {
                                            <span>משתמש #@record.UserId</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">לא ידוע</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(record.UserRole))
                                    {
                                        <span class="role-badge">@FormatUserRole(record.UserRole)</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
else if (ActiveTab == "log")
{
    <div id="log-panel" role="tabpanel" aria-labelledby="log-tab" class="dashboard-section slide-in">
        <div class="widget-header">
            <h3 class="widget-title">לוג פעולות</h3>
            <div class="widget-actions">
                <button class="btn-icon" title="נקה לוג" @onclick="ClearLogs" aria-label="נקה לוג פעולות">
                    <i class="bi bi-trash" aria-hidden="true"></i>
                </button>
                <button class="btn-icon" title="יצא לקובץ" @onclick="ExportLogs" aria-label="יצא לוג לקובץ">
                    <i class="bi bi-download" aria-hidden="true"></i>
                </button>
            </div>
        </div>

        @if (ActionLogs.Count == 0)
        {
            <div class="empty-state" role="status">
                <i class="bi bi-journal-text empty-icon" aria-hidden="true"></i>
                <p class="no-log">אין לוג פעולות להצגה</p>
            </div>
        }
        else
        {
            <div class="search-filters mb-3">
                <div class="search-input-container">
                    <input type="text"
                           placeholder="חפש בלוג פעולות..."
                           class="search-bar"
                           @bind="logSearchQuery"
                           @oninput="FilterLogs" 
                           aria-label="חיפוש בלוג פעולות" />
                    <i class="bi bi-search search-icon" aria-hidden="true"></i>
                </div>
            </div>

            <ul class="log-list" role="log" aria-label="לוג פעולות">
                @foreach (var log in filteredLogs)
                {
                    <li class="log-item">
                        <span class="log-timestamp">@(log.Timestamp?.ToString("dd/MM HH:mm:ss") ?? "-")</span>
                        <span class="log-message">@log.Message</span>
                    </li>
                }
            </ul>
        }
    </div>
}

@if (showReturnModal && selectedQuickReturnItem != null)
{
    <div class="modal-backdrop" @onclick="CloseModal" tabindex="-1"></div>
    <div class="modal-container" @onclick:stopPropagation="true" 
         role="dialog" aria-labelledby="quick-return-title" aria-modal="true">
        <div class="modal-header">
            <h3 id="quick-return-title">החזרת ציוד מהירה</h3>
            <button class="modal-close" @onclick="CloseModal" aria-label="סגור חלון">×</button>
        </div>
        <div class="modal-body">
            <p class="mb-3">אתה עומד להחזיר את הפריט: <strong>@selectedQuickReturnItem.Name</strong></p>
            
            <div class="form-group">
                <label class="input-label" for="quick-quantity">כמות להחזרה</label>
                <input id="quick-quantity" class="form-control" type="number" 
                       @bind="quickReturnQuantity" min="1" max="@selectedQuickReturnItem.Quantity" 
                       placeholder="הזן כמות להחזרה" aria-label="כמות להחזרה" />
                <small class="text-muted">כמות מקסימלית: @selectedQuickReturnItem.Quantity</small>
            </div>

            <div class="form-group">
                <label class="input-label" for="quick-condition">מצב הציוד</label>
                <select id="quick-condition" @bind="quickReturnCondition" class="form-control" aria-label="בחר מצב ציוד">
                    <option value="Good">תקין</option>
                    <option value="Damaged">ניזוק</option>
                    <option value="NeedsRepair">דרוש תיקון</option>
                </select>
            </div>

            <div class="form-group">
                <label class="input-label" for="quick-notes">הערות</label>
                <textarea id="quick-notes" @bind="quickReturnNotes" class="form-control" rows="3" 
                          placeholder="הערות נוספות לגבי הציוד המוחזר" aria-label="הערות להחזרה"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action" @onclick="ProcessQuickReturn" 
                    disabled="@(isSubmitting || quickReturnQuantity <= 0 || quickReturnQuantity > selectedQuickReturnItem.Quantity)" aria-busy="@isSubmitting">
                @if (isSubmitting)
                {
                    <div class="inline-flex items-center">
                        <div class="spinner spinner-sm mr-2" aria-hidden="true"></div>
                        <span>מחזיר...</span>
                    </div>
                }
                else
                {
                    <i class="bi bi-box-arrow-in-left mr-2" aria-hidden="true"></i>
                    <span>החזר ציוד</span>
                }
            </button>
        </div>
    </div>
}

@if (showReturnAllModal)
{
    <div class="modal-backdrop" @onclick="CloseModal" tabindex="-1"></div>
    <div class="modal-container" @onclick:stopPropagation="true" 
         role="dialog" aria-labelledby="return-all-title" aria-modal="true">
        <div class="modal-header">
            <h3 id="return-all-title">החזרת כל הציוד</h3>
            <button class="modal-close" @onclick="CloseModal" aria-label="סגור חלון">×</button>
        </div>
        <div class="modal-body">
            <p class="mb-3">אתה עומד להחזיר <strong>@CheckedOutEquipment.Count פריטים</strong> עבור הצוות <strong>@Teams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName</strong></p>

            <div class="form-group">
                <label class="input-label">בחר כמויות להחזרה:</label>
                @foreach (var item in CheckedOutEquipment)
                {
                    <div class="flex justify-between items-center mb-2 p-2 border-b">
                        <span>@item.Name</span>
                        <div>
                            <input type="number" class="form-control"
                                   value="@GetReturnQuantity(item)"
                                   @onchange="@(e => UpdateReturnQuantity(item, e))"
                                   min="0" max="@item.Quantity"
                                   style="width: 80px; display: inline-block;" />
                            <span class="mr-2">מתוך @item.Quantity</span>
                        </div>
                    </div>
                }
            </div>



            <div class="form-group">
                <label class="input-label" for="bulk-condition">מצב הציוד</label>
                <select id="bulk-condition" @bind="bulkReturnCondition" class="form-control" aria-label="בחר מצב ציוד">
                    <option value="Good">תקין</option>
                    <option value="Damaged">ניזוק</option>
                    <option value="NeedsRepair">דרוש תיקון</option>
                </select>
            </div>

            <div class="form-group">
                <label class="input-label" for="bulk-notes">הערות</label>
                <textarea id="bulk-notes" @bind="bulkReturnNotes" class="form-control" rows="3" 
                          placeholder="הערות נוספות לגבי הציוד המוחזר" aria-label="הערות להחזרת הציוד"></textarea>
            </div>

            <div class="alert-warning mt-3" role="alert">
                <p><i class="bi bi-exclamation-triangle" aria-hidden="true"></i> שים לב: פעולה זו תחזיר את כל הפריטים שנבחרו בבת אחת!</p>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action secondary" @onclick="CloseModal">ביטול</button>
            <button class="btn-action" @onclick="ProcessReturnAll"
                    disabled="@(isSubmitting || !CheckedOutEquipment.Any(e => e.GetReturnQuantity() > 0))" aria-busy="@isSubmitting">
                @if (isSubmitting)
                {
                    <div class="inline-flex items-center">
                        <div class="spinner spinner-sm mr-2" aria-hidden="true"></div>
                        <span>מחזיר...</span>
                    </div>
                }
                else
                {
                    <i class="bi bi-box-arrow-in-left mr-2" aria-hidden="true"></i>
                    <span>החזר הכל</span>
                }
            </button>

        </div>
    </div>
}

@if (showRecordDetailsModal && selectedRecordDetails != null)
{
    <div class="modal-backdrop" @onclick="CloseRecordDetailsModal" tabindex="-1"></div>
    <div class="modal-container" @onclick:stopPropagation="true" 
         role="dialog" aria-labelledby="record-details-title" aria-modal="true">
        <div class="modal-header">
            <h3 id="record-details-title">פרטי רשומה</h3>
            <button class="modal-close" @onclick="CloseRecordDetailsModal" aria-label="סגור חלון">×</button>
        </div>
        <div class="modal-body">
            <div class="record-details">
                <div class="detail-row">
                    <div class="detail-label">צוות:</div>
                    <div class="detail-value">@selectedRecordDetails.TeamName</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">ציוד:</div>
                    <div class="detail-value">@selectedRecordDetails.EquipmentName</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">כמות:</div>
                    <div class="detail-value">@selectedRecordDetails.Quantity</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">מזהה רשומה:</div>
                    <div class="detail-value">@selectedRecordDetails.Id</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">תאריך הוצאה:</div>
                    <div class="detail-value">@(selectedRecordDetails.CheckedOutAt.HasValue? selectedRecordDetails.CheckedOutAt.Value.ToString("dd/MM/yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture) : "-")</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">תאריך החזרה:</div>
                    <div class="detail-value">@(selectedRecordDetails.ReturnedAt.HasValue? selectedRecordDetails.ReturnedAt.Value.ToString("dd/MM/yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture) : "-")</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">סטטוס:</div>
                    <div class="detail-value">
                        <span class="status-badge @(selectedRecordDetails.ReturnedAt.HasValue ? "returned-badge" : "checked-out-badge")">
                            @(selectedRecordDetails.ReturnedAt.HasValue ? "הוחזר" : "לא הוחזר")
                        </span>
                    </div>
                </div>
                @if (selectedRecordDetails.ReturnedAt.HasValue)
                {
                    <div class="detail-row">
                        <div class="detail-label">מצב הציוד:</div>
                        <div class="detail-value">
                            <span class="status-badge @GetConditionBadgeClass(selectedRecordDetails.ItemCondition)">
                                @GetConditionText(selectedRecordDetails.ItemCondition)
                            </span>
                        </div>
                    </div>
                }
                <div class="detail-row">
                    <div class="detail-label">משתמש:</div>
                    <div class="detail-value">@(string.IsNullOrEmpty(selectedRecordDetails.UserName) ? "לא ידוע" : selectedRecordDetails.UserName)</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">תפקיד:</div>
                    <div class="detail-value">@FormatUserRole(selectedRecordDetails.UserRole)</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">הערות:</div>
                    <div class="detail-value notes-text">@(string.IsNullOrEmpty(selectedRecordDetails.ItemNotes) ? "-" : selectedRecordDetails.ItemNotes)</div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action" @onclick="CloseRecordDetailsModal">סגור</button>
        </div>
    </div>
}

@code {
    private string TabIndicatorPosition => $"{GetTabIndicatorPosition()}px";
    private string TabIndicatorWidth => $"{GetTabIndicatorWidth()}px";

    // Methods to calculate tab indicator position and width
    private int GetTabIndicatorPosition()
    {
        return ActiveTab switch
        {
            "return" => 0,
            "history" => 120, // Adjust based on your tab width
            "log" => 240,     // Adjust based on your tab width
            _ => 0
        };
    }

    private int GetTabIndicatorWidth()
    {
        return 120; // Set to the width of your tabs
    }
    private enum ViewMode { List, Cards }


    private string ActiveTab = "return";
    private List<TeamDto> Teams = new();
    private List<TeamDto> FilteredTeams = new();
    private List<EquipmentModel> CheckedOutEquipment = new();
    private List<EquipmentModel> FilteredCheckedOutEquipment = new();
    private List<ExtendedCheckoutRecordDto> CheckoutHistory = new();
    private List<ExtendedCheckoutRecordDto> FilteredCheckoutHistory = new();
    private Dictionary<string, List<ExtendedCheckoutRecordDto>> HistoryCache = new();
    private List<ActionLog> ActionLogs = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private bool IsError = false;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isLoadingHistory = false;
    private bool isSubmitting = false;
    private string EquipmentCondition = "Good";
    private string ReturnNotes = string.Empty;
    private string TeamSearchQuery = string.Empty;
    private string EquipmentSearchQuery = string.Empty;
    private string HistoryTeamFilter = string.Empty;
    private string HistoryEquipmentFilter = string.Empty;
    private string ConditionFilter = string.Empty;
    private string logSearchQuery = string.Empty;
    private List<ActionLog> filteredLogs => string.IsNullOrWhiteSpace(logSearchQuery)
        ? ActionLogs
        : ActionLogs.Where(l => l.Message.Contains(logSearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    private ViewMode viewMode = ViewMode.List;
    private int CurrentUserId = 1; // Default user ID
    private bool? showReturned = null; // For filtering history by return status
    private DateTime lastHistoryRefresh = DateTime.MinValue;
    private TimeSpan historyRefreshThreshold = TimeSpan.FromMinutes(5);
    
    // Quantity-related properties
    private int ReturnQuantity = 1;

    // Record Details
    private bool showRecordDetailsModal = false;
    private ExtendedCheckoutRecordDto? selectedRecordDetails = null;

    // Quick return modal properties
    private bool showReturnModal = false;
    private EquipmentModel? selectedQuickReturnItem;
    private int quickReturnQuantity = 1;
    private string quickReturnCondition = "Good";
    private string quickReturnNotes = string.Empty;

    // Return all modal properties
    private bool showReturnAllModal = false;
    private string bulkReturnCondition = "Good";
    private string bulkReturnNotes = string.Empty;

    // Extended DTO to include condition and notes
    // In EquipmentReturnForm.razor
    private class ExtendedCheckoutRecordDto : CheckoutRecordDto
    {
        // Use the new keyword to explicitly hide the base class member
        public new string? ItemCondition { get; set; } = "Good";
        public new string ItemNotes { get; set; } = string.Empty;
    }


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentReturnForm component...");

        // Reset selections to ensure clean state
        SelectedTeamId = null;
        SelectedEquipmentId = null;

        await LoadData();

        // Get current user ID from authentication state if available
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.Claims
                    .FirstOrDefault(c => c.Type == "sub" || c.Type == ClaimTypes.NameIdentifier);

                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    CurrentUserId = userId;
                    Logger.LogInformation($"Current user ID: {userId}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Unable to retrieve current user ID from authentication state. Using default.");
        }

        // Register JavaScript function for saving files
        await EnsureSaveAsFileJsFunction();
    }


    private async Task EnsureSaveAsFileJsFunction()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.saveAsFile = function (filename, data) {
                    var blob = new Blob([data], { type: 'text/plain' });
                    var url = window.URL.createObjectURL(blob);
                    var a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                }");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing JavaScript save function");
        }
    }

    private async Task OnTabChanged(string tab)
    {
        Logger.LogInformation($"Tab changed to: {tab}");
        ActiveTab = tab;

        // Add a slight delay for the animation to complete before loading data
        await Task.Delay(50);

        if (tab == "history")
        {
            // Only reload if history is empty or it's been more than the threshold time since last refresh
            if (CheckoutHistory.Count == 0 || DateTime.Now - lastHistoryRefresh > historyRefreshThreshold)
            {
                await LoadHistory();
            }
        }
    }

    private void OnKeyPressRecordRow(KeyboardEventArgs e, ExtendedCheckoutRecordDto record)
    {
        if (e.Code == "Enter" || e.Code == "Space")
        {
            ShowRecordDetails(record);
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams...");
            var teams = await TeamService.GetAllTeamsAsync();
            Teams = teams.Select(t => new TeamDto
            {
                TeamID = t.TeamID,
                TeamName = t.TeamName,
                Description = t.Description ?? string.Empty,
                IsActive = t.IsActive
            }).ToList();

            // Initialize filtered teams
            FilteredTeams = new List<TeamDto>(Teams);
            Logger.LogInformation($"Loaded {Teams.Count} teams.");

            // Reset selections
            SelectedTeamId = null;
            SelectedEquipmentId = null;
            CheckedOutEquipment = new List<EquipmentModel>();
            FilteredCheckedOutEquipment = new List<EquipmentModel>();
            AddLog("נטענו נתוני צוותים בהצלחה");
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading teams.");
            AddLog($"שגיאה בטעינת נתונים: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterTeams()
    {
        if (string.IsNullOrWhiteSpace(TeamSearchQuery))
        {
            FilteredTeams = new List<TeamDto>(Teams);
        }
        else
        {
            FilteredTeams = Teams
                .Where(t => t.TeamName.Contains(TeamSearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }

    private void FilterEquipment()
    {
        if (string.IsNullOrWhiteSpace(EquipmentSearchQuery))
        {
            FilteredCheckedOutEquipment = new List<EquipmentModel>(CheckedOutEquipment);
        }
        else
        {
            FilteredCheckedOutEquipment = CheckedOutEquipment
                .Where(e => e.Name.Contains(EquipmentSearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        StateHasChanged();
    }

    private void FilterLogs()
    {
        // Filtering is handled by the filteredLogs property
        StateHasChanged();
    }

    private void ResetEquipmentSelection()
    {
        // Add logging to track selection changes
        Logger.LogInformation($"ResetEquipmentSelection called with SelectedEquipmentId={SelectedEquipmentId}");

        // When a new equipment is selected, reset the condition and notes
        EquipmentCondition = "Good";
        ReturnNotes = string.Empty;
        ReturnQuantity = 1;

        // Verify the equipment ID was properly selected
        if (SelectedEquipmentId.HasValue && SelectedEquipmentId.Value > 0)
        {
            var selectedEquipment = CheckedOutEquipment.FirstOrDefault(e => e.EquipmentID == SelectedEquipmentId);
            if (selectedEquipment != null)
            {
                Logger.LogInformation($"Equipment selected: {selectedEquipment.Name} (ID: {selectedEquipment.EquipmentID})");
            }
            else
            {
                Logger.LogWarning($"Selected equipment ID {SelectedEquipmentId} not found in CheckedOutEquipment list");
            }
        }
        else if (SelectedEquipmentId.HasValue)
        {
            Logger.LogWarning($"Invalid SelectedEquipmentId: {SelectedEquipmentId}");
        }
        else
        {
            Logger.LogInformation("No equipment selected (SelectedEquipmentId is null)");
        }

        StateHasChanged();
    }


    private async Task TeamSelected()
    {
        if (SelectedTeamId.HasValue && SelectedTeamId.Value > 0)
        {
            try
            {
                Logger.LogInformation($"Team selected: {SelectedTeamId}. Loading checked-out equipment...");

                // Reset equipment selection
                SelectedEquipmentId = null;
                CheckedOutEquipment.Clear();
                FilteredCheckedOutEquipment.Clear();
                StateHasChanged();

                // First try with the standard service
                var equipment = await EquipmentRequestService.GetCheckedOutEquipmentByTeamAsync(SelectedTeamId.Value);

                // If no equipment was found, try the direct method as a fallback
                if (equipment == null || !equipment.Any())
                {
                    Logger.LogWarning($"First method returned no equipment for team {SelectedTeamId}. Trying fallback method...");
                    equipment = await GetTeamCheckedOutEquipmentDirectly(SelectedTeamId.Value);
                }

                // Initialize ReturnQuantity for each equipment
                if (equipment != null)
                {
                    InitializeReturnQuantities(equipment);
                    CheckedOutEquipment = equipment;

                    // Initialize filtered equipment
                    FilteredCheckedOutEquipment = new List<EquipmentModel>(CheckedOutEquipment);

                    Logger.LogInformation($"Loaded {CheckedOutEquipment.Count} checked-out equipment items for team {SelectedTeamId}.");

                    if (CheckedOutEquipment.Count > 0)
                    {
                        AddLog($"נטענו {CheckedOutEquipment.Count} פריטי ציוד לצוות {Teams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName}");
                    }
                    else
                    {
                        AddLog($"לצוות {Teams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName} אין פריטי ציוד להחזרה");
                    }
                }
                else
                {
                    CheckedOutEquipment = new List<EquipmentModel>();
                    FilteredCheckedOutEquipment = new List<EquipmentModel>();
                    Logger.LogWarning($"No equipment found for team {SelectedTeamId}");
                    AddLog($"לצוות {Teams.FirstOrDefault(t => t.TeamID == SelectedTeamId)?.TeamName} אין פריטי ציוד להחזרה");
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"שגיאה בטעינת ציוד: {ex.Message}";
                Logger.LogError(ex, $"Error loading checked-out equipment for team {SelectedTeamId}.");
                AddLog($"שגיאה בטעינת ציוד: {ex.Message}");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private async Task<List<EquipmentModel>> GetTeamCheckedOutEquipmentDirectly(int teamId)
    {
        try
        {
            Logger.LogInformation($"Directly fetching checked-out equipment for team {teamId}");
            var activeCheckouts = await CheckoutService.GetActiveCheckoutsAsync();

            if (activeCheckouts == null || !activeCheckouts.Any())
            {
                Logger.LogWarning("No active checkouts found in the system");
                return new List<EquipmentModel>();
            }

            var teamCheckouts = activeCheckouts
                .Where(c => c.TeamID == teamId)
                .ToList();

            Logger.LogInformation($"Found {teamCheckouts.Count} checkouts for team {teamId}");

            if (!teamCheckouts.Any())
                return new List<EquipmentModel>();

            var result = new List<EquipmentModel>();

            foreach (var checkout in teamCheckouts)
            {
                var equipment = await EquipmentService.GetEquipmentByIdAsync(checkout.EquipmentId);
                if (equipment != null)
                {
                    // Adjust the quantity to match what was checked out
                    equipment.Quantity = checkout.Quantity;
                    result.Add(equipment);
                    Logger.LogInformation($"Added equipment {equipment.Name} with quantity {equipment.Quantity}");
                }
                else
                {
                    Logger.LogWarning($"Could not find equipment with ID {checkout.EquipmentId}");
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error in GetTeamCheckedOutEquipmentDirectly: {ex.Message}");
            return new List<EquipmentModel>();
        }
    }



    private int GetCheckedOutQuantity(int? equipmentId)
    {
        if (!equipmentId.HasValue) return 0;
        return CheckedOutEquipment.FirstOrDefault(e => e.EquipmentID == equipmentId)?.Quantity ?? 0;
    }

    private string GetCheckoutDate(int equipmentId)
    {
        // If we have checkout history loaded
        if (CheckoutHistory.Any())
        {
            var record = CheckoutHistory.FirstOrDefault(h =>
                h.EquipmentId == equipmentId.ToString() &&
                h.TeamId == SelectedTeamId &&
                !h.ReturnedAt.HasValue);

            if (record != null)
            {
                return record.CheckedOutAt.HasValue
                                    ? record.CheckedOutAt.Value.ToString("dd/MM/yyyy HH:mm")
                                    : "לא ידוע";
            }
        }

        // Fallback
        return "לא ידוע";
    }

    private void ShowRecordDetails(ExtendedCheckoutRecordDto record)
    {
        selectedRecordDetails = record;
        showRecordDetailsModal = true;
        StateHasChanged();
    }

    private void CloseRecordDetailsModal()
    {
        showRecordDetailsModal = false;
        selectedRecordDetails = null;
        StateHasChanged();
    }

    private void QuickReturn(EquipmentModel equipment)
    {
        selectedQuickReturnItem = equipment;
        quickReturnQuantity = equipment.Quantity; // Default to full quantity
        quickReturnCondition = "Good";
        quickReturnNotes = string.Empty;
        showReturnModal = true;
        StateHasChanged();
    }

    private void ReturnAllEquipment()
    {
        if (!SelectedTeamId.HasValue || !CheckedOutEquipment.Any())
            return;

        // Initialize return quantities if needed
        foreach (var item in CheckedOutEquipment)
        {
            // Initialize to full quantity if not already set
            if (GetReturnQuantity(item) <= 0)
            {
                item.SetReturnQuantity(item.Quantity);
            }
        }

        showReturnAllModal = true;
        bulkReturnCondition = "Good";
        bulkReturnNotes = string.Empty;
        StateHasChanged();
    }


    private void CloseModal()
    {
        showReturnModal = false;
        showReturnAllModal = false;
        selectedQuickReturnItem = null;
        StateHasChanged();
    }

    private async Task ProcessQuickReturn()
    {
        if (selectedQuickReturnItem == null || !SelectedTeamId.HasValue)
            return;

        // Save a reference to the equipment ID before closing the modal
        int equipmentId = selectedQuickReturnItem.EquipmentID;
        string equipmentName = selectedQuickReturnItem.Name;

        if (quickReturnQuantity <= 0 || quickReturnQuantity > selectedQuickReturnItem.Quantity)
        {
            Message = $"כמות להחזרה אינה תקינה. ודא שהכמות בין 1 ל-{selectedQuickReturnItem.Quantity}";
            IsError = true;
            StateHasChanged();
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Quick returning equipment (ID: {equipmentId}, Quantity: {quickReturnQuantity}) for team {SelectedTeamId}...");

            // Save the quantity to return before potentially clearing the reference
            int quantityToReturn = quickReturnQuantity;
            bool fullReturn = quickReturnQuantity >= selectedQuickReturnItem.Quantity;

            // Use EquipmentReturnService's UpdateReturnedEquipmentByTeamAsync method with quantity
            bool isReturned = await EquipmentReturnService.UpdateReturnedEquipmentByTeamAsync(
                equipmentId,
                SelectedTeamId.Value,
                CurrentUserId,
                quantityToReturn,
                quickReturnCondition,
                quickReturnNotes
            );

            // Handle the result
            if (isReturned)
            {
                Message = $"הציוד הוחזר בהצלחה! כמות: {quantityToReturn}";
                IsError = false;
                Logger.LogInformation($"Equipment (ID: {equipmentId}, Quantity: {quantityToReturn}) returned successfully for team {SelectedTeamId}.");
                AddLog($"הציוד {equipmentName} הוחזר בהצלחה! כמות: {quantityToReturn}");

                // Force immediate history refresh
                await LoadHistory();

                // Close modal and clear the reference
                showReturnModal = false;

                // If all were returned, update the local list
                if (fullReturn)
                {
                    await TeamSelected(); // Full refresh of the equipment list
                }
                else
                {
                    // Update the item quantity in the local list
                    var item = CheckedOutEquipment.FirstOrDefault(e => e.EquipmentID == equipmentId);
                    if (item != null)
                    {
                        item.Quantity -= quantityToReturn;
                    }

                    // Also update the filtered list
                    var filteredItem = FilteredCheckedOutEquipment.FirstOrDefault(e => e.EquipmentID == equipmentId);
                    if (filteredItem != null)
                    {
                        filteredItem.Quantity -= quantityToReturn;
                    }

                    StateHasChanged();
                }

                // Update available equipment quantities through EquipmentService if needed
                await UpdateEquipmentAvailability(equipmentId);

                // Now we can safely clear the reference
                selectedQuickReturnItem = null;
            }
            else
            {
                Message = "שגיאה: לא ניתן להחזיר את הציוד.";
                IsError = true;
                Logger.LogError($"Failed to return equipment (ID: {equipmentId}) for team {SelectedTeamId}.");
                AddLog($"שגיאה בהחזרת ציוד: לא ניתן להחזיר את הציוד.");
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, $"Error returning equipment (ID: {equipmentId}) for team {SelectedTeamId}.");
            AddLog($"שגיאה בהחזרת ציוד: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            selectedQuickReturnItem = null; // Ensure reference is cleared
            StateHasChanged();
        }
    }



    private void UpdateReturnQuantity(EquipmentModel item, ChangeEventArgs e)
    {
        if (item == null || e.Value == null)
            return;

        if (int.TryParse(e.Value.ToString(), out int quantity))
        {
            // Use the extension method to set return quantity
            SetReturnQuantity(item, quantity);
            Logger.LogInformation($"Updated return quantity for {item.Name} to {quantity}");
            StateHasChanged();
        }
        else
        {
            Logger.LogWarning($"Invalid quantity value: {e.Value}");
        }
    }

    private async Task ProcessReturnAll()
    {
        if (!SelectedTeamId.HasValue || !CheckedOutEquipment.Any())
            return;

        isSubmitting = true;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Returning multiple equipment items for team {SelectedTeamId}...");
            int successCount = 0;
            int failCount = 0;
            List<int> updatedEquipmentIds = new List<int>();

            // Create a copy of the list to avoid issues during iteration
            var equipmentToReturn = CheckedOutEquipment
                .Where(e => e.GetReturnQuantity() > 0 && e.GetReturnQuantity() <= e.Quantity)
                .ToList();

            foreach (var equipment in equipmentToReturn)
            {
                try
                {
                    // Get the current return quantity for this equipment
                    int returnQuantity = equipment.GetReturnQuantity();

                    Logger.LogInformation($"Returning {returnQuantity} units of equipment ID {equipment.EquipmentID}");

                    bool isReturned = await EquipmentReturnService.UpdateReturnedEquipmentByTeamAsync(
                        equipment.EquipmentID,
                        SelectedTeamId.Value,
                        CurrentUserId,
                        returnQuantity,
                        bulkReturnCondition,
                        bulkReturnNotes
                    );

                    if (isReturned)
                    {
                        successCount++;
                        updatedEquipmentIds.Add(equipment.EquipmentID);
                        AddLog($"הוחזר בהצלחה: {equipment.Name}, כמות: {returnQuantity}");
                    }
                    else
                    {
                        failCount++;
                        AddLog($"שגיאה בהחזרת: {equipment.Name}");
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, $"Error returning equipment (ID: {equipment.EquipmentID})");
                    failCount++;
                    AddLog($"שגיאה בהחזרת {equipment.Name}: {ex.Message}");
                }
            }

            // Close modal
            showReturnAllModal = false;

            // Force immediate history refresh
            await LoadHistory();

            // Show result message
            if (successCount > 0)
            {
                Message = $"הוחזרו בהצלחה {successCount} פריטים" + (failCount > 0 ? $", נכשלו {failCount} פריטים" : "");
                IsError = failCount > 0;
                Logger.LogInformation($"Bulk return completed: {successCount} successful, {failCount} failed");
                AddLog($"הוחזרו בהצלחה {successCount} פריטים" + (failCount > 0 ? $", נכשלו {failCount} פריטים" : ""));

                // Refresh equipment list
                await TeamSelected();

                // Update available equipment quantities
                foreach (var id in updatedEquipmentIds)
                {
                    await UpdateEquipmentAvailability(id);
                }
            }
            else
            {
                Message = "שגיאה: לא ניתן להחזיר את הציוד";
                IsError = true;
                Logger.LogError($"Bulk return failed completely for team {SelectedTeamId}");
                AddLog($"שגיאה בהחזרת ציוד: לא ניתן להחזיר את הציוד");
            }
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, $"Error in bulk return process for team {SelectedTeamId}");
            AddLog($"שגיאה בהחזרת ציוד מרובה: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task<bool> ManualReturnEquipmentAsync(int equipmentId, int teamId, int userId, int quantity, string condition, string notes)
    {
        try
        {
            // Log the return attempt details
            Logger.LogInformation($"Manual return attempt for equipment ID {equipmentId}, team ID {teamId}, quantity {quantity}");

            // Use the UpdateReturnedEquipmentByTeamAsync method that we know exists in the interface
            // This is the only method we have based on the error, so we'll use it directly
            bool result = await EquipmentReturnService.UpdateReturnedEquipmentByTeamAsync(
                equipmentId,
                teamId,
                userId,
                quantity,
                condition,
                notes
            );

            Logger.LogInformation($"Manual return result: {result}");
            return result;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Manual return attempt failed");
            return false;
        }
    }

    private async Task ReturnEquipment()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
        {
            Message = "אנא בחר ציוד וצוות להחזרה";
            IsError = true;
            return;
        }

        // Additional validation check - don't proceed if SelectedEquipmentId is null (a belt-and-suspenders approach)
        if (SelectedEquipmentId == null)
        {
            Message = "לא נבחר ציוד. אנא בחר ציוד להחזרה";
            IsError = true;
            Logger.LogWarning("ReturnEquipment was called with null SelectedEquipmentId");
            return;
        }

        // Validate return quantity
        if (ReturnQuantity <= 0 || ReturnQuantity > GetCheckedOutQuantity(SelectedEquipmentId))
        {
            Message = "כמות להחזרה אינה תקינה.";
            IsError = true;
            return;
        }

        isSubmitting = true;
        Message = null;
        IsError = false;
        StateHasChanged();

        try
        {
            var equipmentId = SelectedEquipmentId.Value; // Cache the value to ensure consistency throughout the method

            Logger.LogInformation($"Returning equipment - Details: EquipmentID={equipmentId}, TeamID={SelectedTeamId}, UserID={CurrentUserId}, Quantity={ReturnQuantity}");

            bool isReturned = await EquipmentReturnService.UpdateReturnedEquipmentByTeamAsync(
                equipmentId,
                SelectedTeamId.Value,
                CurrentUserId,
                ReturnQuantity,
                EquipmentCondition,
                ReturnNotes
            );

            // Rest of your method remains the same
            if (isReturned)
            {
                var equipmentName = CheckedOutEquipment.FirstOrDefault(e => e.EquipmentID == equipmentId)?.Name ?? "ציוד";
                Message = $"{equipmentName} הוחזר בהצלחה! כמות: {ReturnQuantity}";
                IsError = false;
                Logger.LogInformation($"Equipment (ID: {equipmentId}, Quantity: {ReturnQuantity}) returned successfully for team {SelectedTeamId}.");
                AddLog($"הציוד {equipmentName} הוחזר בהצלחה! כמות: {ReturnQuantity}");

                // Force immediate history refresh
                await LoadHistory();

                // Update the equipment list
                await TeamSelected();

                // Update available equipment quantities
                await UpdateEquipmentAvailability(equipmentId);

                // Reset form fields
                SelectedEquipmentId = null;
                ReturnNotes = string.Empty;
                ReturnQuantity = 1;
                EquipmentCondition = "Good";
            }
            else
            {
                Message = "שגיאה: לא ניתן להחזיר את הציוד.";
                IsError = true;
                Logger.LogError($"Failed to return equipment (ID: {equipmentId}) for team {SelectedTeamId}.");
                AddLog($"שגיאה בהחזרת ציוד: לא ניתן להחזיר את הציוד.");
            }
        }
        catch (Exception ex)
        {
            // Enhanced error logging
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, $"Error returning equipment - Full details: EquipmentID={SelectedEquipmentId}, TeamID={SelectedTeamId}, UserID={CurrentUserId}, Quantity={ReturnQuantity}, Condition={EquipmentCondition}");
            AddLog($"שגיאה בהחזרת ציוד: {ex.Message}");

            // Try to get more details about the error
            if (ex.InnerException != null)
            {
                Logger.LogError($"Inner exception: {ex.InnerException.Message}");
                Logger.LogError($"Inner exception stack trace: {ex.InnerException.StackTrace}");
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }



    
    private async Task UpdateEquipmentAvailability(int equipmentId)
    {
        try
        {
            Logger.LogInformation($"Updating equipment availability for ID {equipmentId}");

            // Get the equipment details
            var equipment = await EquipmentService.GetEquipmentByIdAsync(equipmentId);
            if (equipment != null)
            {
                // Get updated total and available quantity
                int totalQuantity = equipment.Quantity;

                try
                {
                    int inUseQuantity = await CheckoutService.GetInUseQuantityForEquipmentAsync(equipmentId);
                    int availableQuantity = totalQuantity - inUseQuantity;

                    Logger.LogInformation($"Updated equipment availability for ID {equipmentId}: " +
                                       $"Total: {totalQuantity}, In Use: {inUseQuantity}, Available: {availableQuantity}");

                    // If equipment was previously unavailable but now has available items, update status
                    if (equipment.Status == "Unavailable" && availableQuantity > 0)
                    {
                        equipment.Status = "Available";
                        bool updated = await EquipmentService.UpdateEquipmentAsync(equipment);
                        Logger.LogInformation($"Equipment status update result: {updated}");

                        if (updated)
                        {
                            Logger.LogInformation($"Updated equipment status from Unavailable to Available for ID {equipmentId}");
                        }
                        else
                        {
                            Logger.LogWarning($"Failed to update equipment status for ID {equipmentId}");
                        }
                    }

                    AddLog($"עודכנה זמינות הציוד {equipment.Name}: זמין {availableQuantity} מתוך {totalQuantity}");
                }
                catch (Exception quantityEx)
                {
                    Logger.LogError(quantityEx, $"Error getting in-use quantity for equipment ID {equipmentId}");
                    AddLog($"שגיאה בעדכון זמינות ציוד {equipment.Name}: {quantityEx.Message}");
                }
            }
            else
            {
                Logger.LogWarning($"Equipment with ID {equipmentId} not found");
                AddLog($"לא נמצא ציוד עם מזהה {equipmentId} לעדכון זמינות");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating equipment availability for ID {equipmentId}");
            AddLog($"שגיאה בעדכון זמינות ציוד: {ex.Message}");
        }
    }


    private async Task LoadHistory()
    {
        isLoadingHistory = true;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading checkout history...");
            var history = await CheckoutService.GetCheckoutHistoryAsync();

            if (history != null)
            {
                CheckoutHistory = history.Select(h => new ExtendedCheckoutRecordDto
                {
                    Id = h.Id,
                    EquipmentId = h.EquipmentId,
                    TeamId = h.TeamId,
                    UserId = h.UserId,
                    CheckedOutAt = h.CheckedOutAt,
                    ReturnedAt = h.ReturnedAt,
                    EquipmentName = h.EquipmentName ?? "ציוד לא ידוע",
                    TeamName = h.TeamName ?? "צוות לא ידוע",
                    UserName = h.UserName ?? "משתמש לא ידוע",
                    UserRole = h.UserRole ?? "משתמש",
                    Quantity = h.Quantity,
                    ItemCondition = h.ItemCondition,
                    ItemNotes = h.ItemNotes
                }).ToList();

                FilterHistory(); // Apply any existing filters
                lastHistoryRefresh = DateTime.Now;
                Logger.LogInformation($"Loaded {CheckoutHistory.Count} history records");
                AddLog($"נטענו {CheckoutHistory.Count} רשומות היסטוריה");
            }
            else
            {
                CheckoutHistory = new List<ExtendedCheckoutRecordDto>();
                FilteredCheckoutHistory = new List<ExtendedCheckoutRecordDto>();
                Logger.LogWarning("No history records returned from service");
                AddLog("לא נמצאו רשומות היסטוריה");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading checkout history.");
            AddLog($"שגיאה בטעינת היסטורית הוצעות והחזרות: {ex.Message}");
        }
        finally
        {
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private void FilterHistory()
    {
        // Apply all filters (team, equipment, condition, return status)
        FilteredCheckoutHistory = CheckoutHistory
        .Where(h =>
            (string.IsNullOrEmpty(HistoryTeamFilter) ||
             (h.TeamName != null && h.TeamName.Contains(HistoryTeamFilter, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(HistoryEquipmentFilter) ||
             (h.EquipmentName != null && h.EquipmentName.Contains(HistoryEquipmentFilter, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(ConditionFilter) ||
             (h.ItemCondition != null && h.ItemCondition.Equals(ConditionFilter, StringComparison.OrdinalIgnoreCase))) &&
            (showReturned == null || h.ReturnedAt.HasValue == showReturned)
        )
        .ToList();

        StateHasChanged();
    }

    private void ToggleReturnedFilter(bool? status)
    {
        showReturned = status;
        FilterHistory();
    }

    private void ClearHistoryCache()
    {
        // Clear the history cache to force a refresh on next history tab visit
        HistoryCache.Clear();
        lastHistoryRefresh = DateTime.MinValue;
    }

    private string GetConditionBadgeClass(string? condition)
    {
        if (string.IsNullOrEmpty(condition))
            return "default-badge";

        return condition.ToLower() switch
        {
            "good" => "returned-badge",
            "damaged" => "warning-badge",
            "needsrepair" => "danger-badge",
            _ => "default-badge"
        };
    }

    private string GetConditionText(string? condition)
    {
        if (string.IsNullOrEmpty(condition))
            return "לא ידוע";

        return condition.ToLower() switch
        {
            "good" => "תקין",
            "damaged" => "ניזוק",
            "needsrepair" => "דרוש תיקון",
            _ => condition
        };
    }

    private string FormatUserRole(string? role)
    {
        if (string.IsNullOrEmpty(role))
            return "-";

        return role.ToLower() switch
        {
            "admin" => "מנהל",
            "warehousemanager" => "אחראי מחסן",
            "warehouseoperator" => "עובד מחסן",
            "user" => "משתמש",
            _ => role
        };
    }

    // Add a method to add logs to the action log list
    private void AddLog(string message)
    {
        ActionLogs.Insert(0, new ActionLog
        {
            Timestamp = DateTime.Now,
            Message = message
        });

        // Keep log size manageable
        if (ActionLogs.Count > 100)
        {
            ActionLogs.RemoveAt(ActionLogs.Count - 1);
        }
    }

    // Methods for log panel functionality
    private void ClearLogs()
    {
        ActionLogs.Clear();
        StateHasChanged();
    }

    private async Task ExportLogs()
    {
        if (ActionLogs.Count == 0)
        {
            return;
        }

        try
        {
            var fileName = $"equipment_return_log_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
            var logText = string.Join("\n", ActionLogs.Select(log => $"[{log.Timestamp?.ToString("dd/MM/yyyy HH:mm:ss") ?? "-"}] {log.Message}"));

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, logText);
            AddLog("יוצא קובץ לוג בהצלחה");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting logs");
            AddLog($"שגיאה ביצוא לוג: {ex.Message}");
        }
    }

    private class ActionLog
    {
        public DateTime? Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    
    private static readonly Dictionary<int, int> _returnQuantities = new Dictionary<int, int>();

    private static int GetReturnQuantity(EquipmentModel equipment)
    {
        if (equipment == null)
            return 0;

        return _returnQuantities.TryGetValue(equipment.EquipmentID, out var quantity) ? quantity : equipment.Quantity;
    }

    private static void SetReturnQuantity(EquipmentModel equipment, int quantity)
    {
        if (equipment == null)
            return;

        _returnQuantities[equipment.EquipmentID] = quantity;
    }

    private static void InitializeReturnQuantities(List<EquipmentModel> equipmentList)
    {
        if (equipmentList == null)
            return;

        foreach (var equipment in equipmentList)
        {
            // Only initialize if not already set
            if (!_returnQuantities.ContainsKey(equipment.EquipmentID))
            {
                _returnQuantities[equipment.EquipmentID] = equipment.Quantity;
            }
        }
    }


}
