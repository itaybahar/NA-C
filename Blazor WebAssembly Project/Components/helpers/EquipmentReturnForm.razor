@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Models.Equipment
@using Blazor_WebAssembly.Models.Team
@inject ITeamService TeamService
@inject IEquipmentService EquipmentService
@inject ICheckoutService CheckoutService
@inject ILogger<EquipmentReturnForm> Logger

<h2 class="text-center text-xl font-bold mb-6 text-white">החזרת ציוד</h2>

<div class="tabs mb-4">
    <button class="tab @(ActiveTab == "return" ? "active" : "")" @onclick='() => OnTabChanged("return")'>
        החזרת ציוד
    </button>
    <button class="tab @(ActiveTab == "log" ? "active" : "")" @onclick='() => OnTabChanged("log")'>
        לוג פעולות
    </button>
</div>

@if (ActiveTab == "return")
{
    <div class="return-container">
        @if (isLoading)
        {
            <div class="loading-container">
                <div class="spinner"></div>
                <p>טוען נתונים...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger mb-4">
                <p>@errorMessage</p>
                <button class="btn-action mt-2" @onclick="LoadData">נסה שנית</button>
            </div>
        }
        else
        {
            <div class="form-group">
                <label class="input-label">בחר צוות</label>
                <select @bind="SelectedTeamId" @bind:after="TeamSelected" class="form-control">
                    <option value="">בחר צוות</option>
                    @if (Teams != null)
                    {
                        @foreach (var team in Teams)
                        {
                            <option value="@team.TeamID">@team.TeamName</option>
                        }
                    }
                </select>
            </div>

            @if (SelectedTeamId.HasValue && SelectedTeamId > 0)
            {
                <div class="form-group">
                    <label class="input-label">בחר ציוד להחזרה</label>
                    <select @bind="SelectedEquipmentId" class="form-control">
                        <option value="">בחר ציוד</option>
                        @if (CheckedOutEquipment != null && CheckedOutEquipment.Any())
                        {
                            @foreach (var item in CheckedOutEquipment)
                            {
                                <option value="@item.EquipmentID">@item.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="input-label">מצב הציוד</label>
                    <select @bind="EquipmentCondition" class="form-control">
                        <option value="Good">תקין</option>
                        <option value="Damaged">ניזוק</option>
                        <option value="NeedsRepair">דרוש תיקון</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="input-label">הערות</label>
                    <textarea @bind="ReturnNotes" class="form-control" rows="3" placeholder="הערות נוספות לגבי הציוד המוחזר"></textarea>
                </div>

                <button class="btn-submit" @onclick="ReturnEquipment" disabled="@(isSubmitting || SelectedTeamId == null || SelectedEquipmentId == null)">
                    @if (isSubmitting)
                    {
                        <span>מחזיר ציוד...</span>
                    }
                    else
                    {
                        <span>החזר ציוד</span>
                    }
                </button>
            }
            else if (SelectedTeamId.HasValue && SelectedTeamId > 0 && (CheckedOutEquipment == null || !CheckedOutEquipment.Any()))
            {
                <div class="alert-info mt-3">
                    <p>לצוות זה אין ציוד שהושאל וניתן להחזיר</p>
                </div>
            }

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="@(IsError ? "alert-danger" : "alert-success") mt-4">
                    <p>@Message</p>
                </div>
            }
        }
    </div>
}
else if (ActiveTab == "log")
{
    <div class="log-container">
        <h3 class="text-center text-lg font-bold mb-4 text-white">לוג פעולות</h3>
        @if (ActionLogs.Count == 0)
        {
            <p class="no-log">אין לוג פעולות להצגה</p>
        }
        else
        {
            <ul class="log-list">
                @foreach (var log in ActionLogs)
                {
                    <li class="log-item">
                        <span class="log-timestamp">@log.Timestamp.ToString("HH:mm:ss")</span>
                        <span class="log-message">@log.Message</span>
                    </li>
                }
            </ul>
        }
    </div>
}

<style>
    /* Existing styles omitted for brevity */

    .log-container {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
        max-width: 800px;
        margin: 0 auto;
    }

    .log-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .log-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: 1px solid #444;
        color: white;
    }

        .log-item:last-child {
            border-bottom: none;
        }

    .log-timestamp {
        font-weight: bold;
        color: #d32f2f;
    }

    .log-message {
        flex: 1;
        margin-left: 10px;
    }

    .no-log {
        text-align: center;
        padding: 20px;
        font-style: italic;
        color: #999;
    }
</style>

@code {
    private string ActiveTab = "return";
    private List<TeamDto> Teams = new();
    private List<EquipmentModel> CheckedOutEquipment = new();
    private List<ActionLog> ActionLogs = new();
    private int? SelectedTeamId;
    private int? SelectedEquipmentId;
    private string? Message;
    private bool IsError = false;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string EquipmentCondition = "Good";
    private string ReturnNotes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing EquipmentReturnForm component...");
        await LoadData();
    }

    private async Task OnTabChanged(string tab)
    {
        Logger.LogInformation($"Tab changed to: {tab}");
        ActiveTab = tab;
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        Message = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation("Loading teams...");
            var teams = await TeamService.GetAllTeamsAsync();
            if (teams != null)
            {
                Teams = teams.Select(t => new TeamDto
                {
                    TeamID = t.TeamID,
                    TeamName = t.TeamName,
                    Description = t.Description ?? string.Empty,
                    IsActive = t.IsActive
                }).ToList();
                Logger.LogInformation($"Loaded {Teams.Count} teams.");
            }

            // Reset selections
            SelectedTeamId = null;
            SelectedEquipmentId = null;
            CheckedOutEquipment = new List<EquipmentModel>();
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת נתונים: {ex.Message}";
            Logger.LogError(ex, "Error loading teams.");
            AddLog($"שגיאה בטעינת נתונים: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TeamSelected()
    {
        if (SelectedTeamId.HasValue && SelectedTeamId > 0)
        {
            try
            {
                Logger.LogInformation($"Team selected: {SelectedTeamId}. Loading checked-out equipment...");
                // Simulate API call to get checked-out equipment
                await Task.Delay(1);

                CheckedOutEquipment = new List<EquipmentModel>
                {
                    new EquipmentModel
                    {
                        EquipmentID = 101,
                        Name = "אוהל 4 אנשים",
                        Status = "בשימוש"
                    },
                    new EquipmentModel
                    {
                        EquipmentID = 102,
                        Name = "סיר בישול גדול",
                        Status = "בשימוש"
                    }
                };

                Logger.LogInformation($"Loaded {CheckedOutEquipment.Count} checked-out equipment items for team {SelectedTeamId}.");
            }
            catch (Exception ex)
            {
                errorMessage = $"שגיאה בטעינת ציוד: {ex.Message}";
                Logger.LogError(ex, $"Error loading checked-out equipment for team {SelectedTeamId}.");
                AddLog($"שגיאה בטעינת ציוד: {ex.Message}");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private async Task ReturnEquipment()
    {
        if (!SelectedTeamId.HasValue || !SelectedEquipmentId.HasValue)
            return;

        isSubmitting = true;
        Message = null;
        IsError = false;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Returning equipment (ID: {SelectedEquipmentId}) for team {SelectedTeamId}...");
            // Simulate API call to return equipment
            await Task.Delay(1000);

            // Success message
            Message = "הציוד הוחזר בהצלחה!";
            IsError = false;
            Logger.LogInformation($"Equipment (ID: {SelectedEquipmentId}) returned successfully for team {SelectedTeamId}.");
            AddLog($"הציוד הוחזר בהצלחה! (TeamID: {SelectedTeamId}, EquipmentID: {SelectedEquipmentId})");

            // Reset form
            await TeamSelected(); // Refresh the checked-out equipment list
            SelectedEquipmentId = null;
            ReturnNotes = string.Empty;
            EquipmentCondition = "Good";
        }
        catch (Exception ex)
        {
            Message = $"שגיאה: {ex.Message}";
            IsError = true;
            Logger.LogError(ex, $"Error returning equipment (ID: {SelectedEquipmentId}) for team {SelectedTeamId}.");
            AddLog($"שגיאה בהחזרת ציוד: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void AddLog(string message)
    {
        ActionLogs.Insert(0, new ActionLog
        {
            Timestamp = DateTime.Now,
            Message = message
        });

        // Keep the log size manageable
        if (ActionLogs.Count > 50)
        {
            ActionLogs.RemoveAt(ActionLogs.Count - 1);
        }
    }

    private class ActionLog
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
