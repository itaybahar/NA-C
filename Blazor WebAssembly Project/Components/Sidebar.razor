@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<link href="css/dashboard.css" rel="stylesheet" />
<link href="css/themeToggle.css" rel="stylesheet" />
<link href="css/Sidebar.css" rel="stylesheet" />



<div>
    <!-- Sidebar Drawer (collapsible) -->
    <div class="sidebar-drawer @(IsCollapsed ? "collapsed" : "") @(IsDark ? "dark" : "light")" @onclick:stopPropagation>
        <!-- כפתור סגירה -->
        <button class="sidebar-close" @onclick="@(async () => await CloseSidebar())" title="סגור סיידבר">
            <i class="bi bi-x-lg"></i>
        </button>

        <!-- כפתור קריסה עגול -->
        <button class="sidebar-toggle" @onclick="@(async () => await ToggleCollapse())" title="הסתר/הצג סיידבר">
            <i class="bi @(IsCollapsed ? "bi-chevron-left" : "bi-chevron-right")"></i>
        </button>

        <!-- פרופיל למעלה -->
        <div class="sidebar-header">
            <span class="avatar">
                <i class="bi bi-person-circle" style="font-size:2rem;"></i>
            </span>
            @if (!IsCollapsed)
            {
                <div>
                    <div class="user-name">@userName</div>
                    <div class="user-role">@userRole</div>
                </div>
            }
        </div>

        <!-- שדה חיפוש -->
        <div class="sidebar-search">
            <input type="text" placeholder="חפש..." class="search-input" @bind="searchText" />
            <i class="bi bi-search"></i>
        </div>

        <!-- תפריט ניווט -->
        <nav class="sidebar-nav">
            <a class="nav-link @(ActiveTab == "dashboard" ? "active" : "")" @onclick='() => ChangeTab("dashboard")'>
                <i class="bi bi-house"></i>
                @if (!IsCollapsed) { <span>ראשי</span> }
            </a>
            <a class="nav-link @(ActiveTab == "guide" ? "active" : "")" @onclick="ShowGuideModal">
                <i class="bi bi-info-circle"></i>
                @if (!IsCollapsed) { <span>מידע</span> }
            </a>
            <a class="nav-link @(ActiveTab == "notifications" ? "active" : "")" @onclick="ShowNotificationsModal">
                <i class="bi bi-bell"></i>
                @if (!IsCollapsed) { <span>התראות</span> }
            </a>
            <a class="nav-link @(ActiveTab == "about" ? "active" : "")" @onclick="ShowAboutModal">
                <i class="bi bi-info-square"></i>
                @if (!IsCollapsed) { <span>מפרט על האתר</span> }
            </a>
            <a class="nav-link @(ActiveTab == "history" ? "active" : "")" @onclick="ShowHistoryModal">
                <i class="bi bi-clock-history"></i>
                @if (!IsCollapsed) { <span>היסטוריה</span> }
            </a>
        </nav>

        <!-- תחתית: Logout + מתג מצב כהה/בהיר -->
        <div class="sidebar-footer">
            <div class="theme-toggle-switch">
                @if (!IsCollapsed)
                {
                    <span class="theme-label @(!IsDark ? "active" : "")">בהיר</span>
                }
                <button class="toggle-switch" @onclick="ToggleThemeAsync" aria-label="החלף מצב כהה">
                    @if (IsDark)
                    {
                        <i class="bi bi-moon-fill"></i>
                    }
                    else
                    {
                        <i class="bi bi-sun-fill"></i>
                    }
                </button>
                @if (!IsCollapsed)
                {
                    <span class="theme-label @(IsDark ? "active" : "")">כהה</span>
                }
            </div>
            <a class="logout-btn" href="#" @onclick="Logout">
                <i class="bi bi-box-arrow-right"></i>
                @if (!IsCollapsed)
                {
                    <span>התנתק</span>
                }
            </a>
        </div>
    </div>
    @if (SidebarOpen)
    {
        <div class="sidebar-overlay" @onclick="@(async () => await CloseSidebar())"></div>
    }
</div>

@code {
    [Parameter]
    public bool SidebarOpen { get; set; }
    [Parameter]
    public EventCallback<bool> SidebarOpenChanged { get; set; }
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public EventCallback<bool> OnCollapseChanged { get; set; }

    private bool IsDark = false;
    private string userName = "רותם";
    private string userRole = "מנהל";
    private string ActiveTab = "dashboard";
    private string searchText = "";
    private bool showGuideModal = false;
    private bool showNotificationsModal = false;
    private bool showAboutModal = false;
    private bool showHistoryModal = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name ?? "רותם";
            userRole = user.Claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value ?? "מנהל";
        }
        var theme = await JS.InvokeAsync<string>("getTheme");
        IsDark = theme == "dark";
        await SetThemeOnDom(theme);
    }

    protected override void OnParametersSet()
    {
        SidebarOpen = SidebarOpen;
    }

    private void ChangeTab(string tab)
    {
        ActiveTab = tab;
        // כאן תוכל להוסיף ניווט אמיתי אם תרצה
        // NavigationManager.NavigateTo(...);
    }

    private void Logout()
    {
        // כאן תוכל להוסיף קריאה ל־AuthService.Logout או ניתוב לדף התחברות
    }

    private async Task ToggleCollapse()
    {
        await OnCollapseChanged.InvokeAsync(!IsCollapsed);
        StateHasChanged();
    }

    private async Task ToggleThemeAsync()
    {
        IsDark = !IsDark;
        var theme = IsDark ? "dark" : "light";
        await JS.InvokeVoidAsync("setTheme", theme);
        await SetThemeOnDom(theme);
    }

    private async Task SetThemeOnDom(string theme)
    {
        await JS.InvokeVoidAsync("eval", $@"
            (function() {{
                var html = document.documentElement;
                var body = document.body;
                html.classList.remove('dark', 'light');
                body.classList.remove('dark', 'light');
                html.classList.add('{theme}');
                body.classList.add('{theme}');
            }})();
        ");
    }

    private void ShowGuideModal()
    {
        CloseAllModals();
        showGuideModal = true;
        ActiveTab = "guide";
    }
    private void ShowNotificationsModal()
    {
        CloseAllModals();
        showNotificationsModal = true;
        ActiveTab = "notifications";
    }
    private void ShowAboutModal()
    {
        CloseAllModals();
        showAboutModal = true;
        ActiveTab = "about";
    }
    private void ShowHistoryModal()
    {
        CloseAllModals();
        showHistoryModal = true;
        ActiveTab = "history";
    }
    private void CloseAllModals()
    {
        showGuideModal = false;
        showNotificationsModal = false;
        showAboutModal = false;
        showHistoryModal = false;
        ActiveTab = "";
    }

    private async Task CloseSidebar()
    {
        // First collapse the sidebar
        if (!IsCollapsed)
        {
            await OnCollapseChanged.InvokeAsync(true);
        }
        // Then close it
        await SidebarOpenChanged.InvokeAsync(false);
        StateHasChanged();
    }
}

@if (showGuideModal)
{
    <div class="modal-overlay" @onclick="CloseAllModals">
        <div class="modal-window" @onclick:stopPropagation>
            <button class="modal-close" @onclick="CloseAllModals">&times;</button>
            <SiteGuide />
        </div>
    </div>
}
@if (showNotificationsModal)
{
    <div class="modal-overlay" @onclick="CloseAllModals">
        <div class="modal-window" @onclick:stopPropagation>
            <button class="modal-close" @onclick="CloseAllModals">&times;</button>
            <SiteNotifications />
        </div>
    </div>
}
@if (showAboutModal)
{
    <div class="modal-overlay" @onclick="CloseAllModals">
        <div class="modal-window" @onclick:stopPropagation>
            <button class="modal-close" @onclick="CloseAllModals">&times;</button>
            <SiteAbout />
        </div>
    </div>
}
@if (showHistoryModal)
{
    <div class="modal-overlay" @onclick="CloseAllModals">
        <div class="modal-window" @onclick:stopPropagation>
            <button class="modal-close" @onclick="CloseAllModals">&times;</button>
            <UserActionLog />
        </div>
    </div>
}