@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@using Blazor_WebAssembly.Models.Equipment
@using Domain_Project.DTOs
@using Domain_Project.Models

@* 
    Equipment Debug Component
    This component provides debugging tools for testing the Equipment API connection,
    parsing responses, and analyzing property mapping between API and client models.
*@

<h1>מחסן הנשיא - Equipment Debug</h1>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Equipment Data Debug</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <button class="btn btn-primary" @onclick="FetchAndDisplayRawData">Fetch Raw API Data</button>
                    <button class="btn btn-success ml-2" @onclick="TestEquipmentParsing">Test Equipment Parsing</button>
                    <button class="btn btn-info ml-2" @onclick="AnalyzePropertyMappings">Analyze Property Mappings</button>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }

                <div class="row">
                    <div class="col-md-12">
                        @if (!string.IsNullOrEmpty(rawData))
                        {
                            <h6 class="mt-3">Raw API Response:</h6>
                            <pre style="background-color: #eee; padding: 10px; margin-top: 10px; overflow: auto; max-height: 300px;">@rawData</pre>
                        }
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        @if (parsedEquipment != null && parsedEquipment.Any())
                        {
                            <h6 class="mt-3">Parsed Equipment (@parsedEquipment.Count items):</h6>
                            <div class="table-responsive">
                                <table class="table table-striped table-sm">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Name</th>
                                            <th>Status</th>
                                            <th>Location</th>
                                            <th>Quantity</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in parsedEquipment)
                                        {
                                            <tr>
                                                <td>@item.EquipmentID</td>
                                                <td>@item.Name</td>
                                                <td>@item.Status</td>
                                                <td>@item.StorageLocation</td>
                                                <td>@item.Quantity</td>
                                                <td>@(item.Value > 0 ? $"${item.Value:N2}" : "-")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        @if (propertyMappings.Any())
                        {
                            <h6>JSON Property Mapping Results:</h6>
                            <div class="table-responsive">
                                <table class="table table-sm mt-2">
                                    <thead>
                                        <tr>
                                            <th>API Property</th>
                                            <th>Client Property</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var mapping in propertyMappings)
                                        {
                                            <tr>
                                                <td>@mapping.ApiProperty</td>
                                                <td>@mapping.ClientProperty</td>
                                                <td>
                                                    @if (mapping.Matches)
                                                    {
                                                        <span class="text-success">✓ Matches</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-danger">✗ Mismatch</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string rawData = "";
    private string errorMessage = "";
    private List<Blazor_WebAssembly.Models.Equipment.EquipmentModel> parsedEquipment = new();
    private List<PropertyMapping> propertyMappings = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Navigate to login page if the user is not authenticated
            if (!user.Identity?.IsAuthenticated ?? true)
            {
                //NavigationManager.NavigateTo("/login");
                // Comment out navigation for debugging purposes
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Index.razor initialization: {ex.Message}");
            // Still navigate to login on error
            //NavigationManager.NavigateTo("/login");
            // Comment out navigation for debugging purposes
        }
    }

    private async Task FetchAndDisplayRawData()
    {
        try
        {
            errorMessage = "";
            parsedEquipment.Clear();
            propertyMappings.Clear();

            await JSRuntime.InvokeVoidAsync("console.log", "Fetching from API...");
            var response = await Http.GetAsync("api/equipment");
            await JSRuntime.InvokeVoidAsync("console.log", "Response status:", response.StatusCode.ToString());

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                rawData = content;
                await JSRuntime.InvokeVoidAsync("console.log", "API Response:", content);
            }
            else
            {
                rawData = "";
                errorMessage = $"Error: {response.StatusCode}\n{await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            rawData = "";
            errorMessage = $"Exception: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "API Error:", ex.Message);
        }
    }

    private async Task TestEquipmentParsing()
    {
        if (string.IsNullOrEmpty(rawData))
        {
            errorMessage = "Please fetch data from the API first";
            return;
        }

        try
        {
            errorMessage = "";
            parsedEquipment.Clear();

            // Try to parse the raw JSON data into EquipmentModel objects
            await JSRuntime.InvokeVoidAsync("console.log", "Attempting to parse equipment data...");

            // First attempt - direct deserialization with case insensitivity
            try
            {
                var options = new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    IgnoreReadOnlyProperties = true 
                };

                var result = System.Text.Json.JsonSerializer.Deserialize<List<Blazor_WebAssembly.Models.Equipment.EquipmentModel>>(
                rawData, options);

                if (result != null && result.Any())
                {
                    parsedEquipment = result;
                    await JSRuntime.InvokeVoidAsync("console.log", "Successfully parsed equipment data", parsedEquipment);
                    return;
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.warn", "First parsing attempt failed", ex.Message);
            }

            // Second attempt - manual parsing from JsonDocument
            try
            {
                var document = System.Text.Json.JsonDocument.Parse(rawData);

                if (document.RootElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                {
                    foreach (var element in document.RootElement.EnumerateArray())
                    {
                        // Create EquipmentModel with required properties initialized
                        // Modified code for TestEquipmentParsing method
                        var equipment = new Blazor_WebAssembly.Models.Equipment.EquipmentModel
                        {
                            Name = "Unknown", // Default value
                            Status = "Unknown", // Default value
                            StorageLocation = "Unknown", // Default value
                            CheckoutRecords = new List<CheckoutRecord>() // Using fully qualified namespace
                        };



                        // Manually map each property with explicit error handling
                        try
                        {
                            if (element.TryGetProperty("id", out var idProp))
                                equipment.EquipmentID = idProp.GetInt32();
                            else if (element.TryGetProperty("Id", out idProp))
                                equipment.EquipmentID = idProp.GetInt32();

                            if (element.TryGetProperty("name", out var nameProp))
                                equipment.Name = nameProp.GetString() ?? "Unknown";
                            else if (element.TryGetProperty("Name", out nameProp))
                                equipment.Name = nameProp.GetString() ?? "Unknown";

                            if (element.TryGetProperty("description", out var descProp))
                                equipment.Description = descProp.GetString();
                            else if (element.TryGetProperty("Description", out descProp))
                                equipment.Description = descProp.GetString();

                            if (element.TryGetProperty("serialNumber", out var serialProp))
                                equipment.SerialNumber = serialProp.GetString();
                            else if (element.TryGetProperty("SerialNumber", out serialProp))
                                equipment.SerialNumber = serialProp.GetString();

                            if (element.TryGetProperty("status", out var statusProp))
                                equipment.Status = statusProp.GetString() ?? "Unknown";
                            else if (element.TryGetProperty("Status", out statusProp))
                                equipment.Status = statusProp.GetString() ?? "Unknown";

                            if (element.TryGetProperty("quantity", out var qtyProp))
                                equipment.Quantity = qtyProp.GetInt32();
                            else if (element.TryGetProperty("Quantity", out qtyProp))
                                equipment.Quantity = qtyProp.GetInt32();

                            if (element.TryGetProperty("value", out var valueProp) && valueProp.ValueKind == System.Text.Json.JsonValueKind.Number)
                                equipment.Value = valueProp.GetDecimal();
                            else if (element.TryGetProperty("Value", out valueProp) && valueProp.ValueKind == System.Text.Json.JsonValueKind.Number)
                                equipment.Value = valueProp.GetDecimal();

                            if (element.TryGetProperty("storageLocation", out var locProp))
                                equipment.StorageLocation = locProp.GetString() ?? "Unknown";
                            else if (element.TryGetProperty("StorageLocation", out locProp))
                                equipment.StorageLocation = locProp.GetString() ?? "Unknown";

                            // Removed ModelNumber property assignment as it doesn't exist in EquipmentModel

                            // Process checkout records if they exist
                            if (element.TryGetProperty("checkoutRecords", out var recordsProp) &&
                                recordsProp.ValueKind == System.Text.Json.JsonValueKind.Array)
                            {
                                // Parse checkout records if needed
                                // For now we've already initialized with an empty list
                            }

                            parsedEquipment.Add(equipment);
                        }
                        catch (Exception propEx)
                        {
                            await JSRuntime.InvokeVoidAsync("console.error", "Error mapping properties", propEx.Message);
                        }
                    }

                    if (parsedEquipment.Any())
                    {
                        await JSRuntime.InvokeVoidAsync("console.log", "Successfully parsed with manual mapping", parsedEquipment);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Parsing error: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("console.error", "Manual parsing failed", ex.Message);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Overall parsing error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error in TestEquipmentParsing", ex);
        }
    }

    private async Task AnalyzePropertyMappings()
    {
        if (string.IsNullOrEmpty(rawData))
        {
            errorMessage = "Please fetch data from the API first";
            return;
        }

        try
        {
            propertyMappings.Clear();

            // Get client model properties
            var clientProps = typeof(Blazor_WebAssembly.Models.Equipment.EquipmentModel).GetProperties()
                .Select(p => p.Name)
                .ToList();

            // Parse the first item from the API to get its properties
            var doc = System.Text.Json.JsonDocument.Parse(rawData);

            // Ensure we have an array with at least one item
            if (doc.RootElement.ValueKind != System.Text.Json.JsonValueKind.Array ||
                doc.RootElement.GetArrayLength() == 0)
            {
                errorMessage = "API response doesn't contain an array of items";
                return;
            }

            // Get the first item's properties
            var firstItem = doc.RootElement[0];
            var apiProps = new List<string>();

            foreach (var prop in firstItem.EnumerateObject())
            {
                apiProps.Add(prop.Name);
            }

            // Find corresponding properties and mismatches
            foreach (var apiProp in apiProps)
            {
                // Check if there's a direct match
                var directMatch = clientProps.Contains(apiProp);

                // Check if there's a case-insensitive match
                var caseInsensitiveMatch = clientProps
                    .FirstOrDefault(cp => cp.Equals(apiProp, StringComparison.OrdinalIgnoreCase));

                propertyMappings.Add(new PropertyMapping
                {
                    ApiProperty = apiProp,
                    ClientProperty = caseInsensitiveMatch ?? "Not found",
                    Matches = directMatch || caseInsensitiveMatch != null
                });
            }

            // Check for any client properties not in API response
            foreach (var clientProp in clientProps)
            {
                if (!apiProps.Contains(clientProp, StringComparer.OrdinalIgnoreCase))
                {
                    propertyMappings.Add(new PropertyMapping
                    {
                        ApiProperty = "Not found",
                        ClientProperty = clientProp,
                        Matches = false
                    });
                }
            }

            await JSRuntime.InvokeVoidAsync("console.log", "Property mappings analyzed", propertyMappings);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error analyzing property mappings: {ex.Message}";
        }
    }

    private class PropertyMapping
    {
        public string ApiProperty { get; set; } = "";
        public string ClientProperty { get; set; } = "";
        public bool Matches { get; set; }
    }
}
