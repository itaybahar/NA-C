@page "/equipment/categories"
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Equipment Categories Management</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/equipment/inventory">Equipment Inventory</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Categories</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-md-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">@(_editMode ? "Edit Category" : "Add New Category")</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Category Name</label>
                        <input type="text" class="form-control" id="categoryName"
                               @bind="_categoryName" @bind:event="oninput" />
                        @if (_showNameError)
                        {
                            <div class="text-danger mt-1">Category name is required</div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" rows="3"
                                  @bind="_categoryDescription" @bind:event="oninput"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="categoryIcon" class="form-label">Icon</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="@_categoryIcon"></i>
                            </span>
                            <select class="form-select" id="categoryIcon" @bind="_categoryIcon">
                                <option value="fas fa-satellite-dish">Communication</option>
                                <option value="fas fa-binoculars">Observation</option>
                                <option value="fas fa-shield-alt">Protection</option>
                                <option value="fas fa-first-aid">Medical</option>
                                <option value="fas fa-compass">Navigation</option>
                                <option value="fas fa-tools">Tools</option>
                                <option value="fas fa-tshirt">Clothing</option>
                                <option value="fas fa-campground">Camping</option>
                                <option value="fas fa-bolt">Power</option>
                                <option value="fas fa-box">Generic</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="categoryColor" class="form-label">Color</label>
                        <input type="color" class="form-control form-control-color" id="categoryColor"
                               @bind="_categoryColor" title="Choose category color" />
                    </div>

                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="requireApproval"
                               @bind="_requireApproval" />
                        <label class="form-check-label" for="requireApproval">
                            Require manager approval for checkout
                        </label>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-secondary" @onclick="ClearForm">
                            @(_editMode ? "Cancel" : "Clear")
                        </button>
                        <button class="btn btn-primary" @onclick="SaveCategory">
                            @(_editMode ? "Update Category" : "Add Category")
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Equipment Categories</h5>
                        <div class="input-group" style="width: 250px;">
                            <input type="text" class="form-control" placeholder="Search categories..."
                                   @bind="_searchTerm" @bind:event="oninput" @onkeypress="HandleSearchKeyPress" />
                            <button class="btn btn-outline-secondary" @onclick="SearchCategories">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th class="text-center">Item Count</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_filteredCategories.Any())
                                {
                                    @foreach (var category in _filteredCategories)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <span class="category-icon me-2" style="color: @category.Color">
                                                        <i class="@category.Icon"></i>
                                                    </span>
                                                    <span>@category.Name</span>
                                                    @if (category.RequireApproval)
                                                    {
                                                        <span class="ms-2 badge bg-info">Approval Required</span>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="text-truncate d-inline-block" style="max-width: 200px;">
                                                    @category.Description
                                                </span>
                                            </td>
                                            <td class="text-center">@category.ItemCount</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditCategory(category)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(category)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center py-4">
                                            @if (!string.IsNullOrEmpty(_searchTerm))
                                            {
                                                <p>No categories found matching your search.</p>
                                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                                    <i class="fas fa-times me-1"></i> Clear Search
                                                </button>
                                            }
                                            else
                                            {
                                                <p>No equipment categories have been created yet.</p>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (_showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the category <strong>@_categoryToDelete?.Name</strong>?</p>

                        @if (_categoryToDelete?.ItemCount > 0)
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Warning: This category has @_categoryToDelete?.ItemCount equipment items assigned to it.
                                Deleting this category will set those items to "Uncategorized".
                            </div>
                        }

                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    // Form fields
    private string _categoryName = "";
    private string _categoryDescription = "";
    private string _categoryIcon = "fas fa-box";
    private string _categoryColor = "#3498db";
    private bool _requireApproval = false;
    private bool _editMode = false;
    private int _editingCategoryId = 0;
    private bool _showNameError = false;

    // Search and filtering
    private string _searchTerm = "";
    private List<EquipmentCategory> _allCategories = new();
    private List<EquipmentCategory> _filteredCategories = new();

    // Delete confirmation
    private bool _showDeleteConfirmation = false;
    private EquipmentCategory? _categoryToDelete;

    protected override void OnInitialized()
    {
        // Sample data - in a real app this would come from a service
        _allCategories = GetSampleCategories();
        _filteredCategories = _allCategories.ToList();
    }

    private List<EquipmentCategory> GetSampleCategories()
    {
        return new List<EquipmentCategory>
        {
            new EquipmentCategory
            {
                Id = 1,
                Name = "Communication",
                Description = "Radio equipment, communication devices, and accessories for team coordination.",
                Icon = "fas fa-satellite-dish",
                Color = "#3498db",
                RequireApproval = false,
                ItemCount = 15
            },
            new EquipmentCategory
            {
                Id = 2,
                Name = "Observation",
                Description = "Binoculars, night vision devices, and other observation equipment.",
                Icon = "fas fa-binoculars",
                Color = "#2ecc71",
                RequireApproval = true,
                ItemCount = 8
            },
            new EquipmentCategory
            {
                Id = 3,
                Name = "Personal Protection",
                Description = "Vests, helmets, and other protective gear for personnel.",
                Icon = "fas fa-shield-alt",
                Color = "#e74c3c",
                RequireApproval = false,
                ItemCount = 25
            },
            new EquipmentCategory
            {
                Id = 4,
                Name = "Medical",
                Description = "First aid kits and medical supplies for emergency care.",
                Icon = "fas fa-first-aid",
                Color = "#f39c12",
                RequireApproval = false,
                ItemCount = 12
            },
            new EquipmentCategory
            {
                Id = 5,
                Name = "Navigation",
                Description = "GPS devices, compasses, and maps for field navigation.",
                Icon = "fas fa-compass",
                Color = "#9b59b6",
                RequireApproval = false,
                ItemCount = 6
            }
        };
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchCategories();
        }
    }

    private void SearchCategories()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredCategories = _allCategories.ToList();
        }
        else
        {
            _filteredCategories = _allCategories
                .Where(c => c.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            c.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void ClearSearch()
    {
        _searchTerm = "";
        _filteredCategories = _allCategories.ToList();
    }

    private void EditCategory(EquipmentCategory category)
    {
        _editMode = true;
        _editingCategoryId = category.Id;
        _categoryName = category.Name;
        _categoryDescription = category.Description;
        _categoryIcon = category.Icon;
        _categoryColor = category.Color;
        _requireApproval = category.RequireApproval;
    }

    private void ClearForm()
    {
        _editMode = false;
        _editingCategoryId = 0;
        _categoryName = "";
        _categoryDescription = "";
        _categoryIcon = "fas fa-box";
        _categoryColor = "#3498db";
        _requireApproval = false;
        _showNameError = false;
    }

    private void SaveCategory()
    {
        _showNameError = string.IsNullOrWhiteSpace(_categoryName);

        if (_showNameError)
        {
            return;
        }

        if (_editMode)
        {
            // Update existing category
            var category = _allCategories.FirstOrDefault(c => c.Id == _editingCategoryId);
            if (category != null)
            {
                category.Name = _categoryName;
                category.Description = _categoryDescription;
                category.Icon = _categoryIcon;
                category.Color = _categoryColor;
                category.RequireApproval = _requireApproval;
            }
        }
        else
        {
            // Add new category
            var newCategory = new EquipmentCategory
            {
                Id = _allCategories.Max(c => c.Id) + 1,
                Name = _categoryName,
                Description = _categoryDescription,
                Icon = _categoryIcon,
                Color = _categoryColor,
                RequireApproval = _requireApproval,
                ItemCount = 0
            };

            _allCategories.Add(newCategory);
        }

        // Update filtered list
        SearchCategories();

        // Clear form
        ClearForm();
    }

    private void ShowDeleteConfirmation(EquipmentCategory category)
    {
        _categoryToDelete = category;
        _showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
        _categoryToDelete = null;
    }

    private void ConfirmDelete()
    {
        if (_categoryToDelete != null)
        {
            _allCategories.Remove(_categoryToDelete);
            _filteredCategories = _filteredCategories.Where(c => c.Id != _categoryToDelete.Id).ToList();
        }

        _showDeleteConfirmation = false;
        _categoryToDelete = null;
    }

    private class EquipmentCategory
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public bool RequireApproval { get; set; }
        public int ItemCount { get; set; }
    }
}