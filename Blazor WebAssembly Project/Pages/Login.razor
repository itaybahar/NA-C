@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly.Models.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <img src="images/logo_png.png" alt="לוגו השבט" class="logo" />
            <h1>מחסן שבט הנשיא</h1>
            <p>אנא התחבר כדי להמשיך</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <div class="login-tabs">
            <button class="tab @(activeTab == "regular" ? "active" : "")" @onclick="@(() => activeTab = "regular")">משתמש</button>
            <button class="tab @(activeTab == "google" ? "active" : "")" @onclick="@(() => activeTab = "google")">Gmail</button>
        </div>

        @if (activeTab == "regular")
        {
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <InputText @bind-Value="loginModel.Username" placeholder="שם משתמש" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Username)" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="loginModel.Password" type="password" placeholder="סיסמה" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-options">
                    <label><input type="checkbox" @bind="rememberMe" /> זכור אותי</label>
                    <a href="/forgot-password">שכחת סיסמה?</a>
                </div>

                <button type="submit" class="btn-submit" disabled="@isSubmitting">
                    @(isSubmitting ? "מתחבר..." : "התחבר")
                </button>
            </EditForm>
        }
        else
        {
            <div class="google-login">
                <p>התחבר עם חשבון גוגל:</p>
                <button class="btn-google" @onclick="HandleGoogleLogin">
                    <img src="images/google-logo.png" alt="Google" />
                    התחבר עם Gmail
                </button>
            </div>
        }

        <div class="login-footer">
            <p>אין לך חשבון? <a href="/register">הרשמה</a></p>
        </div>
    </div>
</div>

<style>
    :root {
        --background: #1a1a1a;
        --primary-red: #d32f2f;
        --white: #ffffff;
        --grey: #cccccc;
    }

    .login-container {
        background: var(--background);
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
        direction: rtl;
        color: var(--white);
        font-family: 'Segoe UI', sans-serif;
    }

    .login-card {
        background-color: #2a2a2a;
        padding: 30px;
        border-radius: 12px;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 0 15px rgba(0,0,0,0.5);
    }

    .login-header {
        text-align: center;
        margin-bottom: 25px;
    }

    .logo {
        width: 90px;
        height: 90px;
        margin-bottom: 10px;
        object-fit: contain;
    }

    .login-header h1 {
        color: var(--primary-red);
        margin: 0;
        font-size: 24px;
    }

    .login-header p {
        color: var(--grey);
        font-size: 14px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: none;
        background-color: #444;
        color: var(--white);
    }

        .form-control:focus {
            outline: 2px solid var(--primary-red);
        }

    .form-options {
        display: flex;
        justify-content: space-between;
        font-size: 14px;
        margin-bottom: 15px;
    }

        .form-options a {
            color: var(--primary-red);
            text-decoration: none;
        }

    .btn-submit {
        background-color: var(--primary-red);
        color: var(--white);
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        cursor: pointer;
    }

        .btn-submit:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .login-tabs {
        display: flex;
        margin-bottom: 20px;
        border-bottom: 2px solid #444;
    }

    .tab {
        flex: 1;
        padding: 10px;
        background: none;
        border: none;
        color: var(--white);
        cursor: pointer;
        font-weight: bold;
        transition: 0.3s;
    }

        .tab.active {
            border-bottom: 3px solid var(--primary-red);
            color: var(--primary-red);
        }

    .google-login {
        text-align: center;
    }

    .btn-google {
        margin-top: 10px;
        background-color: white;
        color: #333;
        border: none;
        border-radius: 6px;
        padding: 10px 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        width: 100%;
        font-weight: bold;
        cursor: pointer;
    }

        .btn-google img {
            width: 20px;
            height: 20px;
        }

    .login-footer {
        text-align: center;
        margin-top: 20px;
        font-size: 14px;
    }

        .login-footer a {
            color: var(--primary-red);
            text-decoration: none;
            font-weight: bold;
        }

    .alert {
        background-color: #ffdddd;
        color: #990000;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 15px;
        text-align: center;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isSubmitting = false;
    private bool rememberMe = false;
    private string activeTab = "regular";

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var token = query.Get("token");
        var registered = query.Get("registered");

        if (!string.IsNullOrEmpty(token))
        {
            await LocalStorage.SetItemAsync("authToken", token);
            await HandleRedirectAfterLogin();
        }

        if (!string.IsNullOrEmpty(registered) && registered == "true")
        {
            successMessage = "הרשמתך נקלטה בהצלחה! אנא התחבר כדי להמשיך.";
        }
    }

    private async Task HandleLogin()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                if (rememberMe)
                {
                    await LocalStorage.SetItemAsync("rememberedUser", loginModel.Username);
                }

                await HandleRedirectAfterLogin();
            }
            else
            {
                errorMessage = "שם המשתמש או הסיסמה שגויים.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה: {ex.Message}";
        }

        isSubmitting = false;
    }

    private async Task HandleRedirectAfterLogin()
    {
        var user = await LocalStorage.GetItemAsync<UserDto>("user");

        if (user == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        switch (user.Role?.ToLower())
        {
            case "admin":
                Navigation.NavigateTo("/admin/dashboard");
                break;
            case "warehousemanager":
                Navigation.NavigateTo("/warehouse/manager/dashboard");
                break;
            case "warehouseoperator":
                Navigation.NavigateTo("/warehouse/operator/dashboard");
                break;
            default:
                Navigation.NavigateTo("/user/dashboard");
                break;
        }
    }

    private void HandleGoogleLogin()
    {
        Navigation.NavigateTo("https://localhost:5191/auth/login-google", true);
    }


}
