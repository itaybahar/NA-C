@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazor_WebAssembly.Services
@using Blazor_WebAssembly.Services.Interfaces
@using Domain_Project.Models
@using Domain_Project.DTOs
@using Blazor_WebAssembly.Auth
@using Blazor_WebAssembly.Models.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<link href="css/Login.css" rel="stylesheet">

<div class="login-container">
    <div class="login-card">
        <div class="icon-wrapper">
            <div class="icon-circle">
                <img src="images/user-top.png" class="user-icon" alt="User Icon" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success">@SuccessMessage</div>
        }

        @if (!showForgotPassword)
        {
            <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="input-group">
                    <div class="input-wrapper">
                        <div class="input-icon">
                            <img src="images/user-new-icon.png" alt="User Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="LoginModel.Username" placeholder="שם משתמש" class="input-field" />
                    </div>
                    <ValidationMessage For="@(() => LoginModel.Username)" />
                </div>

                <div class="input-group">
                    <div class="input-wrapper">
                        <div class="input-icon">
                            <img src="images/lock-icon.png" alt="Lock Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="LoginModel.Password" type="password" placeholder="סיסמה" class="input-field" />
                    </div>
                    <ValidationMessage For="@(() => LoginModel.Password)" />
                </div>

                <div class="login-options">
                    <div class="remember-me">
                        <input type="checkbox" id="remember-me" @bind="RememberMe" />
                        <label for="remember-me">זכור אותי</label>
                    </div>
                    <button type="button" class="forgot-password-link" @onclick="ToggleForgotPassword">שכחת סיסמה?</button>
                </div>

                <div class="login-button-container">
                    <button type="submit" class="login-button" disabled="@IsSubmitting">
                        @(IsSubmitting ? "מתחבר..." : "כניסה")
                    </button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="forgot-password-form">
                <h3>איפוס סיסמה</h3>
                <p>הזן את כתובת האימייל שלך ונשלח לך קישור לאיפוס הסיסמה</p>

                <div class="input-group">
                    <div class="input-wrapper">
                        <div class="input-icon">
                            <img src="images/email-icon.png" alt="Email Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <input type="email" @bind="forgotPasswordEmail" placeholder="אימייל" class="input-field" />
                    </div>
                </div>

                <div class="button-group">
                    <button type="button" class="login-button" @onclick="HandleForgotPassword" disabled="@IsSubmitting">
                        @(IsSubmitting ? "שולח..." : "שלח קישור איפוס")
                    </button>
                    <button type="button" class="back-button" @onclick="ToggleForgotPassword">חזרה להתחברות</button>
                </div>
            </div>
        }
    </div>

    <div class="google-and-signup">
        <div class="google-login">
            <button class="google-button" @onclick="HandleGoogleLogin" disabled="@IsSubmitting">
                <img src="images/google-logo.png" alt="Google" />
            </button>
        </div>

        <div class="signup">
            <a href="/register">אין לך חשבון? הרשמה</a>
        </div>
    </div>
</div>

@code {
    private LoginModel LoginModel { get; set; } = new LoginModel { Username = string.Empty, Password = string.Empty };
    private bool RememberMe { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;
    private bool IsSubmitting { get; set; } = false;
    private bool isInitialized = false;
    private bool showForgotPassword = false;
    private string forgotPasswordEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var token = query["token"];
            var registered = query["registered"];
            var error = query["error"];
            var resetRequested = query["reset-requested"];
            var resetSuccess = query["reset-success"];

            if (!string.IsNullOrEmpty(error))
                ErrorMessage = GetErrorMessage(error);

            if (!string.IsNullOrEmpty(resetRequested) && resetRequested == "true")
                SuccessMessage = "נשלח קישור לאיפוס סיסמה לכתובת האימייל שלך.";

            if (!string.IsNullOrEmpty(resetSuccess) && resetSuccess == "true")
                SuccessMessage = "הסיסמה שלך אופסה בהצלחה. אנא התחבר עם הסיסמה החדשה.";

            if (!string.IsNullOrEmpty(token))
            {
                await LocalStorage.SetItemAsync("authToken", token);
                if (AuthStateProvider is CustomAuthStateProvider authProvider)
                    await authProvider.MarkUserAsAuthenticated(token);
                await HandleRedirectAfterLogin();
                return;
            }

            if (!string.IsNullOrEmpty(registered) && registered == "true")
                SuccessMessage = "הרשמתך נקלטה בהצלחה! אנא התחבר.";

            var rememberedUser = await LocalStorage.GetItemAsync<string>("rememberedUser");
            if (!string.IsNullOrEmpty(rememberedUser))
                LoginModel.Username = rememberedUser;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"אירעה שגיאה: {ex.Message}";
        }
        finally
        {
            isInitialized = true;
            StateHasChanged();
        }
    }

    private string GetErrorMessage(string errorCode)
    {
        return errorCode switch
        {
            "google-auth-failed" => "התחברות באמצעות Google נכשלה.",
            "missing-user-info" => "לא נמצאו פרטי משתמש.",
            "token-generation-failed" => "שגיאת התחברות.",
            "invalid-reset-token" => "קישור איפוס הסיסמה אינו תקין או שפג תוקפו.",
            "email-not-found" => "כתובת האימייל לא נמצאה במערכת.",
            _ => $"אירעה שגיאה: {errorCode}"
        };
    }

    private async Task HandleLogin()
    {
        if (!isInitialized) return;
        IsSubmitting = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(LoginModel.Username) || string.IsNullOrEmpty(LoginModel.Password))
            {
                ErrorMessage = "שם משתמש וסיסמה חובה.";
                return;
            }

            var result = await AuthService.LoginAsync(LoginModel);

            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                await LocalStorage.SetItemAsync("authToken", result.Token);

                if (result.User != null)
                    await LocalStorage.SetItemAsync("user", result.User);

                if (RememberMe)
                    await LocalStorage.SetItemAsync("rememberedUser", LoginModel.Username);

                if (AuthStateProvider is CustomAuthStateProvider authProvider)
                    await authProvider.MarkUserAsAuthenticated(result.Token);

                await HandleRedirectAfterLogin();
            }
            else
            {
                ErrorMessage = "שם משתמש או סיסמה שגויים.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"שגיאה: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleRedirectAfterLogin()
    {
        try
        {
            var user = await LocalStorage.GetItemAsync<Domain_Project.DTOs.UserDto>("user");
            if (user == null)
            {
                Navigation.NavigateTo("/");
                return;
            }

            switch (user.Role?.ToLower())
            {
                case "admin":
                    Navigation.NavigateTo("/admin/dashboard");
                    break;
                case "warehousemanager":
                    Navigation.NavigateTo("/warehouse/manager/dashboard");
                    break;
                case "warehouseoperator":
                    Navigation.NavigateTo("/warehouse/operator/dashboard");
                    break;
                default:
                    Navigation.NavigateTo("/user/dashboard");
                    break;
            }
        }
        catch
        {
            Navigation.NavigateTo("/");
        }
    }

    private void HandleGoogleLogin()
    {
        Navigation.NavigateTo("https://localhost:5191/auth/login-google", true);
    }

    private void ToggleForgotPassword()
    {
        showForgotPassword = !showForgotPassword;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
    }

    private async Task HandleForgotPassword()
    {
        if (string.IsNullOrWhiteSpace(forgotPasswordEmail))
        {
            ErrorMessage = "נא להזין כתובת אימייל.";
            return;
        }

        IsSubmitting = true;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        StateHasChanged();

        try
        {
            bool result = await AuthService.SendPasswordResetEmail(forgotPasswordEmail);

            if (result)
            {
                SuccessMessage = "נשלח קישור לאיפוס סיסמה לכתובת האימייל שלך.";
                showForgotPassword = false;
            }
            else
            {
                ErrorMessage = "לא הצלחנו לשלוח את הקישור לאיפוס הסיסמה. אנא נסה שנית.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"שגיאה: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    public void Dispose() { }
}
