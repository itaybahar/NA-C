@page "/equipment/inventory"
@attribute [Authorize(Roles = "Manager")]
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Equipment Inventory</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Equipment Inventory</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search equipment..." @bind="_searchTerm" @bind:event="oninput" @onkeyup="SearchEquipment">
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchEquipment">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-6 text-md-end">
            <button class="btn btn-primary" @onclick="AddNewEquipment">
                <i class="fas fa-plus"></i> Add New Equipment
            </button>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Equipment List</h5>
                        <div>
                            <select class="form-select" @bind="_categoryFilter">
                                <option value="">All Categories</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Category</th>
                                    <th>Total Quantity</th>
                                    <th>Available</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_filteredEquipment.Any())
                                {
                                    @foreach (var item in _filteredEquipment)
                                    {
                                        <tr>
                                            <td>@item.Id</td>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="equipment-icon me-2">
                                                        <i class="@GetEquipmentIcon(item.Category)"></i>
                                                    </div>
                                                    <div>
                                                        @item.Name
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@item.Category</td>
                                            <td>@item.TotalQuantity</td>
                                            <td>@item.AvailableQuantity</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(item)">
                                                    @GetStatusText(item)
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewEquipmentDetails(item.Id)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditEquipment(item.Id)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center py-3">
                                            @if (string.IsNullOrEmpty(_searchTerm) && string.IsNullOrEmpty(_categoryFilter))
                                            {
                                                <p class="mb-0">No equipment found. Add some equipment to get started.</p>
                                            }
                                            else
                                            {
                                                <p class="mb-0">No equipment matches your search criteria.</p>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            Showing @_filteredEquipment.Count of @_equipment.Count items
                        </div>
                        <nav aria-label="Equipment pagination">
                            <ul class="pagination mb-0">
                                <li class="page-item @(_currentPage <= 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="PreviousPage" disabled="@(_currentPage <= 1)">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                </li>
                                @for (int i = 1; i <= _totalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == _currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => NavigateToPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(_currentPage >= _totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="NextPage" disabled="@(_currentPage >= _totalPages)">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Inventory Summary</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Equipment Types:</span>
                        <span class="fw-bold">@_equipment.Count</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Units:</span>
                        <span class="fw-bold">@_equipment.Sum(e => e.TotalQuantity)</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Available Units:</span>
                        <span class="fw-bold">@_equipment.Sum(e => e.AvailableQuantity)</span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Checked Out Units:</span>
                        <span class="fw-bold">@(_equipment.Sum(e => e.TotalQuantity) - _equipment.Sum(e => e.AvailableQuantity))</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Low Stock Alert</h5>
                </div>
                <div class="card-body p-0">
                    @if (_lowStockItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Equipment</th>
                                        <th>Available</th>
                                        <th>Minimum</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _lowStockItems)
                                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td class="text-danger">@item.AvailableQuantity</td>
                                            <td>@item.MinimumQuantity</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => CreateRequest(item.Id)">
                                                    Request More
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <p class="mb-0">No low stock items at the moment.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<EquipmentItem> _equipment = new();
    private List<EquipmentItem> _filteredEquipment = new();
    private List<EquipmentItem> _lowStockItems = new();
    private List<string> _categories = new();
    private string _searchTerm = "";
    private string _categoryFilter = "";
    private int _currentPage = 1;
    private int _itemsPerPage = 10;
    private int _totalPages => (int)Math.Ceiling(_filteredEquipment.Count / (double)_itemsPerPage);

    protected override void OnInitialized()
    {
        // In a real app, these would come from a service
        LoadEquipment();
        FilterEquipment();
    }

    private void LoadEquipment()
    {
        // This would be replaced with a service call in a real application
        _equipment = new List<EquipmentItem>
        {
            new EquipmentItem { Id = 1, Name = "Tactical Radio", Category = "Communication", TotalQuantity = 30, AvailableQuantity = 22, MinimumQuantity = 10 },
            new EquipmentItem { Id = 2, Name = "Night Vision Goggles", Category = "Observation", TotalQuantity = 15, AvailableQuantity = 8, MinimumQuantity = 5 },
            new EquipmentItem { Id = 3, Name = "First Aid Kit", Category = "Medical", TotalQuantity = 40, AvailableQuantity = 35, MinimumQuantity = 20 },
            new EquipmentItem { Id = 4, Name = "Tactical Vest", Category = "Protection", TotalQuantity = 25, AvailableQuantity = 12, MinimumQuantity = 10 },
            new EquipmentItem { Id = 5, Name = "Helmet", Category = "Protection", TotalQuantity = 35, AvailableQuantity = 20, MinimumQuantity = 15 },
            new EquipmentItem { Id = 6, Name = "Field Binoculars", Category = "Observation", TotalQuantity = 20, AvailableQuantity = 3, MinimumQuantity = 8 },
            new EquipmentItem { Id = 7, Name = "GPS Device", Category = "Navigation", TotalQuantity = 15, AvailableQuantity = 10, MinimumQuantity = 5 },
            new EquipmentItem { Id = 8, Name = "Flashlight", Category = "Lighting", TotalQuantity = 50, AvailableQuantity = 30, MinimumQuantity = 20 },
            new EquipmentItem { Id = 9, Name = "Backpack", Category = "Carry", TotalQuantity = 40, AvailableQuantity = 25, MinimumQuantity = 15 },
            new EquipmentItem { Id = 10, Name = "Rope (50m)", Category = "Utility", TotalQuantity = 15, AvailableQuantity = 9, MinimumQuantity = 5 },
            new EquipmentItem { Id = 11, Name = "Tactical Gloves", Category = "Protection", TotalQuantity = 60, AvailableQuantity = 45, MinimumQuantity = 20 },
            new EquipmentItem { Id = 12, Name = "Hydration System", Category = "Survival", TotalQuantity = 30, AvailableQuantity = 18, MinimumQuantity = 10 }
        };

        _categories = _equipment.Select(e => e.Category).Distinct().OrderBy(c => c).ToList();

        // Identify low stock items
        _lowStockItems = _equipment
            .Where(e => e.AvailableQuantity < e.MinimumQuantity)
            .OrderBy(e => (double)e.AvailableQuantity / e.MinimumQuantity)
            .ToList();
    }

    private void FilterEquipment()
    {
        _filteredEquipment = _equipment
            .Where(e => string.IsNullOrEmpty(_searchTerm) ||
                   e.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                   e.Category.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(e => string.IsNullOrEmpty(_categoryFilter) ||
                   e.Category == _categoryFilter)
            .ToList();
    }

    private void SearchEquipment()
    {
        _currentPage = 1;
        FilterEquipment();
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
        }
    }

    private void NavigateToPage(int page)
    {
        _currentPage = page;
    }

    private string GetEquipmentIcon(string category)
    {
        return category switch
        {
            "Communication" => "fas fa-broadcast-tower",
            "Observation" => "fas fa-binoculars",
            "Medical" => "fas fa-first-aid",
            "Protection" => "fas fa-shield-alt",
            "Navigation" => "fas fa-compass",
            "Lighting" => "fas fa-lightbulb",
            "Carry" => "fas fa-luggage-cart",
            "Utility" => "fas fa-tools",
            "Survival" => "fas fa-campground",
            _ => "fas fa-box"
        };
    }

    private string GetStatusBadgeClass(EquipmentItem item)
    {
        if (item.AvailableQuantity == 0)
            return "bg-danger";

        if (item.AvailableQuantity < item.MinimumQuantity)
            return "bg-warning";

        return "bg-success";
    }

    private string GetStatusText(EquipmentItem item)
    {
        if (item.AvailableQuantity == 0)
            return "Out of Stock";

        if (item.AvailableQuantity < item.MinimumQuantity)
            return "Low Stock";

        return "In Stock";
    }

    private void AddNewEquipment()
    {
        NavigationManager.NavigateTo("/equipment/add");
    }

    private void ViewEquipmentDetails(int id)
    {
        NavigationManager.NavigateTo($"/equipment/details/{id}");
    }

    private void EditEquipment(int id)
    {
        NavigationManager.NavigateTo($"/equipment/edit/{id}");
    }

    private void CreateRequest(int equipmentId)
    {
        NavigationManager.NavigateTo($"/equipment/requests/new?itemId={equipmentId}");
    }

    private class EquipmentItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public int TotalQuantity { get; set; }
        public int AvailableQuantity { get; set; }
        public int MinimumQuantity { get; set; }
    }
}