@page "/admin/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Blazor_WebAssembly_Project.Components.helpers
@inject ILogger<AdminDashBoard> Logger
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Dashboard - מנהל מערכת</PageTitle>

<div class="app-layout">
    <!-- Top navbar with logo and tabs -->
    <div class="top-navbar">
        <div class="navbar-container">
            <div class="navbar-branding">
                <img src="images/pailM.png" alt="Logo" class="navbar-logo" />
                <span class="navbar-title">ADMIN </span>
            </div>

            <div class="navbar-tabs">
                <div class="sliding-bar" style="right: @SlidingBarPosition%; width: @SlidingBarWidth%;"></div>
                <button class="nav-tab @(ActiveTab == "equipment" ? "active" : "")" @onclick='() => ChangeTab("equipment", 0)'>רשימת ציוד</button>
                <button class="nav-tab @(ActiveTab == "blacklist" ? "active" : "")" @onclick='() => ChangeTab("blacklist", 1)'>רשימה שחורה</button>
                <button class="nav-tab @(ActiveTab == "request" ? "active" : "")" @onclick='() => ChangeTab("request", 2)'>בקשות הרשאה</button>
                <button class="nav-tab @(ActiveTab == "teams" ? "active" : "")" @onclick='() => ChangeTab("teams", 3)'>ניהול צוותים</button>
                <button class="nav-tab @(ActiveTab == "users" ? "active" : "")" @onclick='() => ChangeTab("users", 4)'>ניהול משתמשים</button>
                <button class="nav-tab @(ActiveTab == "checkout" ? "active" : "")" @onclick='() => ChangeTab("checkout", 5)'>הוצאת ציוד</button>
                <button class="nav-tab @(ActiveTab == "return" ? "active" : "")" @onclick='() => ChangeTab("return", 6)'>החזרת ציוד</button>
                <button class="nav-tab @(ActiveTab == "add" ? "active" : "")" @onclick='() => ChangeTab("add", 7)'>➕ הוספת ציוד</button>
            </div>
        </div>
    </div>

    <!-- Main content area -->
    <div class="content-container">
        <div class="content-area">
            @switch (ActiveTab)
            {
                case "equipment":
                    <EquipmentList />
                    break;
                case "blacklist":
                    <BlacklistView />
                    break;
                case "request":
                    <AdminRoleRequests />
                    break;
                case "teams":
                    <AddTeam />
                    break;
                case "users":
                    <UserRoleManager />
                    break;
                case "checkout":
                    <EquipmentCheckout />
                    break;
                case "return":
                    <EquipmentReturnForm />
                    break;
                case "add":
                    <AddEquipmentForm />
                    break;
            }
        </div>
    </div>
</div>

<style>
    :root {
        --background: #1a1a1a;
        --primary-red: #d32f2f;
        --white: #ffffff;
        --grey: #cccccc;
        --content-bg: #2a2a2a;
        --navbar-height: 70px;
    }

    /* Full page layout */
    .app-layout {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background: var(--background);
        color: var(--white);
        font-family: 'Segoe UI', sans-serif;
        direction: rtl;
    }

    /* Top navbar with logo and tabs */
    .top-navbar {
        background-color: #3C3C3C;
        height: var(--navbar-height);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 100;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .navbar-container {
        max-width: 1400px;
        margin: 0 auto;
        height: 100%;
        display: flex;
        align-items: center;
        padding: 0 20px;
    }

    .navbar-branding {
        display: flex;
        align-items: center;
        margin-left: 20px;
    }

    .navbar-logo {
        height: 40px;
        margin-left: 10px;
    }

    .navbar-title {
        color: var(--primary-red);
        font-weight: 900; /* Keep the text bold */
        font-size: 20px; /* Adjust the size as needed */
        white-space: nowrap;
        font-family: 'Press Start 2P', sans-serif; /* Use the pixelated font */
        text-transform: uppercase; /* Optional: Make the text uppercase */
        text-shadow: -1px -1px 0 #000, /* Top-left */
        1px -1px 0 #000, /* Top-right */
        -1px 1px 0 #000, /* Bottom-left */
        1px 1px 0 #000; /* Bottom-right */
    }

    font -face {
        font-family: 'PixelHebrew';
        src: url('/fonts/PixelHebrew.ttf') format('truetype');
    }

    .navbar-title {
        color: var(--primary-red);
        font-weight: 900;
        font-size: 20px;
        white-space: nowrap;
        font-family: 'Press Start 2P', 'PixelHebrew', sans-serif; /* Fallback to Hebrew font */
        text-transform: uppercase;
        text-shadow: -1px -1px 0 #000, /* Top-left */
        1px -1px 0 #000, /* Top-right */
        -1px 1px 0 #000, /* Bottom-left */
        1px 1px 0 #000; /* Bottom-right */
    }





    .navbar-tabs {
        display: flex;
        align-items: center;
        height: 100%;
        position: relative;
        overflow-x: auto;
        white-space: nowrap;
        flex-grow: 1;
    }

    .sliding-bar {
        position: absolute;
        bottom: 0;
        height: 3px;
        background-color: var(--primary-red);
        transition: all 0.3s ease-in-out;
    }

    .nav-tab {
        flex: 1;
        padding: 0 15px;
        height: 100%;
        background: none;
        border: none;
        color: var(--white);
        cursor: pointer;
        font-weight: bold;
        transition: 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .nav-tab.active {
            color: var(--primary-red);
        }

        .nav-tab:hover:not(.active) {
            background-color: rgba(255, 255, 255, 0.05);
        }

    /* Content area */
    .content-container {
        margin-top: var(--navbar-height);
        flex-grow: 1;
        background: var(--background);
        padding: 20px;
    }

    .content-area {
        background-color: var(--content-bg);
        border-radius: 8px;
        padding: 25px;
        min-height: calc(100vh - var(--navbar-height) - 40px);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
    }
</style>

@code {
    private string ActiveTab = "equipment";
    private double SlidingBarPosition = 0; // Position in percentage
    private double SlidingBarWidth = 12.5; // Width in percentage (100% / 8 buttons)

    protected override void OnInitialized()
    {
        // Set the initial position of the sliding bar based on the default active tab
        int defaultTabIndex = GetTabIndex(ActiveTab);
        SlidingBarPosition = defaultTabIndex * SlidingBarWidth; // Correct for RTL
    }

    private void ChangeTab(string tabName, int tabIndex)
    {
        Logger.LogInformation($"Changing tab to: {tabName}");
        ActiveTab = tabName;

        // Calculate the sliding bar position based on the tab index
        SlidingBarPosition = tabIndex * SlidingBarWidth; // Correct for RTL
    }

    private int GetTabIndex(string tabName)
    {
        return tabName switch
        {
            "equipment" => 0,
            "blacklist" => 1,
            "request" => 2,
            "teams" => 3,
            "users" => 4,
            "checkout" => 5,
            "return" => 6,
            "add" => 7,
            _ => 0
        };
    }
}
