@page "/request-role"
@using System.ComponentModel.DataAnnotations
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@attribute [Authorize]
@* Users must be logged in to request role changes *@

<style>
    .container-center {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #1e1e2f;
        direction: rtl;
    }

    .card-dark {
        background-color: #1e1e1e;
        padding: 2rem;
        border-radius: 8px;
        width: 100%;
        max-width: 500px;
        box-shadow: 0 0 16px rgba(0, 0, 0, 0.6);
        color: white;
        text-align: center;
    }

        .card-dark img.logo {
            width: 100px;
            margin-bottom: 1rem;
        }

    h4 {
        margin-bottom: 1rem;
        color: #dc3545;
    }

    label {
        margin-bottom: 0.5rem;
        display: block;
        font-weight: 500;
        text-align: right;
    }

    .form-control {
        background-color: #2a2a2a;
        border: 1px solid #444;
        color: white;
        border-radius: 5px;
        padding: 0.5rem;
    }

        .form-control:focus {
            border-color: #dc3545;
            outline: none;
        }

    .form-select {
        background-color: #2a2a2a;
        border: 1px solid #444;
        color: white;
        border-radius: 5px;
        padding: 0.5rem;
    }

        .form-select:focus {
            border-color: #dc3545;
            outline: none;
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        width: 100%;
        padding: 0.5rem;
        margin-top: 1rem;
    }

        .btn-danger:disabled {
            opacity: 0.6;
        }

    .alert-danger {
        background-color: #dc3545;
        color: white;
        margin-top: 1rem;
        padding: 0.75rem;
        border-radius: 6px;
    }

    .alert-success {
        background-color: #28a745;
        color: white;
        margin-top: 1rem;
        padding: 0.75rem;
        border-radius: 6px;
    }

    .bottom-link {
        text-align: center;
        margin-top: 1rem;
    }

        .bottom-link a {
            color: #0d6efd;
            text-decoration: none;
        }

            .bottom-link a:hover {
                text-decoration: underline;
            }

    .history-card {
        background-color: #2a2a2a;
        border-radius: 8px;
        margin-top: 2rem;
        padding: 1rem;
    }

    .history-item {
        border-bottom: 1px solid #444;
        padding: 0.75rem 0;
    }

        .history-item:last-child {
            border-bottom: none;
        }

    .status-pending {
        color: #ffc107;
    }

    .status-approved {
        color: #28a745;
    }

    .status-rejected {
        color: #dc3545;
    }
</style>

<div class="container-center">
    <div class="card-dark">
        <img src="images/logo_png.png.jpg" alt="Logo" class="logo" />
        <h4>בקשת העלאת הרשאות</h4>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert-success">@successMessage</div>
        }

        @if (userRequestHistory != null && userRequestHistory.Any())
        {
            <div class="history-card">
                <h5>היסטוריית בקשות</h5>
                @foreach (var request in userRequestHistory)
                {
                    <div class="history-item">
                        <p><strong>תפקיד מבוקש:</strong> @GetRoleDisplayName(request.RequestedRole)</p>
                        <p>
                            <strong>סטטוס:</strong>
                            <span class="@GetStatusClass(request.Status)">@GetStatusDisplayName(request.Status)</span>
                        </p>
                        <p><strong>תאריך בקשה:</strong> @request.RequestDate.ToString("dd/MM/yyyy")</p>
                    </div>
                }
            </div>
        }

        @if (!showRequestForm && !pendingRequestExists)
        {
            <button class="btn btn-danger mt-4" @onclick="ShowRequestForm">בקש העלאת הרשאות</button>
        }

        @if (pendingRequestExists)
        {
            <p class="mt-3">יש לך כבר בקשה פתוחה שמחכה לאישור. לא ניתן להגיש בקשה נוספת בשלב זה.</p>
        }

        @if (showRequestForm && !pendingRequestExists)
        {
            <EditForm Model="@roleRequest" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3 text-start">
                    <label for="requestedRole">תפקיד מבוקש</label>
                    <InputSelect @bind-Value="roleRequest.RequestedRole" id="requestedRole" class="form-select">
                        <option value="">בחר תפקיד</option>
                        <option value="WarehouseOperator">מפעיל מחסן</option>
                        <option value="WarehouseManager">מנהל מחסן</option>
                        <option value="Admin">מנהל מערכת</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => roleRequest.RequestedRole)" />
                </div>

                <div class="form-group mb-3 text-start">
                    <label for="reason">נימוק לבקשה</label>
                    <InputTextArea @bind-Value="roleRequest.Reason" id="reason" class="form-control" rows="5" />
                    <ValidationMessage For="@(() => roleRequest.Reason)" />
                    <small class="text-muted">יש לציין בהרחבה מדוע אתה מבקש לקבל את ההרשאות המבוקשות</small>
                </div>

                <button type="submit" class="btn btn-danger" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span>שולח בקשה...</span>
                    }
                    else
                    {
                        <span>שלח בקשה</span>
                    }
                </button>

                <button type="button" class="btn btn-outline-secondary mt-2" style="width: 100%" @onclick="CancelRequest">בטל</button>
            </EditForm>
        }

        <div class="bottom-link">
            <a href="/">חזור לדף הבית</a>
        </div>
    </div>
</div>

@code {
    private RoleRequestModel roleRequest = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isSubmitting = false;
    private bool showRequestForm = false;
    private List<RoleRequestHistoryItem>? userRequestHistory;
    private bool pendingRequestExists = false;
    private int currentUserId = 0;

    public class UserDto
    {
        public int UserID { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get the current user's info from local storage
            var user = await LocalStorage.GetItemAsync<UserDto>("user");
            if (user != null)
            {
                currentUserId = user.UserID;
                await LoadUserRequestHistory();
            }
            else
            {
                // If user is not found in local storage, redirect to login
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת המידע: {ex.Message}";
        }
    }

    private async Task LoadUserRequestHistory()
    {
        try
        {
            // Get the authentication token
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Set the authorization header
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Get the user's request history
            var response = await Http.GetAsync($"api/role-requests/my-requests");

            if (response.IsSuccessStatusCode)
            {
                userRequestHistory = await response.Content.ReadFromJsonAsync<List<RoleRequestHistoryItem>>();

                // Check if there's a pending request
                pendingRequestExists = userRequestHistory?.Any(r => r.Status == "Pending") ?? false;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"שגיאה בטעינת היסטוריית הבקשות: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת היסטוריית הבקשות: {ex.Message}";
        }
    }

    private void ShowRequestForm()
    {
        showRequestForm = true;
    }

    private void CancelRequest()
    {
        showRequestForm = false;
        roleRequest = new RoleRequestModel();
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            // Get the authentication token
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Set the authorization header
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Submit the request
            var response = await Http.PostAsJsonAsync("api/role-requests", roleRequest);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "הבקשה נשלחה בהצלחה! המנהל יעבור על הבקשה בהקדם.";
                showRequestForm = false;
                roleRequest = new RoleRequestModel();

                // Reload the history to show the new request
                await LoadUserRequestHistory();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"שגיאה בשליחת הבקשה: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה: {ex.Message}";
        }

        isSubmitting = false;
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "User" => "משתמש",
            "WarehouseOperator" => "פ.מחסן",
            "WarehouseManager" => "א.מחסן",
            "Admin" => "מנהל",
            _ => role
        };
    }

    private string GetStatusDisplayName(string status)
    {
        return status switch
        {
            "Pending" => "ממתין לאישור",
            "Approved" => "אושר",
            "Rejected" => "נדחה",
            _ => status
        };
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "status-pending",
            "Approved" => "status-approved",
            "Rejected" => "status-rejected",
            _ => ""
        };
    }

    public class RoleRequestModel
    {
        [Required(ErrorMessage = "יש לבחור תפקיד")]
        public string RequestedRole { get; set; } = string.Empty;

        [Required(ErrorMessage = "יש להזין נימוק לבקשה")]
        [MinLength(10, ErrorMessage = "אנא פרט את הנימוק בלפחות 10 תווים")]
        public string Reason { get; set; } = string.Empty;
    }

    public class RoleRequestHistoryItem
    {
        public int RequestID { get; set; }
        public string CurrentRole { get; set; } = string.Empty;
        public string RequestedRole { get; set; } = string.Empty;
        public string Reason { get; set; } = string.Empty;
        public DateTime RequestDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public string? AdminNotes { get; set; }
        public DateTime? ProcessedDate { get; set; }
    }
}
