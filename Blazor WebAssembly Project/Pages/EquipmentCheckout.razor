@page "/equipment/checkout"
@attribute [Authorize(Roles = "Operator,Manager")]
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Equipment Checkout</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Equipment Checkout</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Team Selection</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="teamSelect" class="form-label">Select Team</label>
                        <select id="teamSelect" class="form-select" @bind="_selectedTeamId">
                            <option value="0">-- Select Team --</option>
                            @foreach (var team in _teams)
                            {
                                <option value="@team.Id">@team.Name</option>
                            }
                        </select>
                    </div>

                    @if (_selectedTeamId > 0)
                    {
                        <div class="mb-3">
                            <label for="memberSelect" class="form-label">Select Team Member</label>
                            <select id="memberSelect" class="form-select" @bind="_selectedMemberId">
                                <option value="0">-- Select Member --</option>
                                @foreach (var member in _filteredMembers)
                                {
                                    <option value="@member.Id">@member.Name (@member.Role)</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="checkoutDate" class="form-label">Checkout Date</label>
                            <input type="date" id="checkoutDate" class="form-control" @bind="_checkoutDate" />
                        </div>

                        <div class="mb-3">
                            <label for="expectedReturnDate" class="form-label">Expected Return Date</label>
                            <input type="date" id="expectedReturnDate" class="form-control" @bind="_expectedReturnDate" />
                        </div>

                        <div class="mb-3">
                            <label for="purpose" class="form-label">Purpose</label>
                            <textarea id="purpose" class="form-control" rows="3" @bind="_purpose"></textarea>
                        </div>
                    }

                    @if (_isTeamBlacklisted)
                    {
                        <div class="alert alert-danger mt-3">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Warning:</strong> This team is currently blacklisted and cannot check out equipment.
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Equipment Selection</h5>
                        <div class="input-group" style="width: 300px;">
                            <input type="text" class="form-control" placeholder="Search equipment..." @bind="_searchTerm" @bind:event="oninput" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="FilterEquipment">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Filter by Category</label>
                        <div class="d-flex flex-wrap gap-2">
                            <button class="btn @(_selectedCategory == null ? "btn-primary" : "btn-outline-primary")"
                                    @onclick="() => FilterByCategory(null)">
                                All
                            </button>
                            @foreach (var category in _categories)
                            {
                                <button class="btn @(_selectedCategory == category ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="() => FilterByCategory(category)">
                                    @category
                                </button>
                            }
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th>Category</th>
                                    <th>Available</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_filteredEquipment.Any())
                                {
                                    @foreach (var item in _filteredEquipment)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="equipment-icon me-2">
                                                        <i class="@GetEquipmentIcon(item.Category)"></i>
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-0">@item.Name</h6>
                                                        <small class="text-muted">ID: @item.InventoryNumber</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@item.Category</td>
                                            <td>@item.AvailableQuantity</td>
                                            <td>
                                                <button class="btn btn-sm @(IsItemSelected(item) ? "btn-success" : "btn-outline-primary")"
                                                        @onclick="() => ToggleItemSelection(item)"
                                                        disabled="@(_isTeamBlacklisted || item.AvailableQuantity <= 0)">
                                                    @if (IsItemSelected(item))
                                                    {
                                                        <span><i class="fas fa-check me-1"></i> Selected</span>
                                                    }
                                                    else
                                                    {
                                                        <span>Select</span>
                                                    }
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center py-3">No equipment found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Selected Equipment</h5>
                </div>
                <div class="card-body">
                    @if (_selectedEquipment.Any())
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th>Quantity</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in _selectedEquipment)
                                    {
                                        <tr>
                                            <td>@item.Name</td>
                                            <td>
                                                <div class="input-group" style="width: 120px;">
                                                    <button class="btn btn-outline-secondary" type="button"
                                                            @onclick="() => DecreaseQuantity(item)"
                                                            disabled="@(item.SelectedQuantity <= 1)">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <input type="number" class="form-control text-center" value="@item.SelectedQuantity" min="1" max="@item.AvailableQuantity" readonly />
                                                    <button class="btn btn-outline-secondary" type="button"
                                                            @onclick="() => IncreaseQuantity(item)"
                                                            disabled="@(item.SelectedQuantity >= item.AvailableQuantity)">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <p class="mb-0">No equipment selected.</p>
                        </div>
                    }
                </div>
                <div class="card-footer bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Total Items: @_selectedEquipment.Sum(e => e.SelectedQuantity)</span>
                        <button class="btn btn-primary"
                                @onclick="ProcessCheckout"
                                disabled="@(!CanProcessCheckout())">
                            <i class="fas fa-clipboard-check me-1"></i> Process Checkout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Sample Data
    private List<Team> _teams = new()
    {
        new Team { Id = 1, Name = "Alpha Team" },
        new Team { Id = 2, Name = "Bravo Team" },
        new Team { Id = 3, Name = "Charlie Team", IsBlacklisted = true },
        new Team { Id = 4, Name = "Delta Team" }
    };

    private List<TeamMember> _teamMembers = new()
    {
        new TeamMember { Id = 1, TeamId = 1, Name = "John Smith", Role = "Team Leader" },
        new TeamMember { Id = 2, TeamId = 1, Name = "Jane Doe", Role = "Equipment Manager" },
        new TeamMember { Id = 3, TeamId = 2, Name = "Robert Johnson", Role = "Team Leader" },
        new TeamMember { Id = 4, TeamId = 2, Name = "Emily Davis", Role = "Member" },
        new TeamMember { Id = 5, TeamId = 3, Name = "Michael Wilson", Role = "Team Leader" },
        new TeamMember { Id = 6, TeamId = 4, Name = "Sarah Martinez", Role = "Team Leader" }
    };

    private List<EquipmentItem> _equipment = new()
    {
        new EquipmentItem
        {
            Id = 1,
            InventoryNumber = "EQ001",
            Name = "Tactical Radio",
            Category = "Communication",
            AvailableQuantity = 15
        },
        new EquipmentItem
        {
            Id = 2,
            InventoryNumber = "EQ002",
            Name = "Night Vision Goggles",
            Category = "Observation",
            AvailableQuantity = 8
        },
        new EquipmentItem
        {
            Id = 3,
            InventoryNumber = "EQ003",
            Name = "Tactical Vest",
            Category = "Personal Protection",
            AvailableQuantity = 20
        },
        new EquipmentItem
        {
            Id = 4,
            InventoryNumber = "EQ004",
            Name = "First Aid Kit",
            Category = "Medical",
            AvailableQuantity = 25
        },
        new EquipmentItem
        {
            Id = 5,
            InventoryNumber = "EQ005",
            Name = "Field Binoculars",
            Category = "Observation",
            AvailableQuantity = 12
        }
    };

    // Form data
    private int _selectedTeamId = 0;
    private int _selectedMemberId = 0;
    private DateTime _checkoutDate = DateTime.Today;
    private DateTime _expectedReturnDate = DateTime.Today.AddDays(7);
    private string _purpose = "";
    private bool _isTeamBlacklisted => _teams.FirstOrDefault(t => t.Id == _selectedTeamId)?.IsBlacklisted ?? false;

    // Equipment selection
    private List<TeamMember> _filteredMembers => _teamMembers.Where(m => m.TeamId == _selectedTeamId).ToList();
    private List<EquipmentItem> _selectedEquipment = new();
    private List<EquipmentItem> _filteredEquipment;
    private string _searchTerm = "";
    private string? _selectedCategory = null;
    private List<string> _categories => _equipment.Select(e => e.Category).Distinct().ToList();

    protected override void OnInitialized()
    {
        _filteredEquipment = _equipment.ToList();
    }

    private void FilterEquipment()
    {
        _filteredEquipment = _equipment.Where(e =>
            (string.IsNullOrWhiteSpace(_searchTerm) || e.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (_selectedCategory == null || e.Category == _selectedCategory)
        ).ToList();
    }

    private void FilterByCategory(string? category)
    {
        _selectedCategory = category;
        FilterEquipment();
    }

    private bool IsItemSelected(EquipmentItem item)
    {
        return _selectedEquipment.Any(e => e.Id == item.Id);
    }

    private void ToggleItemSelection(EquipmentItem item)
    {
        if (IsItemSelected(item))
        {
            _selectedEquipment.RemoveAll(e => e.Id == item.Id);
        }
        else
        {
            var selectedItem = new EquipmentItem
            {
                Id = item.Id,
                Name = item.Name,
                Category = item.Category,
                InventoryNumber = item.InventoryNumber,
                AvailableQuantity = item.AvailableQuantity,
                SelectedQuantity = 1
            };
            _selectedEquipment.Add(selectedItem);
        }
    }

    private void IncreaseQuantity(EquipmentItem item)
    {
        if (item.SelectedQuantity < item.AvailableQuantity)
        {
            item.SelectedQuantity++;
        }
    }

    private void DecreaseQuantity(EquipmentItem item)
    {
        if (item.SelectedQuantity > 1)
        {
            item.SelectedQuantity--;
        }
    }

    private void RemoveItem(EquipmentItem item)
    {
        _selectedEquipment.RemoveAll(e => e.Id == item.Id);
    }

    private bool CanProcessCheckout()
    {
        return _selectedTeamId > 0 &&
               _selectedMemberId > 0 &&
               !string.IsNullOrWhiteSpace(_purpose) &&
               _selectedEquipment.Any() &&
               !_isTeamBlacklisted &&
               _expectedReturnDate > _checkoutDate;
    }

    private void ProcessCheckout()
    {
        // Process checkout logic would be implemented here
        // After successful checkout, redirect to confirmation or checkout history
        NavigationManager.NavigateTo("/equipment/checkout/confirmation");
    }

    private string GetEquipmentIcon(string category)
    {
        return category switch
        {
            "Communication" => "fas fa-satellite-dish",
            "Observation" => "fas fa-binoculars",
            "Personal Protection" => "fas fa-shield-alt",
            "Medical" => "fas fa-first-aid",
            "Navigation" => "fas fa-compass",
            _ => "fas fa-box"
        };
    }

    // Model classes
    private class Team
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public bool IsBlacklisted { get; set; }
    }

    private class TeamMember
    {
        public int Id { get; set; }
        public int TeamId { get; set; }
        public string Name { get; set; } = "";
        public string Role { get; set; } = "";
    }

    private class EquipmentItem
    {
        public int Id { get; set; }
        public string InventoryNumber { get; set; } = "";
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public int AvailableQuantity { get; set; }
        public int SelectedQuantity { get; set; } = 1;
    }
}