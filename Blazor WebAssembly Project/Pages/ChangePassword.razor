@page "/user/change-password"
@attribute [Authorize]
@using Blazor_WebAssembly.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Change Password</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Change Password</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Update Your Password</h5>
                </div>
                <div class="card-body">
                    @if (_isSuccess)
                    {
                        <div class="alert alert-success">
                            <p>Your password has been changed successfully!</p>
                        </div>
                        <div class="text-center mt-3">
                            <a href="/" class="btn btn-primary">Return to Dashboard</a>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger">@_errorMessage</div>
                        }

                        <EditForm Model="@_changePasswordModel" OnValidSubmit="HandleChangePassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">Current Password</label>
                                <InputText @bind-Value="_changePasswordModel.CurrentPassword" class="form-control" id="currentPassword" type="password" />
                                <ValidationMessage For="@(() => _changePasswordModel.CurrentPassword)" />
                            </div>

                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <InputText @bind-Value="_changePasswordModel.NewPassword" class="form-control" id="newPassword" type="password" />
                                <ValidationMessage For="@(() => _changePasswordModel.NewPassword)" />
                            </div>

                            <div class="mb-4">
                                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                                <InputText @bind-Value="_changePasswordModel.ConfirmPassword" class="form-control" id="confirmPassword" type="password" />
                                <ValidationMessage For="@(() => _changePasswordModel.ConfirmPassword)" />
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Update Password</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ChangePasswordModel _changePasswordModel = new();
    private bool _isProcessing = false;
    private bool _isSuccess = false;
    private string? _errorMessage;

    private async Task HandleChangePassword()
    {
        _isProcessing = true;
        _errorMessage = null;

        try
        {
            if (_changePasswordModel.NewPassword != _changePasswordModel.ConfirmPassword)
            {
                _errorMessage = "New passwords do not match";
                return;
            }

            var result = await AuthService.ChangePassword(
                _changePasswordModel.CurrentPassword,
                _changePasswordModel.NewPassword);

            if (result)
            {
                _isSuccess = true;
            }
            else
            {
                _errorMessage = "Failed to change password. Please check your current password and try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = "";

        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}