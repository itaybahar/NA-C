@page "/equipment/requests/new"
@page "/equipment/requests/edit/{RequestId:int}"
@using Blazor_WebAssembly.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>@PageTitle</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/equipment/requests">Equipment Requests</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@PageTitle</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <i class="fas fa-arrow-left me-1"></i> Back
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading...</p>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Request Information</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@requestModel" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="equipmentType" class="form-label">Equipment Type <span class="text-danger">*</span></label>
                                        <InputSelect id="equipmentType" class="form-select" @bind-Value="requestModel.EquipmentTypeId">
                                            <option value="0">-- Select Equipment Type --</option>
                                            @foreach (var type in equipmentTypes)
                                            {
                                                <option value="@type.Id">@type.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => requestModel.EquipmentTypeId)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="customEquipment" class="form-label">
                                            Custom Equipment Name
                                            <small class="text-muted">(if not in the list)</small>
                                        </label>
                                        <InputText id="customEquipment" class="form-control" @bind-Value="requestModel.CustomEquipmentName" />
                                        <ValidationMessage For="@(() => requestModel.CustomEquipmentName)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="quantity" class="form-label">Quantity <span class="text-danger">*</span></label>
                                        <InputNumber id="quantity" class="form-control" @bind-Value="requestModel.Quantity" min="1" />
                                        <ValidationMessage For="@(() => requestModel.Quantity)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="estimatedCost" class="form-label">Estimated Cost (per unit)</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber id="estimatedCost" class="form-control" @bind-Value="requestModel.EstimatedCostPerUnit" />
                                        </div>
                                        <ValidationMessage For="@(() => requestModel.EstimatedCostPerUnit)" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="justification" class="form-label">Justification <span class="text-danger">*</span></label>
                                <InputTextArea id="justification" class="form-control" rows="3" @bind-Value="requestModel.Justification" />
                                <ValidationMessage For="@(() => requestModel.Justification)" />
                                <div class="form-text">Explain why this equipment is needed and how it will be used.</div>
                            </div>

                            <div class="mb-3">
                                <label for="specifications" class="form-label">Specifications/Requirements</label>
                                <InputTextArea id="specifications" class="form-control" rows="3" @bind-Value="requestModel.Specifications" />
                                <ValidationMessage For="@(() => requestModel.Specifications)" />
                                <div class="form-text">Provide any specific requirements, models, or features needed.</div>
                            </div>

                            <div class="mb-3">
                                <label for="vendorInfo" class="form-label">Vendor Information (Optional)</label>
                                <InputTextArea id="vendorInfo" class="form-control" rows="2" @bind-Value="requestModel.VendorInformation" />
                            </div>

                            <div class="mb-3">
                                <label for="dateNeeded" class="form-label">Date Needed <span class="text-danger">*</span></label>
                                <InputDate id="dateNeeded" class="form-control" @bind-Value="requestModel.DateNeeded" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                                <ValidationMessage For="@(() => requestModel.DateNeeded)" />
                            </div>

                            <div class="form-check mb-3">
                                <InputCheckbox id="isUrgent" class="form-check-input" @bind-Value="requestModel.IsUrgent" />
                                <label class="form-check-label" for="isUrgent">
                                    Mark as Urgent
                                </label>
                            </div>

                            @if (requestModel.IsUrgent)
                            {
                                <div class="mb-3">
                                    <label for="urgencyReason" class="form-label">Reason for Urgency <span class="text-danger">*</span></label>
                                    <InputTextArea id="urgencyReason" class="form-control" rows="2" @bind-Value="requestModel.UrgencyReason" />
                                    <ValidationMessage For="@(() => requestModel.UrgencyReason)" />
                                </div>
                            }

                            <div class="mb-3">
                                <label for="additionalNotes" class="form-label">Additional Notes</label>
                                <InputTextArea id="additionalNotes" class="form-control" rows="2" @bind-Value="requestModel.AdditionalNotes" />
                            </div>

                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateBack">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span>@(IsEditMode ? "Update Request" : "Submit Request")</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Request Guidelines</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6 class="text-primary">Important Information</h6>
                            <ul>
                                <li>All equipment requests must be approved by department management.</li>
                                <li>Requests marked as urgent will be prioritized but require additional justification.</li>
                                <li>Include as much detail as possible to avoid delays in processing.</li>
                                <li>Estimated costs help with budgeting but are not required.</li>
                            </ul>
                        </div>
                        <div class="mb-3">
                            <h6 class="text-primary">Request Process</h6>
                            <ol>
                                <li>Submit request with all required information</li>
                                <li>Request is reviewed by management</li>
                                <li>If approved, the order will be placed</li>
                                <li>You will be notified when the equipment arrives</li>
                            </ol>
                        </div>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            For urgent needs or questions, please contact the warehouse manager directly.
                        </div>
                    </div>
                </div>

                @if (IsEditMode)
                {
                    <div class="card shadow-sm">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Request Status</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <strong>Current Status:</strong>
                                <span class="badge @GetStatusBadgeClass(requestStatus) ms-2">@requestStatus</span>
                            </div>
                            <div class="mb-3">
                                <strong>Submitted On:</strong>
                                <p class="mb-0">@requestDate.ToShortDateString()</p>
                            </div>

                            @if (!string.IsNullOrEmpty(reviewerNotes))
                            {
                                <div class="mb-3">
                                    <strong>Reviewer Notes:</strong>
                                    <p class="mb-0">@reviewerNotes</p>
                                </div>
                            }

                            @if (requestStatus == "Pending")
                            {
                                <button class="btn btn-outline-danger btn-sm w-100" @onclick="ShowCancelModal">
                                    <i class="fas fa-times me-1"></i> Cancel Request
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (showCancelModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cancel Request</h5>
                        <button type="button" class="btn-close" @onclick="CloseCancelModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to cancel this request?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCancelModal">Go Back</button>
                        <button type="button" class="btn btn-danger" @onclick="CancelRequest">
                            Cancel Request
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    [Parameter]
    public int? RequestId { get; set; }

    private string PageTitle => IsEditMode ? "Edit Equipment Request" : "New Equipment Request";
    private bool IsEditMode => RequestId.HasValue && RequestId.Value > 0;

    private EquipmentRequestModel requestModel = new();
    private List<EquipmentTypeDto> equipmentTypes = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showCancelModal = false;

    // For edit mode only
    private string requestStatus = "Pending";
    private DateTime requestDate = DateTime.Now;
    private string reviewerNotes = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Load equipment types
            equipmentTypes = await Http.GetFromJsonAsync<List<EquipmentTypeDto>>("api/equipment/types");

            if (IsEditMode)
            {
                // Load existing request data
                var existingRequest = await Http.GetFromJsonAsync<EquipmentRequestDetailDto>($"api/equipment/requests/{RequestId}");
                if (existingRequest != null)
                {
                    MapFromDto(existingRequest);
                    requestStatus = existingRequest.Status;
                    requestDate = existingRequest.RequestDate;
                    reviewerNotes = existingRequest.ReviewerNotes;
                }
            }
            else
            {
                // Set defaults for new request
                requestModel.DateNeeded = DateTime.Now.AddDays(14);
            }
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            isLoading = false;
        }
    }

    private void MapFromDto(EquipmentRequestDetailDto dto)
    {
        requestModel.EquipmentTypeId = dto.EquipmentTypeId;
        requestModel.CustomEquipmentName = dto.CustomEquipmentName;
        requestModel.Quantity = dto.Quantity;
        requestModel.EstimatedCostPerUnit = dto.EstimatedCostPerUnit;
        requestModel.Justification = dto.Justification;
        requestModel.Specifications = dto.Specifications;
        requestModel.VendorInformation = dto.VendorInformation;
        requestModel.DateNeeded = dto.DateNeeded;
        requestModel.IsUrgent = dto.IsUrgent;
        requestModel.UrgencyReason = dto.UrgencyReason;
        requestModel.AdditionalNotes = dto.AdditionalNotes;
    }

    private async Task HandleSubmit()
    {
        if (!ValidateModel())
            return;

        try
        {
            isSaving = true;

            if (IsEditMode)
            {
                // Update existing request
                await Http.PutAsJsonAsync($"api/equipment/requests/{RequestId}", requestModel);
            }
            else
            {
                // Create new request
                await Http.PostAsJsonAsync("api/equipment/requests", requestModel);
            }

            // Navigate back to requests list
            NavigationManager.NavigateTo("/equipment/requests");
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            isSaving = false;
        }
    }

    private bool ValidateModel()
    {
        // Basic validation is handled by data annotations
        // This method can include additional complex validation

        if (requestModel.IsUrgent && string.IsNullOrWhiteSpace(requestModel.UrgencyReason))
        {
            // For urgent requests, urgency reason is required
            return false;
        }

        // Ensure at least one way to identify the equipment is provided
        if (requestModel.EquipmentTypeId == 0 && string.IsNullOrWhiteSpace(requestModel.CustomEquipmentName))
        {
            return false;
        }

        return true;
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/equipment/requests");
    }

    private void ShowCancelModal()
    {
        showCancelModal = true;
    }

    private void CloseCancelModal()
    {
        showCancelModal = false;
    }

    private async Task CancelRequest()
    {
        try
        {
            if (IsEditMode)
            {
                // Call API to cancel request
                await Http.DeleteAsync($"api/equipment/requests/{RequestId}");

                // Navigate back to requests list
                NavigationManager.NavigateTo("/equipment/requests");
            }
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            showCancelModal = false;
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            "Ordered" => "bg-info",
            "Received" => "bg-primary",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    public class EquipmentRequestModel
    {
        [Required(ErrorMessage = "Please select an equipment type or provide a custom name")]
        [Range(1, int.MaxValue, ErrorMessage = "Please select an equipment type")]
        public int EquipmentTypeId { get; set; }

        public string CustomEquipmentName { get; set; } = "";

        [Required(ErrorMessage = "Quantity is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; } = 1;

        [Range(0, double.MaxValue, ErrorMessage = "Cost cannot be negative")]
        public decimal? EstimatedCostPerUnit { get; set; }

        [Required(ErrorMessage = "Justification is required")]
        [MinLength(10, ErrorMessage = "Justification must be at least 10 characters")]
        public string Justification { get; set; } = "";

        public string Specifications { get; set; } = "";

        public string VendorInformation { get; set; } = "";

        [Required(ErrorMessage = "Date needed is required")]
        public DateTime DateNeeded { get; set; } = DateTime.Now.AddDays(14);

        public bool IsUrgent { get; set; } = false;

        public string UrgencyReason { get; set; } = "";

        public string AdditionalNotes { get; set; } = "";
    }

    public class EquipmentTypeDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
    }

    public class EquipmentRequestDetailDto
    {
        public int Id { get; set; }
        public int EquipmentTypeId { get; set; }
        public string CustomEquipmentName { get; set; } = "";
        public int Quantity { get; set; }
        public decimal? EstimatedCostPerUnit { get; set; }
        public string Justification { get; set; } = "";
        public string Specifications { get; set; } = "";
        public string VendorInformation { get; set; } = "";
        public DateTime DateNeeded { get; set; }
        public bool IsUrgent { get; set; }
        public string UrgencyReason { get; set; } = "";
        public string AdditionalNotes { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime RequestDate { get; set; }
        public string ReviewerNotes { get; set; } = "";
    }
}