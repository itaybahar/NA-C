@page "/teams/details/{TeamId:int}"
@using Blazor_WebAssembly.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Team Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/teams">Teams</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Team Details</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <i class="fas fa-arrow-left me-1"></i> Back
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading team details...</p>
            </div>
        </div>
    }
    else if (team != null)
    {
        <div class="row">
            <div class="col-md-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-header @(team.IsBlacklisted ? "bg-danger text-white" : "bg-light")">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@team.Name</h5>
                            <div>
                                @if (team.IsBlacklisted)
                                {
                                    <span class="badge bg-dark">Blacklisted</span>
                                }
                                else if (!team.IsActive)
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <div class="team-icon mb-3">
                                <i class="fas fa-users fa-4x text-primary"></i>
                            </div>
                        </div>

                        <h6 class="border-bottom pb-2 mb-3">Team Information</h6>
                        <div class="mb-3">
                            <div class="text-muted mb-1">Description</div>
                            <p>@team.Description</p>
                        </div>
                        <div class="mb-3">
                            <div class="text-muted mb-1">Team Leader</div>
                            <p class="mb-0">@team.TeamLeader</p>
                        </div>
                        <div class="mb-3">
                            <div class="text-muted mb-1">Status</div>
                            <p class="mb-0">
                                @if (team.IsBlacklisted)
                                {
                                    <span class="badge bg-danger">Blacklisted</span>
                                }
                                else if (team.IsActive)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </p>
                        </div>
                    </div>
                    <div class="card-footer bg-white">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-sm btn-outline-primary" @onclick="NavigateToMembers">
                                <i class="fas fa-users me-1"></i> View Members
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="NavigateToEdit">
                                <i class="fas fa-edit me-1"></i> Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Team Members</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (members != null && members.Any())
                                    {
                                        @foreach (var member in members)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <i class="fas fa-user-circle me-2 text-secondary"></i>
                                                        <span>@member.Name</span>
                                                    </div>
                                                </td>
                                                <td>@member.Role</td>
                                                <td>
                                                    @if (member.IsActive)
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Inactive</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="3" class="text-center py-3">No team members found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Active Checkouts</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Equipment</th>
                                        <th>Member</th>
                                        <th>Checkout Date</th>
                                        <th>Due Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (checkouts != null && checkouts.Any())
                                    {
                                        @foreach (var checkout in checkouts)
                                        {
                                            <tr>
                                                <td>@checkout.EquipmentName</td>
                                                <td>@checkout.MemberName</td>
                                                <td>@checkout.CheckoutDate.ToShortDateString()</td>
                                                <td>@checkout.DueDate.ToShortDateString()</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center py-3">No active checkouts found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Team not found.
        </div>
    }
</div>

@code {
    [Parameter]
    public int TeamId { get; set; }

    private TeamDto team;
    private List<TeamMemberDto> members;
    private List<CheckoutDto> checkouts;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Get team details
            team = await Http.GetFromJsonAsync<TeamDto>($"api/teams/{TeamId}");

            if (team != null)
            {
                // Get team members
                members = await Http.GetFromJsonAsync<List<TeamMemberDto>>($"api/teams/{TeamId}/members");

                // Get active checkouts
                checkouts = await Http.GetFromJsonAsync<List<CheckoutDto>>($"api/teams/{TeamId}/checkouts");
            }
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/teams");
    }

    private void NavigateToMembers()
    {
        NavigationManager.NavigateTo($"/teams/members/{TeamId}");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/teams/edit/{TeamId}");
    }

    // Simple DTO classes that match your API responses
    public class TeamDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string TeamLeader { get; set; }
        public bool IsActive { get; set; }
        public bool IsBlacklisted { get; set; }
    }

    public class TeamMemberDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Role { get; set; }
        public bool IsActive { get; set; }
    }

    public class CheckoutDto
    {
        public int Id { get; set; }
        public string EquipmentName { get; set; }
        public string MemberName { get; set; }
        public DateTime CheckoutDate { get; set; }
        public DateTime DueDate { get; set; }
    }
}