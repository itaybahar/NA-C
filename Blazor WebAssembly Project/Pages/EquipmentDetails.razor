@page "/equipment/details/{EquipmentId:int}"
@attribute [Authorize(Roles = "Operator,Manager")]
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Equipment Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/equipment/inventory">Equipment Inventory</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Equipment Details</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <div class="btn-group">
                <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                    <i class="fas fa-arrow-left me-1"></i> Back
                </button>
                @if (_isManager)
                {
                    <button class="btn btn-primary" @onclick="NavigateToEdit">
                        <i class="fas fa-edit me-1"></i> Edit
                    </button>
                }
            </div>
        </div>
    </div>

    @if (_equipment != null)
    {
        <div class="row">
            <div class="col-md-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-body text-center">
                        <div class="equipment-icon-large mb-3">
                            <i class="@GetEquipmentIcon(_equipment.Category) fa-4x"></i>
                        </div>
                        <h3>@_equipment.Name</h3>
                        <p class="text-muted">ID: @_equipment.InventoryNumber</p>
                        <div class="d-flex justify-content-around mt-4">
                            <div>
                                <h4>@_equipment.AvailableQuantity</h4>
                                <p class="text-muted">Available</p>
                            </div>
                            <div>
                                <h4>@_equipment.TotalQuantity</h4>
                                <p class="text-muted">Total</p>
                            </div>
                        </div>
                        <span class="badge @GetStatusBadgeClass(_equipment.Status) mt-2">@_equipment.Status</span>
                    </div>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Equipment Information</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Category</span>
                                <span class="fw-bold">@_equipment.Category</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Added Date</span>
                                <span class="fw-bold">@_equipment.AddedDate.ToShortDateString()</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Last Maintenance</span>
                                <span class="fw-bold">@(_equipment.LastMaintenanceDate?.ToShortDateString() ?? "N/A")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Condition</span>
                                <span class="fw-bold">@_equipment.Condition</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Last Updated</span>
                                <span class="fw-bold">@_equipment.LastUpdated.ToShortDateString()</span>
                            </li>
                        </ul>
                    </div>
                </div>

                @if (_isManager)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Actions</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <button class="btn btn-outline-primary" @onclick="ScheduleMaintenance">
                                    <i class="fas fa-tools me-1"></i> Schedule Maintenance
                                </button>
                                <button class="btn btn-outline-danger" @onclick="ShowDeleteConfirmation">
                                    <i class="fas fa-trash me-1"></i> Delete Equipment
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Description</h5>
                    </div>
                    <div class="card-body">
                        <p>@_equipment.Description</p>
                        @if (_equipment.Notes != null && _equipment.Notes.Any())
                        {
                            <div class="mt-3">
                                <h6>Notes:</h6>
                                <ul>
                                    @foreach (var note in _equipment.Notes)
                                    {
                                        <li>@note</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Checkout History</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Team</th>
                                        <th>Member</th>
                                        <th>Quantity</th>
                                        <th>Return Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (_checkoutHistory.Any())
                                    {
                                        @foreach (var history in _checkoutHistory)
                                        {
                                            <tr>
                                                <td>@history.CheckoutDate.ToShortDateString()</td>
                                                <td>@history.TeamName</td>
                                                <td>@history.MemberName</td>
                                                <td>@history.Quantity</td>
                                                <td>@(history.ReturnDate?.ToShortDateString() ?? "-")</td>
                                                <td>
                                                    <span class="badge @GetCheckoutStatusBadgeClass(history.Status)">
                                                        @history.Status
                                                    </span>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center py-3">No checkout history available.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Maintenance History</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Performed By</th>
                                        <th>Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (_maintenanceHistory.Any())
                                    {
                                        @foreach (var maintenance in _maintenanceHistory)
                                        {
                                            <tr>
                                                <td>@maintenance.Date.ToShortDateString()</td>
                                                <td>@maintenance.Type</td>
                                                <td>@maintenance.PerformedBy</td>
                                                <td>@maintenance.Notes</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center py-3">No maintenance history available.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h5>Loading equipment details...</h5>
            </div>
        </div>
    }

    @if (_showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete <strong>@_equipment?.Name</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (_showMaintenanceModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Schedule Maintenance</h5>
                        <button type="button" class="btn-close" @onclick="CancelMaintenance"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="maintenanceType" class="form-label">Maintenance Type</label>
                            <select id="maintenanceType" class="form-select" @bind="_maintenanceType">
                                <option value="Routine">Routine</option>
                                <option value="Repair">Repair</option>
                                <option value="Calibration">Calibration</option>
                                <option value="Inspection">Inspection</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="maintenanceDate" class="form-label">Scheduled Date</label>
                            <input type="date" id="maintenanceDate" class="form-control" @bind="_maintenanceDate" />
                        </div>
                        <div class="mb-3">
                            <label for="maintenanceNotes" class="form-label">Notes</label>
                            <textarea id="maintenanceNotes" class="form-control" rows="3" @bind="_maintenanceNotes"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelMaintenance">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmMaintenance">Schedule</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    [Parameter]
    public int EquipmentId { get; set; }

    private EquipmentItem? _equipment;
    private List<CheckoutHistoryItem> _checkoutHistory = new();
    private List<MaintenanceHistoryItem> _maintenanceHistory = new();
    private bool _isManager = true; // This would normally be determined from user role
    private bool _showDeleteConfirmation = false;
    private bool _showMaintenanceModal = false;

    // Maintenance modal data
    private string _maintenanceType = "Routine";
    private DateTime _maintenanceDate = DateTime.Today.AddDays(7);
    private string _maintenanceNotes = "";

    protected override void OnInitialized()
    {
        // Sample data - in a real app this would come from a service
        _equipment = GetSampleEquipment(EquipmentId);
        _checkoutHistory = GetSampleCheckoutHistory(EquipmentId);
        _maintenanceHistory = GetSampleMaintenanceHistory(EquipmentId);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/equipment/inventory");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/equipment/edit/{EquipmentId}");
    }

    private void ShowDeleteConfirmation()
    {
        _showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
    }

    private void ConfirmDelete()
    {
        // Delete logic would go here
        _showDeleteConfirmation = false;
        NavigationManager.NavigateTo("/equipment/inventory");
    }

    private void ScheduleMaintenance()
    {
        _showMaintenanceModal = true;
    }

    private void CancelMaintenance()
    {
        _showMaintenanceModal = false;
    }

    private void ConfirmMaintenance()
    {
        // Schedule maintenance logic would go here
        _showMaintenanceModal = false;

        // In a real app, you would update the database and then refresh the data
        // For demo purposes, we'll add the new maintenance to the list
        _maintenanceHistory.Add(new MaintenanceHistoryItem
        {
            Date = _maintenanceDate,
            Type = _maintenanceType,
            PerformedBy = "Current User",
            Notes = _maintenanceNotes
        });
    }

    private string GetEquipmentIcon(string category)
    {
        return category switch
        {
            "Communication" => "fas fa-satellite-dish",
            "Observation" => "fas fa-binoculars",
            "Personal Protection" => "fas fa-shield-alt",
            "Medical" => "fas fa-first-aid",
            "Navigation" => "fas fa-compass",
            _ => "fas fa-box"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Available" => "bg-success",
            "CheckedOut" => "bg-warning",
            "Maintenance" => "bg-info",
            "Retired" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetCheckoutStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-warning",
            "Returned" => "bg-success",
            "Overdue" => "bg-danger",
            "Lost" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    // Sample data methods
    private EquipmentItem? GetSampleEquipment(int id)
    {
        var equipmentItems = new List<EquipmentItem>
        {
            new EquipmentItem
            {
                Id = 1,
                InventoryNumber = "EQ001",
                Name = "Tactical Radio",
                Category = "Communication",
                Description = "Military-grade tactical radio with encryption capabilities. Range of up to 10 miles in open terrain. Waterproof and shock resistant.",
                AvailableQuantity = 15,
                TotalQuantity = 20,
                Status = "Available",
                Condition = "Good",
                AddedDate = DateTime.Now.AddMonths(-6),
                LastUpdated = DateTime.Now.AddDays(-5),
                LastMaintenanceDate = DateTime.Now.AddMonths(-1),
                Notes = new List<string>
                {
                    "Batteries need to be replaced every 24 hours of active use",
                    "Keep away from strong magnetic fields"
                }
            },
            new EquipmentItem
            {
                Id = 2,
                InventoryNumber = "EQ002",
                Name = "Night Vision Goggles",
                Category = "Observation",
                Description = "Generation 3 night vision goggles with infrared illuminator. Provides clear vision in total darkness and low-light conditions.",
                AvailableQuantity = 8,
                TotalQuantity = 12,
                Status = "Available",
                Condition = "Excellent",
                AddedDate = DateTime.Now.AddMonths(-3),
                LastUpdated = DateTime.Now.AddDays(-3),
                LastMaintenanceDate = DateTime.Now.AddDays(-14),
                Notes = new List<string>
                {
                    "Store in protective case when not in use",
                    "Avoid exposure to bright light when activated"
                }
            },
            new EquipmentItem
            {
                Id = 3,
                InventoryNumber = "EQ003",
                Name = "Tactical Vest",
                Category = "Personal Protection",
                Description = "Lightweight tactical vest with multiple pouches for equipment storage. Adjustable size to fit most users.",
                AvailableQuantity = 0,
                TotalQuantity = 25,
                Status = "CheckedOut",
                Condition = "Good",
                AddedDate = DateTime.Now.AddMonths(-8),
                LastUpdated = DateTime.Now.AddDays(-7),
                LastMaintenanceDate = null,
                Notes = new List<string>
                {
                    "Clean with mild soap and water only",
                    "Check straps regularly for wear"
                }
            }
        };

        return equipmentItems.FirstOrDefault(e => e.Id == id);
    }

    private List<CheckoutHistoryItem> GetSampleCheckoutHistory(int equipmentId)
    {
        if (equipmentId == 1) // Tactical Radio
        {
            return new List<CheckoutHistoryItem>
            {
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-30),
                    TeamName = "Alpha Team",
                    MemberName = "John Smith",
                    Quantity = 2,
                    ReturnDate = DateTime.Now.AddDays(-23),
                    Status = "Returned"
                },
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-15),
                    TeamName = "Bravo Team",
                    MemberName = "Robert Johnson",
                    Quantity = 3,
                    ReturnDate = null,
                    Status = "Active"
                }
            };
        }
        else if (equipmentId == 2) // Night Vision Goggles
        {
            return new List<CheckoutHistoryItem>
            {
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-45),
                    TeamName = "Charlie Team",
                    MemberName = "Michael Wilson",
                    Quantity = 2,
                    ReturnDate = DateTime.Now.AddDays(-40),
                    Status = "Returned"
                },
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-10),
                    TeamName = "Delta Team",
                    MemberName = "Sarah Martinez",
                    Quantity = 2,
                    ReturnDate = null,
                    Status = "Active"
                }
            };
        }
        else if (equipmentId == 3) // Tactical Vest
        {
            return new List<CheckoutHistoryItem>
            {
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-60),
                    TeamName = "Alpha Team",
                    MemberName = "Jane Doe",
                    Quantity = 10,
                    ReturnDate = DateTime.Now.AddDays(-52),
                    Status = "Returned"
                },
                new CheckoutHistoryItem
                {
                    CheckoutDate = DateTime.Now.AddDays(-7),
                    TeamName = "Bravo Team",
                    MemberName = "Emily Davis",
                    Quantity = 25,
                    ReturnDate = null,
                    Status = "Active"
                }
            };
        }

        return new List<CheckoutHistoryItem>();
    }

    private List<MaintenanceHistoryItem> GetSampleMaintenanceHistory(int equipmentId)
    {
        if (equipmentId == 1) // Tactical Radio
        {
            return new List<MaintenanceHistoryItem>
            {
                new MaintenanceHistoryItem
                {
                    Date = DateTime.Now.AddMonths(-3),
                    Type = "Calibration",
                    PerformedBy = "Tech Support Team",
                    Notes = "Frequency calibration and battery replacement"
                },
                new MaintenanceHistoryItem
                {
                    Date = DateTime.Now.AddMonths(-1),
                    Type = "Routine",
                    PerformedBy = "John Technician",
                    Notes = "Antenna replacement and software update"
                }
            };
        }
        else if (equipmentId == 2) // Night Vision Goggles
        {
            return new List<MaintenanceHistoryItem>
            {
                new MaintenanceHistoryItem
                {
                    Date = DateTime.Now.AddDays(-14),
                    Type = "Repair",
                    PerformedBy = "Optics Specialist",
                    Notes = "Replaced damaged lens and power switch"
                }
            };
        }

        return new List<MaintenanceHistoryItem>();
    }

    // Model classes
    private class EquipmentItem
    {
        public int Id { get; set; }
        public string InventoryNumber { get; set; } = "";
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public string Description { get; set; } = "";
        public int AvailableQuantity { get; set; }
        public int TotalQuantity { get; set; }
        public string Status { get; set; } = "";
        public string Condition { get; set; } = "";
        public DateTime AddedDate { get; set; }
        public DateTime LastUpdated { get; set; }
        public DateTime? LastMaintenanceDate { get; set; }
        public List<string>? Notes { get; set; }
    }

    private class CheckoutHistoryItem
    {
        public DateTime CheckoutDate { get; set; }
        public string TeamName { get; set; } = "";
        public string MemberName { get; set; } = "";
        public int Quantity { get; set; }
        public DateTime? ReturnDate { get; set; }
        public string Status { get; set; } = "";
    }

    private class MaintenanceHistoryItem
    {
        public DateTime Date { get; set; }
        public string Type { get; set; } = "";
        public string PerformedBy { get; set; } = "";
        public string Notes { get; set; } = "";
    }
}