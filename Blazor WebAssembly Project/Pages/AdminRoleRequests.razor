@page "/admin/role-requests"
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using static Blazor_WebAssembly_Project.Pages.RequestRole
@inject NavigationManager Navigation
@inject IRoleService RoleService
@attribute [Authorize(Roles = "Admin,WarehouseManager")]

<h3>ניהול בקשות הרשאות</h3>

<div class="row mt-4">
    <div class="col-md-12">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        @if (isLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">טוען...</span>
                </div>
            </div>
        }
        else if (pendingRequests == null || !pendingRequests.Any())
        {
            <div class="alert alert-info">אין בקשות הרשאות ממתינות לאישור</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>משתמש</th>
                            <th>תפקיד נוכחי</th>
                            <th>תפקיד מבוקש</th>
                            <th>תאריך בקשה</th>
                            <th>נימוק</th>
                            <th>פעולות</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var request in pendingRequests)
                        {
                            <tr>
                                <td>@request.Username</td>
                                <td>@GetRoleDisplayName(request.CurrentRole)</td>
                                <td>@GetRoleDisplayName(request.RequestedRole)</td>
                                <td>@request.RequestDate.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowReason(request)">הצג נימוק</button>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-success" @onclick="() => ShowApproveDialog(request.RequestID)">אשר</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ShowRejectDialog(request.RequestID)">דחה</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@if (showReasonDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">נימוק לבקשת הרשאות</h5>
                    <button type="button" class="btn-close" @onclick="CloseReasonDialog"></button>
                </div>
                <div class="modal-body">
                    <p>@currentReason</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseReasonDialog">סגור</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showApproveDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">אישור בקשת הרשאות</h5>
                    <button type="button" class="btn-close" @onclick="CloseApproveDialog"></button>
                </div>
                <div class="modal-body">
                    <p>האם אתה בטוח שברצונך לאשר את בקשת ההרשאות?</p>
                    <div class="mb-3">
                        <label for="approveNotes" class="form-label">הערות (אופציונלי)</label>
                        <textarea id="approveNotes" class="form-control" @bind="approveNotes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseApproveDialog">בטל</button>
                    <button type="button" class="btn btn-success" @onclick="ApproveRequest">אשר</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showRejectDialog)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">דחיית בקשת הרשאות</h5>
                    <button type="button" class="btn-close" @onclick="CloseRejectDialog"></button>
                </div>
                <div class="modal-body">
                    <p>האם אתה בטוח שברצונך לדחות את בקשת ההרשאות?</p>
                    <div class="mb-3">
                        <label for="rejectNotes" class="form-label">הערות (רצוי לציין סיבה לדחיה)</label>
                        <textarea id="rejectNotes" class="form-control" @bind="rejectNotes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRejectDialog">בטל</button>
                    <button type="button" class="btn btn-danger" @onclick="RejectRequest">דחה</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<RoleRequestHistoryItemWithUsername>? pendingRequests;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = true;
    private bool showReasonDialog = false;
    private bool showApproveDialog = false;
    private bool showRejectDialog = false;
    private string currentReason = string.Empty;
    private int currentRequestId = 0;
    private string approveNotes = string.Empty;
    private string rejectNotes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPendingRequests();
    }

    private async Task LoadPendingRequests()
    {
        try
        {
            isLoading = true;
            var requests = await RoleService.GetPendingRequestsAsync();

            // For display, we need to convert to our extended type with username
            pendingRequests = requests.Select(r => new RoleRequestHistoryItemWithUsername
            {
                RequestID = r.RequestID,
                CurrentRole = r.CurrentRole,
                RequestedRole = r.RequestedRole,
                Reason = r.Reason,
                RequestDate = r.RequestDate,
                Status = r.Status,
                AdminNotes = r.AdminNotes,
                ProcessedDate = r.ProcessedDate,
                Username = "משתמש לא ידוע" // Default username
            });
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה בטעינת הבקשות: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowReason(RoleRequestHistoryItemWithUsername request)
    {
        currentReason = request.Reason;
        showReasonDialog = true;
    }

    private void CloseReasonDialog()
    {
        showReasonDialog = false;
        currentReason = string.Empty;
    }

    private void ShowApproveDialog(int requestId)
    {
        currentRequestId = requestId;
        approveNotes = string.Empty;
        showApproveDialog = true;
    }

    private void CloseApproveDialog()
    {
        showApproveDialog = false;
        currentRequestId = 0;
        approveNotes = string.Empty;
    }

    private void ShowRejectDialog(int requestId)
    {
        currentRequestId = requestId;
        rejectNotes = string.Empty;
        showRejectDialog = true;
    }

    private void CloseRejectDialog()
    {
        showRejectDialog = false;
        currentRequestId = 0;
        rejectNotes = string.Empty;
    }

    private async Task ApproveRequest()
    {
        try
        {
            var success = await RoleService.ApproveRequestAsync(currentRequestId, approveNotes);
            if (success)
            {
                successMessage = "בקשת ההרשאות אושרה בהצלחה";
                CloseApproveDialog();
                await LoadPendingRequests();
            }
            else
            {
                errorMessage = "אירעה שגיאה באישור הבקשה";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה: {ex.Message}";
        }
    }

    private async Task RejectRequest()
    {
        try
        {
            var success = await RoleService.RejectRequestAsync(currentRequestId, rejectNotes);
            if (success)
            {
                successMessage = "בקשת ההרשאות נדחתה";
                CloseRejectDialog();
                await LoadPendingRequests();
            }
            else
            {
                errorMessage = "אירעה שגיאה בדחיית הבקשה";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"שגיאה: {ex.Message}";
        }
    }

    private string GetRoleDisplayName(string role)
    {
        return role switch
        {
            "User" => "משתמש רגיל",
            "WarehouseOperator" => "מפעיל מחסן",
            "WarehouseManager" => "מנהל מחסן",
            "Admin" => "מנהל מערכת",
            _ => role
        };
    }

    public class RoleRequestHistoryItemWithUsername : RoleRequestHistoryItem
    {
        public string Username { get; set; } = string.Empty;
    }
}
