@page "/forgot-password"
@using Blazor_WebAssembly.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">Equipment Management System</h3>
                </div>
                <div class="card-body">
                    <h4 class="card-title text-center mb-4">Forgot Password</h4>

                    @if (_isSubmitted)
                    {
                        <div class="alert alert-success">
                            <p>If an account exists with the email address you provided, you will receive password reset instructions.</p>
                            <p>Please check your email inbox.</p>
                        </div>
                        <div class="text-center mt-4">
                            <a href="login" class="btn btn-outline-primary">Return to Login</a>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger">@_errorMessage</div>
                        }

                        <p class="text-muted mb-4">
                            Enter your email address below and we'll send you instructions to reset your password.
                        </p>

                        <EditForm Model="@_forgotPasswordModel" OnValidSubmit="HandleForgotPassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-4">
                                <label for="email" class="form-label">Email</label>
                                <InputText @bind-Value="_forgotPasswordModel.Email" class="form-control" id="email" type="email" />
                                <ValidationMessage For="@(() => _forgotPasswordModel.Email)" />
                            </div>

                            <div class="d-grid mb-3">
                                <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Send Reset Instructions</span>
                                    }
                                </button>
                            </div>

                            <div class="text-center">
                                <p>Remember your password? <a href="login">Login</a></p>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ForgotPasswordModel _forgotPasswordModel = new();
    private bool _isProcessing = false;
    private bool _isSubmitted = false;
    private string? _errorMessage;

    private async Task HandleForgotPassword()
    {
        _isProcessing = true;
        _errorMessage = null;

        try
        {
            // In a real implementation, this would call an API endpoint
            // For simplicity, we'll just simulate success
            await Task.Delay(1000); // Simulate API call

            // Set submitted flag to true to show success message
            _isSubmitted = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to process request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";
    }
}