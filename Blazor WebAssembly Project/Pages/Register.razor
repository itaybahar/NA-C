@page "/register"
@using System.ComponentModel.DataAnnotations
@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly_Project.Models.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<link href="css/Login.css" rel="stylesheet">

<div class="login-container">
    <div class="login-card">
        <div class="icon-wrapper">
            <div class="icon-circle">
                <img src="images/user-top.png" class="user-icon" alt="User Icon" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />

            <div class="input-group">
                <div class="input-wrapper @(IsUsernameValid ? "valid" : "")">
                    <div class="input-icon">
                        <img src="images/user-new-icon.png" alt="User Icon" />
                    </div>
                    <div class="input-separator"></div>
                    <InputText @bind-Value="registerModel.Username" class="input-field" placeholder="שם משתמש" @oninput="ValidateUsername" />
                </div>
                @if (IsUsernameValid)
                {
                    <div class="validation-indicator valid"></div>
                    <div class="field-status valid">
                        <span class="status-message">שם משתמש תקין</span>
                    </div>
                }
                else
                {
                    <ValidationMessage For="@(() => registerModel.Username)" />
                }
            </div>

            <div class="input-group">
                <div class="input-wrapper @(IsEmailValid ? "valid" : "")">
                    <div class="input-icon">
                        <img src="images/email-icon.png" alt="Email Icon" />
                    </div>
                    <div class="input-separator"></div>
                    <InputText @bind-Value="registerModel.Email" type="email" class="input-field" placeholder="אימייל" @oninput="ValidateEmail" />
                </div>
                @if (IsEmailValid)
                {
                    <div class="validation-indicator valid"></div>
                    <div class="field-status valid">
                        <span class="status-message">כתובת אימייל תקינה</span>
                    </div>
                }
                else
                {
                    <ValidationMessage For="@(() => registerModel.Email)" />
                }
            </div>

            <div class="input-group">
                <div class="input-wrapper @(IsPasswordValid ? "valid" : "")">
                    <div class="input-icon">
                        <img src="images/lock-icon.png" alt="Lock Icon" />
                    </div>
                    <div class="input-separator"></div>
                    <InputText @bind-Value="registerModel.Password" type="password" class="input-field" placeholder="סיסמה" @oninput="ValidatePassword" @onfocus="ShowPasswordRequirements" @onblur="HidePasswordRequirements" />
                </div>
                <div class="input-actions">
                    <button type="button" class="password-info-button" @onclick="TogglePasswordRequirements">
                        <span class="password-info-icon">?</span>
                    </button>
                </div>
                @if (IsPasswordValid)
                {
                    <div class="validation-indicator valid"></div>
                    <div class="field-status valid">
                        <span class="status-message">סיסמה תקינה</span>
                    </div>
                }
                else
                {
                    <ValidationMessage For="@(() => registerModel.Password)" />
                }
            </div>

            <div class="input-group">
                <div class="input-wrapper @(IsConfirmPasswordValid ? "valid" : "")">
                    <div class="input-icon">
                        <img src="images/lock-icon.png" alt="Lock Icon" />
                    </div>
                    <div class="input-separator"></div>
                    <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="input-field" placeholder="אימות סיסמה" @oninput="ValidateConfirmPassword" />
                </div>
                @if (IsConfirmPasswordValid)
                {
                    <div class="validation-indicator valid"></div>
                    <div class="field-status valid">
                        <span class="status-message">הסיסמאות תואמות</span>
                    </div>
                }
                else
                {
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                }
            </div>

            <div class="login-button-container">
                <button type="submit" class="login-button" disabled="@(!IsFormValid || isSubmitting)">
                    @if (isSubmitting)
                    {
                        <span>מתבצעת הרשמה...</span>
                    }
                    else
                    {
                        <span>הירשם</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>

    <div class="google-and-signup">
        <div class="google-login">
            <button class="google-button" @onclick="HandleGoogleRegister" disabled="@isSubmitting">
                <img src="images/google-logo.png" alt="Google" />
            </button>
        </div>

        <div class="signup">
            <a href="/login">כבר רשום? התחבר עכשיו</a>
        </div>
    </div>
</div>

@if (showPasswordRequirements)
{
    <div class="password-requirements-modal">
        <div class="password-requirements-content">
            <div class="password-requirements-header">
                <h3>דרישות סיסמה</h3>
                <button type="button" class="password-requirements-close" @onclick="HidePasswordRequirements">&times;</button>
            </div>
            <div class="password-requirements-body">
                <ul>
                    <li class="@(HasMinLength ? "met" : "")">לפחות 6 תווים</li>
                    <li class="@(HasUpperCase ? "met" : "")">אות גדולה אחת לפחות</li>
                    <li class="@(HasNumber ? "met" : "")">מספר אחד לפחות</li>
                    <li class="@(HasSpecialChar ? "met" : "")">תו מיוחד אחד לפחות (!@@#$%^&*)</li>
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private RegisterModel registerModel = new()
    {
        Username = "",
        Email = "",
        Password = "",
        ConfirmPassword = "",
        Role = "User"
    };

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isSubmitting = false;
    private bool showPasswordRequirements = false;

    // Validation flags
    private bool IsUsernameValid { get; set; } = false;
    private bool IsEmailValid { get; set; } = false;
    private bool IsPasswordValid { get; set; } = false;
    private bool IsConfirmPasswordValid { get; set; } = false;

    // Password requirement flags
    private bool HasMinLength { get; set; } = false;
    private bool HasUpperCase { get; set; } = false;
    private bool HasNumber { get; set; } = false;
    private bool HasSpecialChar { get; set; } = false;

    private bool IsFormValid => IsUsernameValid && IsEmailValid && IsPasswordValid && IsConfirmPasswordValid;

    // Methods to show and hide password requirements
    private void ShowPasswordRequirements() => showPasswordRequirements = true;
    private void HidePasswordRequirements() => showPasswordRequirements = false;
    private void TogglePasswordRequirements() => showPasswordRequirements = !showPasswordRequirements;

    protected override void OnInitialized()
    {
        // Add event listener for ESC key to close the requirements modal
        JSRuntime.InvokeVoidAsync("addEscKeyListener", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void ClosePasswordRequirements()
    {
        showPasswordRequirements = false;
        StateHasChanged();
    }

    private void ValidateUsername(ChangeEventArgs e)
    {
        var username = e.Value?.ToString();
        IsUsernameValid = !string.IsNullOrWhiteSpace(username) && username.Length >= 3;
        StateHasChanged();
    }

    private void ValidateEmail(ChangeEventArgs e)
    {
        var email = e.Value?.ToString();
        // Basic email validation - you can make this more sophisticated
        IsEmailValid = !string.IsNullOrWhiteSpace(email) &&
            email.Contains("@") &&
            email.Contains(".") &&
            !email.StartsWith("@") &&
            !email.EndsWith("@") &&
            !email.StartsWith(".") &&
            !email.EndsWith(".");
        StateHasChanged();
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(password))
        {
            IsPasswordValid = false;
            HasMinLength = false;
            HasUpperCase = false;
            HasNumber = false;
            HasSpecialChar = false;
        }
        else
        {
            HasMinLength = password.Length >= 6;
            HasUpperCase = password.Any(char.IsUpper);
            HasNumber = password.Any(char.IsDigit);
            HasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));

            IsPasswordValid = HasMinLength && HasUpperCase && HasNumber && HasSpecialChar;
        }

        // Also validate confirm password if it's not empty
        if (!string.IsNullOrWhiteSpace(registerModel.ConfirmPassword))
        {
            ValidateConfirmPassword(new ChangeEventArgs { Value = registerModel.ConfirmPassword });
        }

        StateHasChanged();
    }

    private void ValidateConfirmPassword(ChangeEventArgs? e)
    {
        IsConfirmPasswordValid = !string.IsNullOrWhiteSpace(registerModel.Password) &&
                                 !string.IsNullOrWhiteSpace(registerModel.ConfirmPassword) &&
                                 registerModel.Password == registerModel.ConfirmPassword;
        StateHasChanged();
    }

    private async Task HandleRegistration()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            if (result)
            {
                successMessage = "הרשמתך התקבלה בהצלחה!";
                await Task.Delay(1500); // Show success message briefly
                Navigation.NavigateTo("/login?registered=true");
            }
            else
            {
                errorMessage = "חלה שגיאה בתהליך ההרשמה. נסה שוב מאוחר יותר.";
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Username is already taken") || ex.Message.Contains("Username already exists"))
            {
                errorMessage = "שם המשתמש כבר תפוס. אנא בחר שם אחר.";
            }
            else if (ex.Message.Contains("Email is already in use"))
            {
                errorMessage = "כתובת המייל כבר בשימוש.";
            }
            else
            {
                errorMessage = $"שגיאה: {ex.Message}";
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void HandleGoogleRegister()
    {
        Navigation.NavigateTo("https://localhost:5191/auth/login-google", true);
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("removeEscKeyListener");
    }
}
