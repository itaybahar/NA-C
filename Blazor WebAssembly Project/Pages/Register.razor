@page "/register"
@using System.ComponentModel.DataAnnotations
@using Blazor_WebAssembly.Services.Interfaces
@using Blazor_WebAssembly_Project.Models.Auth
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<link href="css/Login.css" rel="stylesheet">

<a href="/" class="home-btn">
    <i class="bi bi-house-fill"></i>
</a>

<div class="login-container">
    <div class="login-card-wrapper">
        <div class="login-card @formAnimationClass">
            <div class="icon-wrapper">
                <div class="icon-circle">
                    <img src="images/user-top.png" class="user-icon" alt="User Icon" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }

            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" id="register-form">
                <DataAnnotationsValidator />

                <div class="input-group">
                    <div class="input-wrapper @(IsUsernameValid ? "valid" : "")">
                        <div class="input-icon">
                            <img src="images/user-new-icon.png" alt="User Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="registerModel.Username" class="input-field" placeholder="שם משתמש" @oninput="ValidateUsername" />
                    </div>
                    @if (IsUsernameValid)
                    {
                        <div class="validation-indicator valid"></div>
                        <div class="field-status valid">
                            <span class="status-message">שם משתמש תקין</span>
                        </div>
                    }
                    else
                    {
                        <ValidationMessage For="@(() => registerModel.Username)" />
                    }
                </div>

                <div class="input-group">
                    <div class="input-wrapper @(IsEmailValid ? "valid" : "")">
                        <div class="input-icon">
                            <img src="images/email-icon.png" alt="Email Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="registerModel.Email" type="email" class="input-field" placeholder="אימייל" @oninput="ValidateEmail" />
                    </div>
                    @if (IsEmailValid)
                    {
                        <div class="validation-indicator valid"></div>
                        <div class="field-status valid">
                            <span class="status-message">כתובת אימייל תקינה</span>
                        </div>
                    }
                    else
                    {
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    }
                </div>

                <div class="input-group">
                    <div class="input-wrapper @(IsPasswordValid ? "valid" : "")">
                        <div class="input-icon">
                            <img src="images/lock-icon.png" alt="Lock Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="registerModel.Password" type="password" class="input-field" placeholder="סיסמה" @oninput="ValidatePassword" />
                    </div>
                    <div class="input-actions">
                        <button type="button" class="password-info-button" @onclick="TogglePasswordRequirements">
                            <span class="password-info-icon">?</span>
                        </button>
                    </div>
                    @if (IsPasswordValid)
                    {
                        <div class="validation-indicator valid"></div>
                        <div class="field-status valid">
                            <span class="status-message">סיסמה תקינה</span>
                        </div>
                    }
                    else
                    {
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    }
                </div>

                <div class="input-group">
                    <div class="input-wrapper @(IsConfirmPasswordValid ? "valid" : "")">
                        <div class="input-icon">
                            <img src="images/lock-icon.png" alt="Lock Icon" />
                        </div>
                        <div class="input-separator"></div>
                        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="input-field" placeholder="אימות סיסמה" @oninput="ValidateConfirmPassword" />
                    </div>
                    @if (IsConfirmPasswordValid)
                    {
                        <div class="validation-indicator valid"></div>
                        <div class="field-status valid">
                            <span class="status-message">הסיסמאות תואמות</span>
                        </div>
                    }
                    else
                    {
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    }
                </div>
            </EditForm>
        </div>
        <button type="submit" class="login-button" form="register-form" disabled="@(!IsFormValid || isSubmitting)">
            @if (isSubmitting)
            {
                <span>Registering...</span>
            }
            else
            {
                <span>Register</span>
            }
        </button>
        <button class="google-oauth-btn" @onclick="HandleGoogleRegister" type="button">
            <img src="images/google-logo.png" alt="Google" class="google-icon" />
            Register with Google
        </button>
        <div class="signup">
            <a href="/login">Already registered? Login now</a>
        </div>
    </div>
</div>

@if (showPasswordRequirements)
{
    <div class="password-requirements-modal">
        <div class="password-requirements-content">
            <div class="password-requirements-header">
                <h3>דרישות סיסמה</h3>
                <button type="button" class="password-requirements-close" @onclick="HidePasswordRequirements">&times;</button>
            </div>
            <div class="password-requirements-body">
                <ul>
                    <li class="@(HasMinLength ? "met" : "")">לפחות 6 תווים</li>
                    <li class="@(HasUpperCase ? "met" : "")">אות גדולה אחת לפחות</li>
                    <li class="@(HasNumber ? "met" : "")">מספר אחד לפחות</li>
                    <li class="@(HasSpecialChar ? "met" : "")">תו מיוחד אחד לפחות (!@@#$%^&*)</li>
                </ul>
            </div>
        </div>
    </div>
}

@code {
    private RegisterModel registerModel = new()
    {
        Username = "",
        Email = "",
        Password = "",
        ConfirmPassword = "",
        Role = "User"
    };

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isSubmitting = false;
    private bool showPasswordRequirements = false;

    // Validation flags
    private bool IsUsernameValid { get; set; } = false;
    private bool IsEmailValid { get; set; } = false;
    private bool IsPasswordValid { get; set; } = false;
    private bool IsConfirmPasswordValid { get; set; } = false;

    // Password requirement flags
    private bool HasMinLength { get; set; } = false;
    private bool HasUpperCase { get; set; } = false;
    private bool HasNumber { get; set; } = false;
    private bool HasSpecialChar { get; set; } = false;

    private bool IsFormValid => IsUsernameValid && IsEmailValid && IsPasswordValid && IsConfirmPasswordValid;

    private string formAnimationClass = "form-animate-down";

    public async Task AnimateInDown()
    {
        formAnimationClass = "form-fade-out";
        StateHasChanged();
        await Task.Delay(400);
        formAnimationClass = "form-animate-down";
        StateHasChanged();
    }

    public async Task AnimateInUp()
    {
        formAnimationClass = "form-fade-out";
        StateHasChanged();
        await Task.Delay(400);
        formAnimationClass = "form-animate-up";
        StateHasChanged();
    }

    // Object reference for JS interop
    private DotNetObjectReference<Register>? objRef;

    // Methods to show and hide password requirements
    private void ShowPasswordRequirements() => showPasswordRequirements = true;
    private void HidePasswordRequirements() => showPasswordRequirements = false;
    private void TogglePasswordRequirements() => showPasswordRequirements = !showPasswordRequirements;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize JS functions
                await InitializeJavaScriptFunctions();

                // Create and store object reference
                objRef = DotNetObjectReference.Create(this);

                // Add event listener for ESC key to close the requirements modal
                await JSRuntime.InvokeVoidAsync("registerPageFunctions.addEscKeyListener", objRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error setting up JavaScript functions: {ex.Message}");
            }
        }
    }

    private async Task InitializeJavaScriptFunctions()
    {
        try
        {
            // Define all the necessary JavaScript functions
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.registerPageFunctions = {
                    // Email validation function
                    validateEmail: function(email) {
                        if (!email) return false;
                        const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                        return regex.test(email);
                    },

                    // Password validation function
                    validatePassword: function(password) {
                        if (!password) {
                            return {
                                hasMinLength: false,
                                hasUpperCase: false,
                                hasNumber: false,
                                hasSpecialChar: false
                            };
                        }

                        return {
                            hasMinLength: password.length >= 6,
                            hasUpperCase: /[A-Z]/.test(password),
                            hasNumber: /[0-9]/.test(password),
                            hasSpecialChar: /[^A-Za-z0-9]/.test(password)
                        };
                    },

                    // ESC key listener
                    addEscKeyListener: function(dotnetRef) {
                        window._registerEscHandler = function(e) {
                            if (e.key === 'Escape') {
                                dotnetRef.invokeMethodAsync('ClosePasswordRequirements');
                            }
                        };
                        document.addEventListener('keydown', window._registerEscHandler);
                    },

                    // Remove ESC key listener
                    removeEscKeyListener: function() {
                        if (window._registerEscHandler) {
                            document.removeEventListener('keydown', window._registerEscHandler);
                            window._registerEscHandler = null;
                        }
                    }
                };

                // Backward compatibility for existing code
                window.formValidation = window.formValidation || {};
                window.formValidation.validateEmail = window.registerPageFunctions.validateEmail;
                window.formValidation.validatePassword = window.registerPageFunctions.validatePassword;

                window.addEscKeyListener = window.registerPageFunctions.addEscKeyListener;
                window.removeEscKeyListener = window.registerPageFunctions.removeEscKeyListener;

                // Google auth redirect
                window.handleGoogleAuthRedirect = function() {
                    console.log('Google auth redirect requested');
                    // This would be implemented to handle Google authentication
                    alert('Google authentication is not configured. This is a placeholder.');
                };
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize JavaScript functions: {ex.Message}");
        }
    }

    [JSInvokable]
    public void ClosePasswordRequirements()
    {
        showPasswordRequirements = false;
        StateHasChanged();
    }

    private async Task ValidateUsername(ChangeEventArgs e)
    {
        var username = e.Value?.ToString();
        // Basic username validation
        IsUsernameValid = !string.IsNullOrWhiteSpace(username) && username.Length >= 3;
        StateHasChanged();
    }

    private async Task ValidateEmail(ChangeEventArgs e)
    {
        var email = e.Value?.ToString();

        try
        {
            // Try to use JS validation if available
            IsEmailValid = await JSRuntime.InvokeAsync<bool>("registerPageFunctions.validateEmail", email);
        }
        catch
        {
            // Fallback to basic validation
            IsEmailValid = !string.IsNullOrWhiteSpace(email) &&
                email.Contains("@") &&
                email.Contains(".") &&
                !email.StartsWith("@") &&
                !email.EndsWith("@") &&
                !email.StartsWith(".") &&
                !email.EndsWith(".");
        }

        StateHasChanged();
    }

    private async Task ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value?.ToString();

        try
        {
            // Try to use JS validation
            var result = await JSRuntime.InvokeAsync<Dictionary<string, bool>>("registerPageFunctions.validatePassword", password);

            HasMinLength = result["hasMinLength"];
            HasUpperCase = result["hasUpperCase"];
            HasNumber = result["hasNumber"];
            HasSpecialChar = result["hasSpecialChar"];

            IsPasswordValid = HasMinLength && HasUpperCase && HasNumber && HasSpecialChar;
        }
        catch (Exception ex)
        {
            // Fallback to C# validation
            Console.WriteLine($"JS password validation failed, using fallback: {ex.Message}");

            if (string.IsNullOrWhiteSpace(password))
            {
                IsPasswordValid = false;
                HasMinLength = false;
                HasUpperCase = false;
                HasNumber = false;
                HasSpecialChar = false;
            }
            else
            {
                HasMinLength = password.Length >= 6;
                HasUpperCase = password.Any(char.IsUpper);
                HasNumber = password.Any(char.IsDigit);
                HasSpecialChar = password.Any(c => !char.IsLetterOrDigit(c));

                IsPasswordValid = HasMinLength && HasUpperCase && HasNumber && HasSpecialChar;
            }
        }

        // Also validate confirm password if it's not empty
        if (!string.IsNullOrWhiteSpace(registerModel.ConfirmPassword))
        {
            ValidateConfirmPassword(new ChangeEventArgs { Value = registerModel.ConfirmPassword });
        }

        StateHasChanged();
    }

    private void ValidateConfirmPassword(ChangeEventArgs? e)
    {
        IsConfirmPasswordValid = !string.IsNullOrWhiteSpace(registerModel.Password) &&
                                 !string.IsNullOrWhiteSpace(registerModel.ConfirmPassword) &&
                                 registerModel.Password == registerModel.ConfirmPassword;
        StateHasChanged();
    }

    private async Task HandleRegistration()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Ensure Role is set before submitting
            if (string.IsNullOrEmpty(registerModel.Role))
            {
                registerModel.Role = "User";
            }

            var result = await AuthService.RegisterAsync(registerModel);
            if (result)
            {
                successMessage = "הרשמתך התקבלה בהצלחה!";
                await Task.Delay(1500); // Show success message briefly
                Navigation.NavigateTo("/login?registered=true");
            }
            else
            {
                errorMessage = "חלה שגיאה בתהליך ההרשמה. נסה שוב מאוחר יותר.";
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("Username is already taken") || ex.Message.Contains("Username already exists"))
            {
                errorMessage = "שם המשתמש כבר תפוס. אנא בחר שם אחר.";
            }
            else if (ex.Message.Contains("Email is already in use"))
            {
                errorMessage = "כתובת המייל כבר בשימוש.";
            }
            else
            {
                errorMessage = $"שגיאה: {ex.Message}";
                Console.WriteLine($"Registration error details: {ex}");
            }
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleRegister()
    {
        try
        {
            errorMessage = string.Empty;
            // Use the JavaScript handler for Google login that includes API discovery
            await JSRuntime.InvokeVoidAsync("handleGoogleAuthRedirect");
        }
        catch (Exception ex)
        {
            errorMessage = $"אירעה שגיאה בהפניה להתחברות Google: {ex.Message}";
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            // Remove the ESC key listener
            await JSRuntime.InvokeVoidAsync("registerPageFunctions.removeEscKeyListener");

            // Dispose the object reference
            objRef?.Dispose();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing ESC listener: {ex.Message}");
        }
    }
}
