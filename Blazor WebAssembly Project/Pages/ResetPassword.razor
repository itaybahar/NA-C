@page "/reset-password"
@using Blazor_WebAssembly.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">Equipment Management System</h3>
                </div>
                <div class="card-body">
                    <h4 class="card-title text-center mb-4">Reset Password</h4>

                    @if (_isResetComplete)
                    {
                        <div class="alert alert-success">
                            <p>Your password has been reset successfully!</p>
                        </div>
                        <div class="text-center mt-4">
                            <a href="login" class="btn btn-primary">Login with New Password</a>
                        </div>
                    }
                    else if (!_isTokenValid)
                    {
                        <div class="alert alert-danger">
                            <p>Invalid or expired password reset link.</p>
                            <p>Please request a new password reset link.</p>
                        </div>
                        <div class="text-center mt-4">
                            <a href="forgot-password" class="btn btn-outline-primary">Request New Link</a>
                        </div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger">@_errorMessage</div>
                        }

                        <EditForm Model="@_resetPasswordModel" OnValidSubmit="HandleResetPassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <InputText @bind-Value="_resetPasswordModel.NewPassword" class="form-control" id="newPassword" type="password" />
                                <ValidationMessage For="@(() => _resetPasswordModel.NewPassword)" />
                            </div>

                            <div class="mb-4">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText @bind-Value="_resetPasswordModel.ConfirmPassword" class="form-control" id="confirmPassword" type="password" />
                                <ValidationMessage For="@(() => _resetPasswordModel.ConfirmPassword)" />
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary" disabled="@_isProcessing">
                                    @if (_isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span> Processing...</span>
                                    }
                                    else
                                    {
                                        <span>Reset Password</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordModel _resetPasswordModel = new();
    private bool _isProcessing = false;
    private bool _isTokenValid = false;
    private bool _isResetComplete = false;
    private string? _errorMessage;
    private string? _email;
    private string? _token;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var emailValue))
        {
            _email = emailValue.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
        {
            _token = tokenValue.First();
        }

        // Validate token (simplified for demo)
        _isTokenValid = !string.IsNullOrEmpty(_email) && !string.IsNullOrEmpty(_token);
    }

    private async Task HandleResetPassword()
    {
        if (!_isTokenValid)
            return;

        _isProcessing = true;
        _errorMessage = null;

        try
        {
            if (_resetPasswordModel.NewPassword != _resetPasswordModel.ConfirmPassword)
            {
                _errorMessage = "Passwords do not match";
                return;
            }

            // In a real implementation, this would call an API endpoint
            // For simplicity, we'll just simulate success
            await Task.Delay(1000); // Simulate API call

            _isResetComplete = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Password reset failed: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}