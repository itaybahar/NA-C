@page "/equipment/requests/{RequestId:int}"
@using Blazor_WebAssembly.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Request Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/equipment/requests">Equipment Requests</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Request Details</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <i class="fas fa-arrow-left me-1"></i> Back
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading request details...</p>
            </div>
        </div>
    }
    else if (request != null)
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Request #REQ-@request.Id.ToString("D4")</h5>
                            <span class="badge @GetStatusBadgeClass(request.Status)">@request.Status</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6 class="border-bottom pb-2 mb-3">Request Information</h6>
                                <dl class="row">
                                    <dt class="col-sm-4">Equipment</dt>
                                    <dd class="col-sm-8">@request.EquipmentName</dd>

                                    <dt class="col-sm-4">Category</dt>
                                    <dd class="col-sm-8">@request.Category</dd>

                                    <dt class="col-sm-4">Quantity</dt>
                                    <dd class="col-sm-8">@request.Quantity units</dd>

                                    @if (request.EstimatedCostPerUnit.HasValue)
                                    {
                                        <dt class="col-sm-4">Est. Cost</dt>
                                        <dd class="col-sm-8">
                                            $@request.EstimatedCostPerUnit.Value.ToString("N2") per unit
                                            <br />
                                            <small class="text-muted">Total: $@((request.EstimatedCostPerUnit.Value * request.Quantity).ToString("N2"))</small>
                                        </dd>
                                    }

                                    <dt class="col-sm-4">Date Needed</dt>
                                    <dd class="col-sm-8">
                                        @request.DateNeeded.ToShortDateString()
                                        @if (IsUrgent(request.DateNeeded))
                                        {
                                            <span class="badge bg-danger ms-2">Urgent</span>
                                        }
                                    </dd>

                                    @if (request.IsUrgent)
                                    {
                                        <dt class="col-sm-4">Urgency</dt>
                                        <dd class="col-sm-8">
                                            <span class="badge bg-danger">Urgent</span>
                                        </dd>
                                    }
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <h6 class="border-bottom pb-2 mb-3">Request Details</h6>
                                <dl class="row">
                                    <dt class="col-sm-4">Requested By</dt>
                                    <dd class="col-sm-8">@request.RequestedBy</dd>

                                    <dt class="col-sm-4">Department</dt>
                                    <dd class="col-sm-8">@request.Department</dd>

                                    <dt class="col-sm-4">Requested On</dt>
                                    <dd class="col-sm-8">
                                        @request.RequestDate.ToShortDateString()
                                        <small class="text-muted d-block">@request.RequestDate.ToString("hh:mm tt")</small>
                                    </dd>

                                    @if (!string.IsNullOrEmpty(request.ReviewedBy))
                                    {
                                        <dt class="col-sm-4">Reviewed By</dt>
                                        <dd class="col-sm-8">@request.ReviewedBy</dd>

                                        <dt class="col-sm-4">Reviewed On</dt>
                                        <dd class="col-sm-8">@request.ReviewDate?.ToShortDateString()</dd>
                                    }
                                </dl>
                            </div>
                        </div>

                        <h6 class="border-bottom pb-2 mb-3">Details</h6>
                        <div class="mb-4">
                            <h6>Justification</h6>
                            <p>@request.Justification</p>
                        </div>

                        @if (!string.IsNullOrEmpty(request.UrgencyReason))
                        {
                            <div class="mb-4">
                                <h6>Reason for Urgency</h6>
                                <p>@request.UrgencyReason</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(request.Specifications))
                        {
                            <div class="mb-4">
                                <h6>Specifications</h6>
                                <p>@request.Specifications</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(request.VendorInformation))
                        {
                            <div class="mb-4">
                                <h6>Vendor Information</h6>
                                <p>@request.VendorInformation</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(request.AdditionalNotes))
                        {
                            <div class="mb-4">
                                <h6>Additional Notes</h6>
                                <p>@request.AdditionalNotes</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(request.ReviewNotes))
                        {
                            <div class="alert @(request.Status == "Rejected" ? "alert-danger" : "alert-info")">
                                <h6>@(request.Status == "Rejected" ? "Rejection Reason" : "Reviewer Notes")</h6>
                                <p class="mb-0">@request.ReviewNotes</p>
                            </div>
                        }
                    </div>
                    <div class="card-footer bg-white">
                        <div class="d-flex justify-content-between">
                            <div>
                                @if (IsCurrentUser(request.RequestedBy) && request.Status == "Pending")
                                {
                                    <button class="btn btn-outline-primary" @onclick="NavigateToEdit">
                                        <i class="fas fa-edit me-1"></i> Edit Request
                                    </button>
                                }
                            </div>
                            <div>
                                @if (IsManager && request.Status == "Pending")
                                {
                                    <button class="btn btn-success me-2" @onclick="ShowApproveModal">
                                        <i class="fas fa-check me-1"></i> Approve
                                    </button>
                                    <button class="btn btn-danger" @onclick="ShowRejectModal">
                                        <i class="fas fa-times me-1"></i> Reject
                                    </button>
                                }
                                @if (IsManager && request.Status == "Approved")
                                {
                                    <button class="btn btn-primary" @onclick="ShowOrderModal">
                                        <i class="fas fa-shopping-cart me-1"></i> Mark as Ordered
                                    </button>
                                }
                                @if (IsManager && request.Status == "Ordered")
                                {
                                    <button class="btn btn-info" @onclick="ShowReceivedModal">
                                        <i class="fas fa-box me-1"></i> Mark as Received
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Request Timeline</h5>
                    </div>
                    <div class="card-body p-3">
                        <div class="timeline">
                            @foreach (var activity in request.Activities)
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker @GetTimelineMarkerClass(activity.Type)">
                                        <i class="@GetTimelineIcon(activity.Type)"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="d-flex justify-content-between mb-1">
                                            <strong>@activity.Description</strong>
                                            <small class="text-muted">@activity.Date.ToShortDateString()</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(activity.Details))
                                        {
                                            <p class="mb-0">@activity.Details</p>
                                        }
                                        <small class="text-muted">By: @activity.PerformedBy</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @if (request.Status == "Pending")
                {
                    <div class="card shadow-sm mb-4 border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">Pending Approval</h5>
                        </div>
                        <div class="card-body">
                            <p>This request is awaiting review by management. The typical review time is 2-3 business days.</p>

                            @if (request.IsUrgent)
                            {
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Urgent requests are typically reviewed within 24 hours.
                                </div>
                            }

                            @if (IsCurrentUser(request.RequestedBy))
                            {
                                <div class="d-grid">
                                    <button class="btn btn-outline-danger" @onclick="ShowCancelModal">
                                        <i class="fas fa-times me-1"></i> Cancel Request
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (request.Status == "Approved")
                {
                    <div class="card shadow-sm mb-4 border-success">
                        <div class="card-header bg-success text-white">
                            <h5 class="mb-0">Request Approved</h5>
                        </div>
                        <div class="card-body">
                            <p>Your request has been approved. The equipment will be ordered according to the provided specifications.</p>
                            <p class="mb-0"><strong>Next Steps:</strong> The warehouse team will place an order with the supplier.</p>
                        </div>
                    </div>
                }
                else if (request.Status == "Ordered")
                {
                    <div class="card shadow-sm mb-4 border-info">
                        <div class="card-header bg-info text-white">
                            <h5 class="mb-0">Equipment Ordered</h5>
                        </div>
                        <div class="card-body">
                            <p>The requested equipment has been ordered from the supplier.</p>
                            <p class="mb-0"><strong>Next Steps:</strong> You will be notified when the equipment arrives and is ready for collection.</p>
                        </div>
                    </div>
                }
                else if (request.Status == "Received")
                {
                    <div class="card shadow-sm mb-4 border-primary">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Equipment Received</h5>
                        </div>
                        <div class="card-body">
                            <p>The requested equipment has been received and is ready for use.</p>
                            <p class="mb-0"><strong>Next Steps:</strong> Please visit the warehouse to collect your equipment.</p>
                        </div>
                    </div>
                }
                else if (request.Status == "Rejected")
                {
                    <div class="card shadow-sm mb-4 border-danger">
                        <div class="card-header bg-danger text-white">
                            <h5 class="mb-0">Request Rejected</h5>
                        </div>
                        <div class="card-body">
                            <p>Unfortunately, your request has been rejected. Please see the rejection reason for details.</p>
                            <p class="mb-0"><strong>Next Steps:</strong> You may submit a new request with adjustments based on the feedback provided.</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Request not found. It may have been deleted or you don't have permission to view it.
        </div>
    }

    @if (showApproveModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Approve Request</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to approve this request for @request?.Quantity units of @request?.EquipmentName?</p>

                        <div class="mb-3">
                            <label for="approvalNotes" class="form-label">Notes (Optional)</label>
                            <textarea id="approvalNotes" class="form-control" rows="3" @bind="approvalNotes"></textarea>
                        </div>

                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="markAsOrdered" @bind="markAsOrdered" />
                            <label class="form-check-label" for="markAsOrdered">
                                Mark as Ordered
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="ApproveRequest">
                            Approve
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showRejectModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Reject Request</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to reject this request for @request?.Quantity units of @request?.EquipmentName?</p>

                        <div class="mb-3">
                            <label for="rejectionReason" class="form-label">Reason for Rejection <span class="text-danger">*</span></label>
                            <textarea id="rejectionReason" class="form-control" rows="3" @bind="rejectionReason"></textarea>
                            @if (reasonError)
                            {
                                <div class="text-danger mt-1">Reason for rejection is required</div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="RejectRequest">
                            Reject
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showCancelModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cancel Request</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to cancel your request for @request?.Quantity units of @request?.EquipmentName?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Go Back</button>
                        <button type="button" class="btn btn-danger" @onclick="CancelRequest">
                            Cancel Request
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showOrderModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Mark as Ordered</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you confirming that @request?.Quantity units of @request?.EquipmentName have been ordered?</p>

                        <div class="mb-3">
                            <label for="orderNotes" class="form-label">Order Details (Optional)</label>
                            <textarea id="orderNotes" class="form-control" rows="3" placeholder="Order number, vendor, expected delivery date, etc." @bind="orderNotes"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="MarkAsOrdered">
                            Mark as Ordered
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    @if (showReceivedModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Mark as Received</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you confirming that @request?.Quantity units of @request?.EquipmentName have been received?</p>

                        <div class="mb-3">
                            <label for="receivedNotes" class="form-label">Receipt Details (Optional)</label>
                            <textarea id="receivedNotes" class="form-control" rows="3" placeholder="Condition, storage location, etc." @bind="receivedNotes"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-info" @onclick="MarkAsReceived">
                            Mark as Received
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

<style>
    .timeline {
        position: relative;
        margin: 0;
        padding: 0;
        list-style: none;
    }

    .timeline-item {
        position: relative;
        display: flex;
        margin-bottom: 1.5rem;
    }

    .timeline-marker {
        flex-shrink: 0;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    .timeline-content {
        flex-grow: 1;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
    }

    .timeline-item:last-child .timeline-content {
        border-bottom: none;
        padding-bottom: 0;
    }
</style>

@code {
    [Parameter]
    public int RequestId { get; set; }

    private EquipmentRequestDetailDto request;
    private bool isLoading = true;

    // Role check - would be retrieved from auth service in a real app
    private bool IsManager = true;

    // Modals
    private bool showApproveModal = false;
    private bool showRejectModal = false;
    private bool showCancelModal = false;
    private bool showOrderModal = false;
    private bool showReceivedModal = false;

    // Form fields
    private string approvalNotes = "";
    private string rejectionReason = "";
    private string orderNotes = "";
    private string receivedNotes = "";
    private bool markAsOrdered = false;
    private bool reasonError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            // Get request details
            request = await Http.GetFromJsonAsync<EquipmentRequestDetailDto>($"api/equipment/requests/{RequestId}");
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/equipment/requests");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/equipment/requests/edit/{RequestId}");
    }

    private void ShowApproveModal()
    {
        CloseModals();
        showApproveModal = true;
    }

    private void ShowRejectModal()
    {
        CloseModals();
        showRejectModal = true;
    }

    private void ShowCancelModal()
    {
        CloseModals();
        showCancelModal = true;
    }

    private void ShowOrderModal()
    {
        CloseModals();
        showOrderModal = true;
    }

    private void ShowReceivedModal()
    {
        CloseModals();
        showReceivedModal = true;
    }

    private void CloseModals()
    {
        showApproveModal = false;
        showRejectModal = false;
        showCancelModal = false;
        showOrderModal = false;
        showReceivedModal = false;

        approvalNotes = "";
        rejectionReason = "";
        orderNotes = "";
        receivedNotes = "";
        markAsOrdered = false;
        reasonError = false;
    }

    private async Task ApproveRequest()
    {
        try
        {
            // Call API to approve request
            await Http.PostAsJsonAsync($"api/equipment/requests/{RequestId}/approve",
                new { Notes = approvalNotes, MarkAsOrdered = markAsOrdered });

            // Refresh data
            await LoadData();
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            CloseModals();
        }
    }

    private async Task RejectRequest()
    {
        reasonError = string.IsNullOrWhiteSpace(rejectionReason);

        if (reasonError)
            return;

        try
        {
            // Call API to reject request
            await Http.PostAsJsonAsync($"api/equipment/requests/{RequestId}/reject",
                new { Reason = rejectionReason });

            // Refresh data
            await LoadData();
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            CloseModals();
        }
    }

    private async Task CancelRequest()
    {
        try
        {
            // Call API to cancel request
            await Http.DeleteAsync($"api/equipment/requests/{RequestId}");

            // Navigate back to requests list
            NavigationManager.NavigateTo("/equipment/requests");
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            CloseModals();
        }
    }

    private async Task MarkAsOrdered()
    {
        try
        {
            // Call API to mark as ordered
            await Http.PostAsJsonAsync($"api/equipment/requests/{RequestId}/order",
                new { Notes = orderNotes });

            // Refresh data
            await LoadData();
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            CloseModals();
        }
    }

    private async Task MarkAsReceived()
    {
        try
        {
            // Call API to mark as received
            await Http.PostAsJsonAsync($"api/equipment/requests/{RequestId}/receive",
                new { Notes = receivedNotes });

            // Refresh data
            await LoadData();
        }
        catch (Exception)
        {
            // Error handling would go here
        }
        finally
        {
            CloseModals();
        }
    }

    private bool IsCurrentUser(string userName)
    {
        // In a real app, this would check against the current user's identity
        // For demo, we'll assume all requests are made by the current user
        return true;
    }

    private bool IsUrgent(DateTime dateNeeded)
    {
        // Consider urgent if needed within 7 days
        return (dateNeeded - DateTime.Now).TotalDays <= 7;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            "Ordered" => "bg-info",
            "Received" => "bg-primary",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetTimelineMarkerClass(string activityType)
    {
        return activityType switch
        {
            "Created" => "bg-primary",
            "Updated" => "bg-info",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            "Ordered" => "bg-info",
            "Received" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetTimelineIcon(string activityType)
    {
        return activityType switch
        {
            "Created" => "fas fa-plus",
            "Updated" => "fas fa-edit",
            "Approved" => "fas fa-check",
            "Rejected" => "fas fa-times",
            "Ordered" => "fas fa-shopping-cart",
            "Received" => "fas fa-box",
            _ => "fas fa-history"
        };
    }

    public class EquipmentRequestDetailDto
    {
        public int Id { get; set; }
        public string EquipmentName { get; set; }
        public string Category { get; set; }
        public int Quantity { get; set; }
        public decimal? EstimatedCostPerUnit { get; set; }
        public string Justification { get; set; }
        public string Specifications { get; set; }
        public string VendorInformation { get; set; }
        public DateTime DateNeeded { get; set; }
        public bool IsUrgent { get; set; }
        public string UrgencyReason { get; set; }
        public string AdditionalNotes { get; set; }
        public string Status { get; set; }
        public DateTime RequestDate { get; set; }
        public string RequestedBy { get; set; }
        public string Department { get; set; }
        public string ReviewedBy { get; set; }
        public DateTime? ReviewDate { get; set; }
        public string ReviewNotes { get; set; }
        public List<RequestActivityDto> Activities { get; set; } = new List<RequestActivityDto>();
    }

    public class RequestActivityDto
    {
        public string Type { get; set; }
        public string Description { get; set; }
        public string Details { get; set; }
        public DateTime Date { get; set; }
        public string PerformedBy { get; set; }
    }
}
public class EquipmentRequestDetailDto
{
    public int Id { get; set; }
    public string EquipmentName { get; set; } = "";
    public string Category { get; set; } = "";
    public int Quantity { get; set; }
    public decimal? EstimatedCostPerUnit { get; set; }
    public string Justification { get; set; } = "";
    public string Specifications { get; set; } = "";
    public string VendorInformation { get; set; } = "";
    public DateTime DateNeeded { get; set; }
    public bool IsUrgent { get; set; }
    public string UrgencyReason { get; set; } = "";
    public string AdditionalNotes { get; set; } = "";
    public string Status { get; set; } = "";
    public DateTime RequestDate { get; set; }
    public string RequestedBy { get; set; } = "";
    public string Department { get; set; } = "";
    public string ReviewedBy { get; set; } = "";
    public DateTime? ReviewDate { get; set; }
    public string ReviewNotes { get; set; } = "";
    public List<Component />