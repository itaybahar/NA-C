@page "/login-google"
@using System.Web
@inject NavigationManager NavigationManager
@inject Blazor_WebAssembly.Services.Interfaces.IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .container-center {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #1e1e2f;
        direction: rtl;
    }

    .card-dark {
        background-color: #1e1e1e;
        padding: 2rem;
        border-radius: 8px;
        width: 100%;
        max-width: 420px;
        box-shadow: 0 0 16px rgba(0, 0, 0, 0.6);
        color: white;
        text-align: center;
    }

        .card-dark img.logo {
            width: 100px;
            margin-bottom: 1rem;
        }

    h4 {
        margin-bottom: 1rem;
        color: #dc3545;
    }

    .spinner {
        width: 3rem;
        height: 3rem;
        border: 0.25rem solid rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        border-top-color: #dc3545;
        animation: spin 1s ease-in-out infinite;
        margin: 0 auto;
        margin-bottom: 1.5rem;
    }

    .alert-danger {
        background-color: #dc3545;
        color: white;
        margin-top: 1rem;
        padding: 0.75rem;
        border-radius: 6px;
    }

    .btn-retry {
        background-color: #dc3545;
        border: none;
        width: 100%;
        padding: 0.5rem;
        margin-top: 1rem;
        color: white;
    }

    .btn-secondary {
        background-color: #444;
        border: none;
        width: 100%;
        padding: 0.5rem;
        margin-top: 0.5rem;
        color: white;
    }

    .status-message {
        margin: 1rem 0;
        color: #ccc;
    }
</style>

<!-- Add the keyframes in a separate style block with ::deep for CSS isolation -->
<style>
    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<div class="container-center">
    <div class="card-dark">
        <img src="images/logo_png.png.jpg" alt="Logo" class="logo" />
        <h4>התחברות באמצעות Google</h4>

        @if (isLoading)
        {
            <div class="spinner"></div>
            <p class="status-message">מתחבר לשירות Google, אנא המתן...</p>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-danger">@errorMessage</div>
            <button class="btn-retry" @onclick="RetryLogin">נסה שוב</button>
            <button class="btn-secondary" @onclick="GoToRegularLogin">חזור להתחברות רגילה</button>
        }
        else if (processingToken)
        {
            <div class="spinner"></div>
            <p class="status-message">מעבד התחברות, אנא המתן...</p>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool processingToken = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var token = query.Get("token");
        var error = query.Get("error");

        if (!string.IsNullOrEmpty(error))
        {
            isLoading = false;
            errorMessage = $"שגיאה בהתחברות: {error}";
            return;
        }

        if (!string.IsNullOrEmpty(token))
        {
            isLoading = false;
            processingToken = true;
            await ProcessToken(token);
            return;
        }

        // Short delay to allow the component to render before redirect
        await Task.Delay(500);
        StartGoogleAuthentication(); // Fixed: Removed await as this method returns void
    }

    private async Task ProcessToken(string token)
    {
        try
        {
            await LocalStorage.SetItemAsync("authToken", token);
            // Redirect to home page after successful login
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            processingToken = false;
            errorMessage = $"שגיאה בעיבוד התחברות: {ex.Message}";
        }
    }

    private void StartGoogleAuthentication()
    {
        try
        {
            // Redirect to the API's Google authentication endpoint
            NavigationManager.NavigateTo("https://localhost:5191/api/auth/login-google", true);
        }
        catch (Exception ex)
        {
            isLoading = false;
            errorMessage = $"שגיאה בהתחברות לשירות של Google: {ex.Message}";
        }
        // Fixed: Removed return Task.CompletedTask as this method returns void
    }

    private void RetryLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StartGoogleAuthentication();
    }

    private void GoToRegularLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
