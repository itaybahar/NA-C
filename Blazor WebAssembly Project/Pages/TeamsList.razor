@page "/teams"
@attribute [Authorize(Roles = "Operator,Manager")]
@using Blazor_WebAssembly.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col">
            <h2>Teams Management</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Teams</li>
                </ol>
            </nav>
        </div>
        <div class="col-auto">
            @if (_isManager)
            {
                <button class="btn btn-primary" @onclick="NavigateToAddTeam">
                    <i class="fas fa-plus me-1"></i> Add New Team
                </button>
            }
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search teams..."
                       @bind="_searchTerm" @bind:event="oninput" @onkeypress="HandleSearchKeyPress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchTeams">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="_statusFilter">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Inactive">Inactive</option>
                <option value="Blacklisted">Blacklisted</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="_sortBy">
                <option value="Name">Sort by Name</option>
                <option value="MemberCount">Sort by Member Count</option>
                <option value="ActiveCheckouts">Sort by Active Checkouts</option>
                <option value="Status">Sort by Status</option>
            </select>
        </div>
    </div>

    <div class="row">
        @if (_filteredTeams.Any())
        {
            @foreach (var team in _filteredTeams)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card shadow-sm h-100 @(team.IsBlacklisted ? "border-danger" : "")">
                        <div class="card-header d-flex justify-content-between align-items-center @(team.IsBlacklisted ? "bg-danger text-white" : "bg-light")">
                            <h5 class="mb-0">@team.Name</h5>
                            <div>
                                @if (team.IsBlacklisted)
                                {
                                    <span class="badge bg-dark">
                                        <i class="fas fa-ban me-1"></i> Blacklisted
                                    </span>
                                }
                                else if (!team.IsActive)
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@team.Description</p>
                            <div class="row text-center mb-3">
                                <div class="col-4">
                                    <div class="mb-1">
                                        <i class="fas fa-users text-primary"></i>
                                    </div>
                                    <h5 class="mb-0">@team.MemberCount</h5>
                                    <small class="text-muted">Members</small>
                                </div>
                                <div class="col-4">
                                    <div class="mb-1">
                                        <i class="fas fa-clipboard-list text-info"></i>
                                    </div>
                                    <h5 class="mb-0">@team.ActiveCheckouts</h5>
                                    <small class="text-muted">Checkouts</small>
                                </div>
                                <div class="col-4">
                                    <div class="mb-1">
                                        <i class="fas fa-history text-warning"></i>
                                    </div>
                                    <h5 class="mb-0">@team.CheckoutHistory</h5>
                                    <small class="text-muted">History</small>
                                </div>
                            </div>
                            <div class="team-leader mb-2">
                                <small class="text-muted d-block">Team Leader:</small>
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-user-circle me-2 text-secondary"></i>
                                    <span>@team.TeamLeader</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToTeamDetails(team.Id)">
                                    <i class="fas fa-info-circle me-1"></i> Details
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => NavigateToTeamMembers(team.Id)">
                                    <i class="fas fa-users me-1"></i> Members
                                </button>
                                @if (_isManager)
                                {
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => NavigateToEditTeam(team.Id)">
                                        <i class="fas fa-edit me-1"></i> Edit
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        @if (!string.IsNullOrEmpty(_searchTerm) || !string.IsNullOrEmpty(_statusFilter))
                        {
                            <i class="fas fa-search fa-3x mb-3 text-muted"></i>
                            <h5>No teams found matching your search criteria</h5>
                            <button class="btn btn-outline-secondary mt-3" @onclick="ClearFilters">
                                <i class="fas fa-times me-1"></i> Clear Filters
                            </button>
                        }
                        else
                        {
                            <i class="fas fa-users fa-3x mb-3 text-muted"></i>
                            <h5>No teams found</h5>
                            @if (_isManager)
                            {
                                <button class="btn btn-primary mt-3" @onclick="NavigateToAddTeam">
                                    <i class="fas fa-plus me-1"></i> Add New Team
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Team> _allTeams = new();
    private List<Team> _filteredTeams = new();
    private string _searchTerm = "";
    private string _statusFilter = "";
    private string _sortBy = "Name";
    private bool _isManager = true; // This would normally be determined from auth state

    protected override void OnInitialized()
    {
        // Sample data - in a real app this would come from a service
        _allTeams = GetSampleTeams();
        ApplyFilters();
    }

    private List<Team> GetSampleTeams()
    {
        return new List<Team>
        {
            new Team
            {
                Id = 1,
                Name = "Alpha Team",
                Description = "Specialized in tactical operations and first response scenarios.",
                TeamLeader = "John Smith",
                MemberCount = 8,
                ActiveCheckouts = 3,
                CheckoutHistory = 42,
                IsActive = true,
                IsBlacklisted = false
            },
            new Team
            {
                Id = 2,
                Name = "Bravo Team",
                Description = "Reconnaissance and intelligence gathering operations.",
                TeamLeader = "Robert Johnson",
                MemberCount = 6,
                ActiveCheckouts = 5,
                CheckoutHistory = 37,
                IsActive = true,
                IsBlacklisted = false
            },
            new Team
            {
                Id = 3,
                Name = "Charlie Team",
                Description = "Search and rescue operations in urban environments.",
                TeamLeader = "Michael Wilson",
                MemberCount = 10,
                ActiveCheckouts = 0,
                CheckoutHistory = 56,
                IsActive = true,
                IsBlacklisted = true
            },
            new Team
            {
                Id = 4,
                Name = "Delta Team",
                Description = "Specialized in long-range communications and support.",
                TeamLeader = "Sarah Martinez",
                MemberCount = 5,
                ActiveCheckouts = 2,
                CheckoutHistory = 28,
                IsActive = true,
                IsBlacklisted = false
            },
            new Team
            {
                Id = 5,
                Name = "Echo Team",
                Description = "Training and education focused team.",
                TeamLeader = "David Anderson",
                MemberCount = 7,
                ActiveCheckouts = 0,
                CheckoutHistory = 19,
                IsActive = false,
                IsBlacklisted = false
            }
        };
    }

    private void HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchTeams();
        }
    }

    private void SearchTeams()
    {
        ApplyFilters();
    }

    private void ClearFilters()
    {
        _searchTerm = "";
        _statusFilter = "";
        _sortBy = "Name";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filteredTeams = _allTeams.AsEnumerable();

        // Apply search term filter
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filteredTeams = filteredTeams.Where(t =>
                t.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.TeamLeader.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply status filter
        if (!string.IsNullOrWhiteSpace(_statusFilter))
        {
            filteredTeams = _statusFilter switch
            {
                "Active" => filteredTeams.Where(t => t.IsActive && !t.IsBlacklisted),
                "Inactive" => filteredTeams.Where(t => !t.IsActive && !t.IsBlacklisted),
                "Blacklisted" => filteredTeams.Where(t => t.IsBlacklisted),
                _ => filteredTeams
            };
        }

        // Apply sorting
        filteredTeams = _sortBy switch
        {
            "Name" => filteredTeams.OrderBy(t => t.Name),
            "MemberCount" => filteredTeams.OrderByDescending(t => t.MemberCount),
            "ActiveCheckouts" => filteredTeams.OrderByDescending(t => t.ActiveCheckouts),
            "Status" => filteredTeams.OrderBy(t => t.IsBlacklisted ? 0 : (t.IsActive ? 1 : 2)),
            _ => filteredTeams.OrderBy(t => t.Name)
        };

        _filteredTeams = filteredTeams.ToList();
    }

    private void NavigateToTeamDetails(int teamId)
    {
        NavigationManager.NavigateTo($"/teams/details/{teamId}");
    }

    private void NavigateToTeamMembers(int teamId)
    {
        NavigationManager.NavigateTo($"/teams/members/{teamId}");
    }

    private void NavigateToEditTeam(int teamId)
    {
        NavigationManager.NavigateTo($"/teams/edit/{teamId}");
    }

    private void NavigateToAddTeam()
    {
        NavigationManager.NavigateTo("/teams/add");
    }

    private class Team
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string TeamLeader { get; set; } = "";
        public int MemberCount { get; set; }
        public int ActiveCheckouts { get; set; }
        public int CheckoutHistory { get; set; }
        public bool IsActive { get; set; }
        public bool IsBlacklisted { get; set; }
    }
}