@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context?.User?.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p class="text-center p-4">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <div class="loading-progress d-flex flex-column justify-content-center align-items-center vh-100">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading authorization...</p>
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="text-center p-4">⚠ Page not found</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User.Identity?.IsAuthenticated == true)
            {
                await JSRuntime.InvokeVoidAsync(
                    "console.log",
                    $"User authenticated: {authState.User.Identity.Name}"
                );

                // Log all claims to console
                foreach (var claim in authState.User.Claims)
                {
                    await JSRuntime.InvokeVoidAsync(
                        "console.log",
                        $"Claim: {claim.Type} = {claim.Value}"
                    );
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync(
                    "console.log",
                    "User not authenticated"
                );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
    }
}
