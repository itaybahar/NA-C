@inject IJSRuntime JSRuntime

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context?.User?.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p class="text-center p-4">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <div class="loading-progress d-flex flex-column justify-content-center align-items-center vh-100">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading authorization...</p>
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="text-center p-4">⚠ Page not found</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize the logger
            await JSRuntime.InvokeVoidAsync("blazorConsoleLog.init");

            // Log a message
            await JSRuntime.InvokeVoidAsync("blazorConsoleLog.log", "This is a log message from Blazor!");

            // Log a warning
            await JSRuntime.InvokeVoidAsync("blazorConsoleLog.warn", "This is a warning message from Blazor!");

            // Log an error
            await JSRuntime.InvokeVoidAsync("blazorConsoleLog.error", "This is an error message from Blazor!");

            // Log a message to the server
            await JSRuntime.InvokeVoidAsync("blazorConsoleLog.logToServer", "This is a server log message.", "Info");
        }
        catch (JSException jsEx)
        {
            Console.WriteLine($"JavaScript initialization failed: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
    }
}